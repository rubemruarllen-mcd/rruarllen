<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NpSharp.Framework</name>
    </assembly>
    <members>
        <member name="T:NpSharp.Framework.AssemblyDescriptor">
            <summary>
            Describes an <see cref="T:System.Reflection.Assembly"/> without holding a reference to it.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.AssemblyDescriptor.NameComparer">
            <summary>
            Gets an instance of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>s
            the compares based on the <see cref="P:NpSharp.Framework.AssemblyDescriptor.Name"/> property.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.AssemblyDescriptor.Name">
            <summary>
            Gets or sets the simple name of this <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.
            This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.AssemblyDescriptor.Version">
            <summary>
            Gets or sets the <see cref="P:NpSharp.Framework.AssemblyDescriptor.Version"/> of this <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.AssemblyDescriptor.CodeBase">
            <summary>
            Gets or sets the location of the assembly as a URL.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.AssemblyDescriptor.CultureInfo">
            <summary>
            Gets or sets the <see cref="P:NpSharp.Framework.AssemblyDescriptor.CultureInfo"/> supported by this <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.AssemblyDescriptor.PublicKeyToken">
            <summary>
            Gets the public key token,
            which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed,
            converted to its hexadecimal representation. 
            </summary>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.op_Implicit(System.Reflection.Assembly)~NpSharp.Framework.AssemblyDescriptor">
            <summary>
            Converts the provided <paramref name="assembly"/> to an instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.
            </summary>
            <param name="assembly">An instance of <see cref="T:System.Reflection.Assembly"/>.</param>
            <returns>The resulting instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.op_Implicit(System.Reflection.AssemblyName)~NpSharp.Framework.AssemblyDescriptor">
            <summary>
            Converts the provided <paramref name="assemblyName"/> to an instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.
            </summary>
            <param name="assemblyName">An instance of <see cref="T:System.Reflection.AssemblyName"/>.</param>
            <returns>The resulting instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.op_Equality(NpSharp.Framework.AssemblyDescriptor,NpSharp.Framework.AssemblyDescriptor)">
            <summary>
            Checks whether the provided <paramref name="left"/>
            is equal to the provided <paramref name="right"/>.
            </summary>
            <param name="left">An instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.</param>
            <param name="right">An instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.</param>
            <returns><c>true</c> if both instances are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.op_Inequality(NpSharp.Framework.AssemblyDescriptor,NpSharp.Framework.AssemblyDescriptor)">
            <summary>
            Checks whether the provided <paramref name="left"/>
            is different than the provided <paramref name="right"/>.
            </summary>
            <param name="left">An instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.</param>
            <param name="right">An instance of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>.</param>
            <returns><c>true</c> if both instances are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.Equals(NpSharp.Framework.AssemblyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.AssemblyDescriptor.NameEqualityComparer">
            <summary>
            Implements the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>
            for the <see cref="P:NpSharp.Framework.AssemblyDescriptor.Name"/> property.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.NameEqualityComparer.Equals(NpSharp.Framework.AssemblyDescriptor,NpSharp.Framework.AssemblyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.AssemblyDescriptor.NameEqualityComparer.GetHashCode(NpSharp.Framework.AssemblyDescriptor)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.ByteArrayExtensions">
            <summary>
            Extension methods for <see cref="T:System.Array"/>s of <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ByteArrayExtensions.ToHexadecimalString(System.Byte[])">
            <summary>
            Converts the provided <paramref name="bytes"/> to its hexadecimal representation.
            </summary>
            <param name="bytes">An <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s.</param>
            <returns>The <see cref="T:System.String"/> that contains the hexadecimal representation.</returns>
        </member>
        <member name="M:NpSharp.Framework.ByteArrayExtensions.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
            that is encoded with base-64 digits.
            A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="bytes">
            An array of 8-bit unsigned integers.
            </param>
            <param name="options">
            <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" /> to insert a line break every 76 characters,
            or <see cref="F:System.Base64FormattingOptions.None" /> to not insert line breaks.
            </param>
            <returns>The string representation in base 64 of the elements in <paramref name="bytes" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.ByteArrayExtensions.FromBase64String(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits,
            to an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="base64">The string to convert. </param>
            <returns>An array of 8-bit unsigned integers that is equivalent to <paramref name="base64" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="base64" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.FormatException">
            The length of <paramref name="base64" />,
            ignoring white-space characters, is not zero or a multiple of 4.
            -or-The format of <paramref name="base64" /> is invalid. <paramref name="base64" />
            contains a non-base-64 character, more than two padding characters,
            or a non-white space-character among the padding characters.
            </exception>
        </member>
        <member name="T:NpSharp.Framework.CollectionExtension">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CollectionExtension.WithAdd``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Fluent API for adding an element into a collection
            </summary>
            <typeparam name="T">the type</typeparam>
            <param name="source">source collection</param>
            <param name="element">element to add</param>
            <returns>collection instance for fluent API</returns>
            <example><code><![CDATA[
            var x = new List<int>();
            x = x.WithAdd(1).WithAdd(2).WithAdd(3);
            ]]></code></example>
        </member>
        <member name="M:NpSharp.Framework.CollectionExtension.WithRemove``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Fluent API for remocing an element from a collection
            </summary>
            <typeparam name="T">the type</typeparam>
            <param name="source">source collection</param>
            <param name="element">element to remove</param>
            <returns>collection instance for fluent API</returns>
            <example><code><![CDATA[
            var x = new List<int>();
            x = x.WithAdd(1).WithAdd(2).WithAdd(3);
            x = x.WithRemove(1).WithRemove(2);
            ]]></code></example>
        </member>
        <member name="T:NpSharp.Framework.Configuration.BooleanParameter">
            <summary>
            Represents a boolean configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.BooleanParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ColorParameter">
            <summary>
            Represents a color configuration parameter
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.ColorParameter.HexRegex">
            <summary>Regular expression that matches Hexadecimal Strings</summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.ColorParameter._colorDb">
            <summary>Instance of <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/>.</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ColorParameter.Value">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.ValueToString(System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.TryConvertToColor(System.String,System.Drawing.Color@)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> type to a <see cref="T:System.Drawing.Color"/> type, either the value is a color name, or a hexadecimal.
            </summary>
            <param name="string">The <see cref="T:System.String"/> value.</param>
            <param name="color">The output <see cref="T:System.Drawing.Color"/> value.</param>
            <returns>True if the conversion succeeded.</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.TryConvertToColorFromName(System.String,System.Drawing.Color@)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> with a color name to a <see cref="T:System.Drawing.Color"/> type.
            </summary>
            <param name="string">The <see cref="T:System.String"/> with the color name.</param>
            <param name="color">The output <see cref="T:System.Drawing.Color"/> value.</param>
            <returns>True if the conversion succeeded.</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.TryConvertToColorFromHex(System.String,System.Drawing.Color@)">
            <summary>
            Tries to convert a <see cref="T:System.String"/> with a color hexadecimal to a <see cref="T:System.Drawing.Color"/> type.
            </summary>
            <param name="string">The <see cref="T:System.String"/> with the hexadecimal value.</param>
            <param name="color">The output <see cref="T:System.Drawing.Color"/> value.</param>
            <returns>True if the conversion succeeded.</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.NormalizeHexadecimalColorString(System.String)">
            <summary>
            Normalizes the hexadecimal value to ARGB value.
            </summary>
            <param name="string">The original hexadecimal value.</param>
            <returns>The normalized hexadecimal value.</returns>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ConfigurationContext">
            <summary>
            Represents a Configuration Context.
            <para>This context can be used to retrieve a <see cref="T:NpSharp.Framework.Configuration.Parameter`1"/>.<see cref="P:NpSharp.Framework.Configuration.Parameter`1.Value"/> 
            if it is intended to be something else than the configured <see cref="T:NpSharp.Framework.Configuration.Parameter`1"/>.<see cref="P:NpSharp.Framework.Configuration.Parameter.ValueString"/>.</para>
            <para>For example, a <see cref="T:NpSharp.Framework.Configuration.ColorParameter"/> can be configured with <see cref="P:NpSharp.Framework.Configuration.Parameter.ValueString"/> = "PosButtonColor".</para>
            <para>In this case, the intention is that this <see cref="P:NpSharp.Framework.Configuration.ColorParameter.Value"/> 
            should be the respective "PosButtonColor" <see cref="T:System.Drawing.Color"/> in the <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/>.</para>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationContext.PluginLocale">
            <summary>
            Current Plugin Locale.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationContext.ColorDb">
            <summary>
            Instance of the <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/> Internal Service.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationContext.MediaBroker">
            <summary>
            Instance of the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaBroker"/> Internal Service.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.DecimalParameter">
            <summary>
            Represents a decimal configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DecimalParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.DoubleParameter">
            <summary>
            Represents a double-precision floating point configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DoubleParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.IConfigurationManager">
            <summary>
            Configuration manager internal service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReadSection(NpSharp.Framework.Configuration.Section)">
            <summary>
            Reads a configuration section from the configuration database
            </summary>
            <param name="section">section to read and populate</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReadSection(System.String)">
            <summary>
            Reads a configuration section from the configuration database
            </summary>
            <param name="sectionName">section name</param>
            <returns>configuration section</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReadNodeSection(System.String,System.String)">
            <summary>
            Reads a configuration section for an specific node from the configuration database
            </summary>
            <param name="sectionName">section name</param>
            <param name="nodeName">node name</param>
            <returns>configuration section</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.UpdateSection(NpSharp.Framework.Configuration.Section,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates a configuration section in the configuration database
            </summary>
            <param name="section">section to update</param>
            <param name="replace">
            flag indicating whether to replace the existing section or not.
            When this is false (the default), the given section parameters will be merged
            into the existing section (if any).
            </param>
            <param name="updateStructure">
            if this is true (and replace is false), the merge operation will update the
            section structure, such as changing descriptions and adding new parameters and subsections
            </param>
            <param name="updateParameterValues">
            if this is true (and replace is false), the merge operation will update the
            value of existing parameters and will also merge elements from existing list subsections (adding or removing them as necessary)
            </param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.UpdateNodeSection(NpSharp.Framework.Configuration.Section,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates a configuration section for an specific node from the configuration database
            </summary>
            <param name="section">section to update</param>
            <param name="nodeName">node name to associate this configuration section</param>
            <param name="replace">
            flag indicating whether to replace the existing section or not.
            When this is false (the default), the given section parameters will be merged
            into the existing section (if any).
            </param>
            <param name="updateStructure">
            if this is true (and replace is false), the merge operation will update the
            section structure, such as changing descriptions and adding new parameters and subsections
            </param>
            <param name="updateParameterValues">
            if this is true (and replace is false), the merge operation will update the
            value of existing parameters and will also merge elements from existing list subsections (adding or removing them as necessary)
            </param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.AddFromArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds configuration parameters from a list of command-line arguments.<br/>
            Configuration parameters can be defined in the command-line by using the following syntax:
            <b>-CSectionName,ParameterName=ParameterValue</b>.<br/>
            <br/>
            Both <b>SectionName</b> and <b>ParameterName</b> allow alphanumeric, '_', '.' and '-' characters.<br/>
            The <b>ParameterValue</b> allows any character.
            </summary>
            <param name="args">command-line arguments</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReconfigureAllPlugins">
            <summary>
            Reconfigures all plugins instances that have at least one configuration section.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.GetConfiguredSectionNames">
            <summary>
            Gets the names of configured <see cref="T:NpSharp.Framework.Configuration.Section"/>.<br/>
            </summary>
            <returns>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/>
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.GetSectionsWithParameterWithLegacyLocation">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of 
            <see cref="T:System.String">Node Name</see> and <see cref="T:NpSharp.Framework.Configuration.Section"/> that represents a plugin node name and
            a section where at least one of its parameters have an instance of <see cref="T:NpSharp.Framework.Configuration.LegacyLocation"/>
            different of <c>null</c>.
            </summary>
            <returns>
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> of 
            <see cref="T:System.String">Node Name</see> and <see cref="T:NpSharp.Framework.Configuration.Section"/>
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Configuration.IConfigurationResolver">
            <summary>
            Expose methods for retrieving information of resolved (injected) <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>s.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.IConfigurationResolver.ResolvedConfigurationSections">
            <summary>
            Gets a sequence of <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>s
            that were resolved for the current plug-in.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ImageParameter">
            <summary>
            Represents an Image Configuration Parameter.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ImageParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Configuration.ImageParameter"/> with the provided <paramref name="name"/> and <paramref name="description"/>.
            </summary>
            <param name="name">This <see cref="T:NpSharp.Framework.Configuration.ImageParameter"/> name.</param>
            <param name="description">This <see cref="T:NpSharp.Framework.Configuration.ImageParameter"/> description.</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.IntParameter">
            <summary>
            Represents an integer configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IntParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.LegacyConverterEnum">
            <summary>
            A set of type of conversions that should be made before set the value into a parameter.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.LegacyConverterEnum.FromTicksToTimeSpan">
            <summary>
            Converts an integer value that represents ticks to <see cref="T:System.TimeSpan"/>.<br/>
            Recommended when using a <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.LegacyConverterEnum.FromMillisecondsToTimeSpan">
            <summary>
            Converts an integer value that represents Milliseconds to <see cref="T:System.TimeSpan"/>.<br/>
            Recommended when using a <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.LegacyConverterEnum.FromSecondsToTimeSpan">
            <summary>
            Converts an integer value that represents Seconds to <see cref="T:System.TimeSpan"/>.<br/>
            Recommended when using a <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.LegacyConverterEnum.FromMinutesToTimeSpan">
            <summary>
            Converts an integer value that represents Minutes to <see cref="T:System.TimeSpan"/>.<br/>
            Recommended when using a <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.LegacyConverterEnum.FromHoursToTimeSpan">
            <summary>
            Converts an integer value that represents Hours to <see cref="T:System.TimeSpan"/>.<br/>
            Recommended when using a <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.LegacyConverterEnum.FromDaysToTimeSpan">
            <summary>
            Converts an integer value that represents Days to <see cref="T:System.TimeSpan"/>.<br/>
            Recommended when using a <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.LegacyLocation">
            <summary>
            Represents the location of this parameter on NP61 Configuration files.<br/>
            <br/>
            It should be used only in cases where the plugin node name represents a NP61 
            service following the pattern XXX0000, where XXX represents the Service 
            Type(e.g POS) and 0000 represents the service name (e.g. 0001)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.LegacyLocation.ConfigurationType">
            <summary>
            Represents the value of the type/imports attribute in a configuration node.
            When this property is set the framework will try to get this configuration 
            from the Service configuration looking for the configuration with the the type or imports 
            attribute as this property value(e.g "Store.wide"), if its not possible then the framework will try 
            to find the configuration inside of the Store-db.xml.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.LegacyLocation.SectionName">
            <summary>
            Represents the value of the name attribute in the section node 
            inside of the configuration node, that could be the configuration node inside of 
            the Service node referenced by the plugin Node name or a configuration node specified by
            the <see cref="P:NpSharp.Framework.Configuration.LegacyLocation.ConfigurationType"/> property.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.LegacyLocation.ParameterName">
            <summary>
            Represents the value of the name attribute in the parameter node, inside of the 
            section node represented by the <see name="SectionName"/> property, inside of the 
            configuration node.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.LegacyLocation.LegacyConverter">
            <summary>
            Represents a conversion that will be made with the raw value extracted from 
            NP61 configuration before set the NP# configuration.<br/>
            <br/>
            When it is null, the raw value will be set.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.LegacyLocation.Clone">
            <summary>
            Clones this <see cref="T:NpSharp.Framework.Configuration.LegacyLocation"/>.
            </summary>
            <returns>
            A new instance of <see cref="T:NpSharp.Framework.Configuration.LegacyLocation"/>
            that is equivalent to this current instance.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ListSectionHolder">
            <summary>
            Represents a list of Subsections
            </summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ListSectionHolder.SectionChanged">
            <summary>
            Event raised when the list section configuration changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder.InternalSection">
            <summary>
            Get the internal <see cref="T:NpSharp.Framework.Configuration.ListSection"/> object
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ListSectionHolder`1">
            <summary>
            Represents a list of Subsections of a Generic Configuration.
            </summary>
            <typeparam name="T">Type of the Subsections. This type has to extend <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>.</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.#ctor(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.InternalSectionChanged(System.Object,NpSharp.Framework.Configuration.SectionChangedInternalEventArgs)">
            <summary>
            Called when the internal section was reconfigured, so we need to merge configuration holders
            </summary>
            <param name="sender">event sender (not used)</param>
            <param name="args">event arguments</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.ElementsOrDefault">
            <summary>
            Returns the list of elements to use (either the configured values, or the default ones)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.InternalSection">
            <summary>
            Get the internal <see cref="T:NpSharp.Framework.Configuration.ListSection"/> object
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.Elements">
            <summary>
            List of elements on this subsections list
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.DefaultElements">
            <summary>
            Default list of elements to be used if no configuration is provided
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.Item(System.Int32)">
            <summary>
            Gets the Subsection at a specific index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.Count">
            <summary>
            Number of elements in this list section
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.LongParameter">
            <summary>
            Represents a long integer configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.LongParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.MediaParameter">
            <summary>
            Represents a Media Configuration Parameter.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Configuration.MediaParameter"/> with the provided <paramref name="name"/> and <paramref name="description"/>.
            </summary>
            <param name="name">This <see cref="T:NpSharp.Framework.Configuration.MediaParameter"/> name.</param>
            <param name="description">This <see cref="T:NpSharp.Framework.Configuration.MediaParameter"/> description.</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.ValueToString(NpSharp.Framework.InternalServices.MediaDb.MediaInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Configuration"/> namespace contains
            interfaces and objects that can be used to interact with the functional configuration layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.Parameter">
            <summary>
            Represents a configuration parameter.
                <see cref="T:NpSharp.Framework.Configuration.StringParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.UriParameter"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.Name">
            <summary>Configuration parameter name</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.Description">
            <summary>Configuration parameter description</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.DefaultValueString">
            <summary>Optional default value of this parameter, as a string</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.ValueString">
            <summary>Current value of this parameter, as a string</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.ValueStringOrDefault">
            <summary>Gets the <see cref="P:NpSharp.Framework.Configuration.Parameter.ValueString"/> or <see cref="P:NpSharp.Framework.Configuration.Parameter.DefaultValueString"/> (if ValueString is null)</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.AllowedValues">
            <summary>
            Optional list of values allowed for this parameter.
            If this list is empty or null, then all values are allowed.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.LegacyLocation">
            <summary>
            Optional Legacy Location configuration
            if this is set properly, then NP6 Integrator will try to find the value of 
            this parameter in NP61 configuration files
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.IsValidString(System.String)">
            <summary>
            Check if the given string value is valid for this parameter
            </summary>
            <param name="value">string value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.StringValueChanged(System.String)">
            <summary>
            Called when the string value of the parameter has changed
            </summary>
            <param name="oldValueString">old string value</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <summary>
            Sets the <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/> of this <see cref="T:NpSharp.Framework.Configuration.Parameter"/> instance.
            </summary>
            <param name="configurationContext">The <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/>.</param>
            <returns>Returns whether this parameter has changed its value due to context changes.</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.Clone">
            <summary>
            Returns a deep clone copy of this parameter
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.Equals(NpSharp.Framework.Configuration.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.Parameter`1">
            <summary>
            Represents a configuration parameter of a generic type.
            This class should not be used directly by plugins!
            Use one of the more specialized classes:
                <see cref="T:NpSharp.Framework.Configuration.IntParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.LongParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.DoubleParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.DecimalParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>
            </summary>
            <typeparam name="T">parameter type</typeparam>
        </member>
        <member name="E:NpSharp.Framework.Configuration.Parameter`1.ValueChanged">
            <summary>
            Event raised when the parameter value changes
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.StringToValue(System.String)">
            <summary>
            Convert a string value to the generic parameter type
            </summary>
            <param name="s">string value</param>
            <returns>converted parameter value</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.ValueToString(`0)">
            <summary>
            Convert a generic parameter value to string
            </summary>
            <param name="v">parameter value</param>
            <returns>string value</returns>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter`1.Value">
            <summary>Parameter value</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.StringValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.FireValueChanged(NpSharp.Framework.Configuration.ParameterChangedEventArgs{NpSharp.Framework.Configuration.Parameter{`0},`0})">
            <summary>
            Fires the <see cref="E:NpSharp.Framework.Configuration.Parameter`1.ValueChanged"/> event
            </summary>
            <param name="args">event arguments</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter`1.DefaultValue">
            <summary>Optional default parameter value</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.IsValidString(System.String)">
            <summary>
            Check if the given string value is valid for this parameter
            </summary>
            <param name="value">string value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.IsValid(`0)">
            <summary>
            Check if the given value is valid for this parameter
            </summary>
            <param name="value">parameter value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ComparableParameter`1">
            <summary>
            Represents a configuration parameter of a generic comparable value type.
            </summary>
            <typeparam name="T">parameter type</typeparam>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ComparableParameter`1.MinValue">
            <summary>Optional minimum value for this parameter</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ComparableParameter`1.MaxValue">
            <summary>Optional maximum value for this parameter</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ComparableParameter`1.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ComparableParameter`1.IsValid(`0)">
            <summary>
            Check if the given value is valid for this parameter
            </summary>
            <param name="value">parameter value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ComparableParameter`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ParameterChangedEventArgs">
            <summary>
            Event arguments for parameter changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs.Parameter">
            <summary>parameter which fired this event</summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2">
            <summary>
            Event arguments for parameter changes
            </summary>
            <typeparam name="TParam">type of the parameter</typeparam>
            <typeparam name="TValue">type of the parameter value</typeparam>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2.Parameter">
            <summary>parameter which fired this event</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2.OldValue">
            <summary>old parameter value</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2.NewValue">
            <summary>new parameter value</summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder">
            <summary>
            Holds a configuration section.
            All <see cref="T:NpSharp.Framework.Configuration.Parameter"/> fields of the inheriting class will be automatically added to the <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/> instance.
            </summary>
            <example>
            This example shows how to define a simple configuration section with a single parameter:
            <code><![CDATA[
            class MySection : ConfigurationSectionHolder {
                public MySection() : base("MySection", "my config. section") { }
                public readonly IntParameter MyParameter = new IntParameter("MyParameter", "my parameter") {DefaultValue = 5};
            }
            ]]></code>
            </example>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ConfigurationSectionHolder.SectionChanged">
            <summary>
            Event raised when the section configuration changes.<br/>
            This is just a proxy for the <see cref="E:NpSharp.Framework.Configuration.Section.SectionChanged"/> event in the <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/> instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ConfigurationSectionHolder.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration section holder
            </summary>
            <param name="name">configuration section name</param>
            <param name="description">configuration section description</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection">
            <summary>
            Get the internal <see cref="T:NpSharp.Framework.Configuration.Section"/> object
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.Section">
            <summary>
            Represents a configuration section
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration section with the given name and description
            </summary>
            <param name="name">Configuration section name</param>
            <param name="description">Configuration section description in English</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.Name">
            <summary>Configuration section name</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.Description">
            <summary>Configuration section description in English</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.Parameters">
            <summary>List of parameters contained on this configuration section</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.SubSections">
            <summary>List of sub-sections</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.ListSubSections">
            <summary>List of sub-section lists</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.LegacyLocationParameters">
            <summary>
            List of parameters contained on this configuration section and all of the
            contained sub sections that have  <see cref="P:NpSharp.Framework.Configuration.Parameter.LegacyLocation"/> 
            property set to an instance  of <see cref="P:NpSharp.Framework.Configuration.Section.LegacyLocationParameters"/>
            </summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.Section.SectionChanged">
            <summary>
            Event raised when the section configuration changes
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Configure(NpSharp.Framework.Configuration.Section)">
            <summary>
            Configures this section with the given parameters.
            It is important to note that this will never create new parameters on this section.
            It will always only change the value of existing parameters
            </summary>
            <param name="newSection">New Section with new parameters, new parameter values and/or Subsections</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Get(System.String)">
            <summary>
            Retrieve a parameter from this section
            </summary>
            <param name="parameterName">parameter name</param>
            <returns>parameter instance, or null if not found</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Get``1(System.String)">
            <summary>
            Retrieve a parameter from this section
            </summary>
            <param name="parameterName">parameter name</param>
            <typeparam name="TParam">parameter type</typeparam>
            <returns>parameter instance, or null if not found</returns>
            <exception cref="T:System.InvalidCastException">when the given parameter type is wrong</exception>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Equals(System.Object)">
            <summary>
            Check if two sections are equal (parameters are not compared at all)
            </summary>
            <param name="obj">other</param>
            <returns>bool</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Equals(NpSharp.Framework.Configuration.Section)">
            <summary>
            Check if two sections are equal (parameters are not compared at all)
            </summary>
            <param name="other">other</param>
            <returns>bool</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Clone">
            <summary>
            Perform a deep clone operation
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <summary>
            Sets the configuration context for this <see cref="T:NpSharp.Framework.Configuration.Section"/> and all its
            <see cref="P:NpSharp.Framework.Configuration.Section.SubSections"/> and <see cref="P:NpSharp.Framework.Configuration.Section.ListSubSections"/>.
            </summary>
            <param name="configurationContext">The <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/> to set.</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.SectionChangedEventArgs">
            <summary>
            Event arguments for configuration section changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.SectionChangedEventArgs.Section">
            <summary>section which has been changed</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.SectionChangedEventArgs.Parameters">
            <summary>list of changed parameters</summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.SectionChangedInternalEventArgs">
            <summary>
            Event arguments for the <see cref="E:NpSharp.Framework.Configuration.ListSection.SectionChangedInternal"/> event
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.SectionChangedInternalEventArgs.ConfigurationContext">
            <summary>
            Configuration context being set (null when just reconfiguring values)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.StringParameter">
            <summary>
            Represents an string configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.StringParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.StringParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.StringParameter.ValueToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ListSection">
            <summary>
            Represents a list of Subsections
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Name">
            <summary>Subsection List name</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Description">
            <summary>Subsection List description</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.InternalElements">
            <summary>
            List of customized elements on this subsections list.
            This list will be null if the list of elements was not customized.
            Plugins should NOT use this property (use <see cref="P:NpSharp.Framework.Configuration.ListSection.Elements"/> instead)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Elements">
            <summary>
            List of elements on this subsections list
            This property will return the default elements if the the list of elements was not customized.
            Plugins should use this property instead of <see cref="P:NpSharp.Framework.Configuration.ListSection.InternalElements"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.DefaultElements">
            <summary>Default list of elements to be used if no configuration is provided</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Template">
            <summary>Configuration section to be used as a template when adding new sections to the list</summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ListSection.SectionChanged">
            <summary>
            Event raised when the list section configuration changes
            </summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ListSection.SectionChangedInternal">
            <summary>
            Event raised when the list section configuration changes (used by the framework itself)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.#ctor(System.String,System.String,NpSharp.Framework.Configuration.Section)">
            <summary>
            Constructs a Subsection List with the given Name and Description
            </summary>
            <param name="name">section name</param>
            <param name="description">section description</param>
            <param name="template">configuration section to be used as a template when adding new sections to the list</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.Add">
            <summary>
            Adds a new section to the list, based on the ListSection template (<see cref="P:NpSharp.Framework.Configuration.ListSection.Template"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.Configure(NpSharp.Framework.Configuration.ListSection)">
            <summary>
            Configures this list section with the sections from the given list section.
            </summary>
            <param name="listSection">New list section</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.Clone">
            <summary>
            Perform a deep clone operation
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <summary>
            Sets the configuration context for this <see cref="T:NpSharp.Framework.Configuration.ListSection"/> and all its <see cref="P:NpSharp.Framework.Configuration.ListSection.Elements"/> and <see cref="P:NpSharp.Framework.Configuration.ListSection.DefaultElements"/>
            </summary>
            <param name="configurationContext">The <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/> to set.</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.DaysOfWeekParameter">
            <summary>
            Represents a DaysOfWeek configuration Parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DaysOfWeekParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DaysOfWeekParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DaysOfWeekParameter.ValueToString(NpSharp.Framework.DaysOfWeek)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.TimeParameter">
            <summary>
            Represents a Time configuration Parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeParameter.ValueToString(NpSharp.Framework.Time)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.TimeSpanParameter">
            <summary>
            Represents a TimeSpan configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeSpanParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeSpanParameter.StringToValue(System.String)">
            <summary>
            Convert a string value to TimeSpan
            </summary>
            <param name="s">string value</param>
            <returns>converted parameter value</returns>
        </member>
        <member name="T:NpSharp.Framework.Configuration.UriParameter">
            <summary>
            Represents an Uniform Resource Identifier (URI) parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.UriParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.UriParameter.StringToValue(System.String)">
            <summary>
            Convert a string value to Uri type
            </summary>
            <param name="s">string value</param>
            <returns>converted parameter value</returns>
        </member>
        <member name="T:NpSharp.Framework.DataPurge.DataPurgeAttribute">
            <summary>
            Attribute to declare plugins with entities that should be purged, as configured by DataRetention plugin
            </summary>
        </member>
        <member name="P:NpSharp.Framework.DataPurge.DataPurgeAttribute.Entity">
            <summary>
            Type of the Entity that will be purged
            </summary>
        </member>
        <member name="P:NpSharp.Framework.DataPurge.DataPurgeAttribute.Term">
            <summary>
            Indicates how long the data retention plugin will retain the data, according to configuration of each term
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DataPurge.DataPurgeAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.DataPurge.DataPurgeAttribute"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DataPurge.DataPurgeAttribute.#ctor(System.Type,NpSharp.Framework.DataPurge.Term)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.DataPurge.DataPurgeAttribute"/> with the provided <paramref name="entityType"/>.
            </summary>
            <param name="entityType"></param>
            <param name="term"></param>
        </member>
        <member name="M:NpSharp.Framework.DataPurge.DataPurgeAttribute.#ctor(NpSharp.Framework.DataPurge.Term)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.DataPurge.DataPurgeAttribute"/> for the whole plugin
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DataPurge.Term">
            <summary>
            Enum used to identify each different period to keep data
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DataPurge.Term.Short">
            <summary>
            Indicates that the database/entity will retain data as configured on Short-Term data retention
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DataPurge.Term.Mid">
            <summary>
            Indicates that the database/entity will retain data as configured on Mid-Term data retention
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DataPurge.Term.Long">
            <summary>
            Indicates that the database/entity will retain data as configured on Long-Term data retention
            </summary>
        </member>
        <member name="T:NpSharp.Framework.EventPublishing.EventContent">
            <summary>
            Defines the content of an event.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.EventPublishing.EventContent.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.EventPublishing.EventContent"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.EventContent.Description">
            <summary>
            Gets or sets the description of the event.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.EventContent.Details">
            <summary>
            Gets or sets the details of the event.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.EventContent.Tags">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> containing the tags related to this message.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.EventContent.Severity">
            <summary>
            The <see cref="T:NpSharp.Framework.EventPublishing.EventSeverity"/> of the event.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.EventContent.CustomData">
            <summary>
            Gets or sets a dynamic type for adding additional data to the event.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.EventPublishing.EventContent.AddTag(System.String)">
            <summary>
            Adds a new tag to the tags collection.
            </summary>
            <param name="tag">The tag value.</param>
            <returns>This <see cref="T:NpSharp.Framework.EventPublishing.EventContent"/> instance.</returns>
        </member>
        <member name="T:NpSharp.Framework.EventPublishing.EventSeverity">
            <summary>
            Defines the severity types an event can use.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.EventPublishing.EventSeverity.Information">
            <summary>
            Information severity.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.EventPublishing.EventSeverity.Warning">
            <summary>
            Warning severity.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.EventPublishing.EventSeverity.Critical">
            <summary>
            Critical severity.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.EventPublishing.IEventPublisher">
            <summary>
            Publishes NP# events on the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.EventPublishing.IEventPublisher.PublishEvent(NpSharp.Framework.EventPublishing.EventContent)">
            <summary>
            Publishes an instance of <see cref="T:NpSharp.Framework.EventPublishing.NpSharpEventMessage"/> on the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>.
            </summary>
            <param name="eventContent">An instance of <see cref="T:NpSharp.Framework.EventPublishing.EventContent"/> with the event contents.</param>
        </member>
        <member name="T:NpSharp.Framework.EventPublishing.NpSharpEventMessage">
            <summary>
            Defines a message that the Microkernel or plugins can 
            </summary>
        </member>
        <member name="F:NpSharp.Framework.EventPublishing.NpSharpEventMessage.DefaultTopic">
            <summary>
            The topic that will be used for publishing and subscribing for this message on the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.EventPublishing.NpSharpEventMessage.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.EventPublishing.NpSharpEventMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.NpSharpEventMessage.InstanceName">
            <summary>
            Gets or sets the name of the instance where this message has been published.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.NpSharpEventMessage.PluginName">
            <summary>
            Gets or sets the name of the plugin where this message has been published.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.NpSharpEventMessage.Node">
            <summary>
            Gets or sets the node name where this message has been published.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.NpSharpEventMessage.LogicalName">
            <summary>
            Gets or sets the logical name where this message has been published.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.EventPublishing.NpSharpEventMessage.EventContent">
            <summary>
            An instance of <see cref="T:NpSharp.Framework.EventPublishing.EventContent"/> with the contents of the event.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Extensions.LazyExtensions">
            <summary>
            Extension methods for <see cref="T:System.Lazy`1"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Extensions.LazyExtensions.Initialize``1(System.Lazy{``0})">
            <summary>
            Initializes the provided <paramref name="lazy"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the provided <paramref name="lazy"/>.</typeparam>
            <param name="lazy">An instance of <see cref="T:System.Lazy`1"/>.</param>
            <returns>The current value contained in the provided <paramref name="lazy"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.Extensions.LazyExtensions.DisposeIfValueCreated``1(System.Lazy{``0})">
            <summary>
            Disposes the value contained in the provided <paramref name="lazy"/>
            if it has a created value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the provided <paramref name="lazy"/>.</typeparam>
            <param name="lazy">An instance of <see cref="T:System.Lazy`1"/>.</param>
        </member>
        <member name="T:NpSharp.Framework.Extensions.ObjectExtensions">
            <summary>
            Extension methods for <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            Extension method to syntax suggar object == null
            </summary>
            <param name="value">the <see cref="T:System.Object"/> to test.</param>
            <returns>
            true if the <paramref name="value" /> parameter is null.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Extensions.ObjectExtensions.IsNotNull(System.Object)">
            <summary>
            Extension method to syntax suggar object != null
            </summary>
            <param name="value">the <see cref="T:System.Object"/> to test.</param>
            <returns>
            true if the <paramref name="value" /> parameter is not null.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Extensions.StringExtensions">
            <summary>
            Extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Extensions.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Extension method to syntax sugar string.IsNullOrWhiteSpace(value).
            </summary>
            <param name="value">the <see cref="T:System.String"/> to test.</param>
            <returns>
            true if the <paramref name="value" /> parameter is null or 
            <see cref="F:System.String.Empty" />, or if <paramref name="value" /> 
            consists exclusively of white-space characters.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Extensions.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Extension method to syntax sugar !string.IsNullOrWhiteSpace(value).
            </summary>
            <param name="value">the <see cref="T:System.String"/> to test.</param>
            <returns>
            true if the <paramref name="value" /> parameter is anything different of null, 
            <see cref="F:System.String.Empty" />, or if <paramref name="value" /> 
            doesn't consists exclusively of white-space characters.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Functional.Option`1">
            <summary>
            Represents an optional value,
            which can be Some value, representing the presence of a value;
            or None, representing the absence of a value.
            </summary>
            <typeparam name="TValue">
            The type of the value encapsulated by this <see cref="T:NpSharp.Framework.Functional.Option`1"/>.
            </typeparam>
        </member>
        <member name="M:NpSharp.Framework.Functional.Option`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Functional.Option`1"/>
            with the provided <paramref name="value"/>.
            </summary>
            <param name="value">The value to be encapsulated.</param>
        </member>
        <member name="P:NpSharp.Framework.Functional.Option`1.HasValue">
            <summary>
            Gets whether this <see cref="T:NpSharp.Framework.Functional.Option`1"/> contains a value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Functional.Option`1.Value">
            <summary>
            Gets the <typeparamref name="TValue"/> contained by this <see cref="T:NpSharp.Framework.Functional.Option`1"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Functional.Option`1.op_Implicit(`0)~NpSharp.Framework.Functional.Option{`0}">
            <summary>
            Converts the provided <paramref name="value"/> to a <see cref="T:NpSharp.Framework.Functional.Option`1"/>.
            </summary>
            <param name="value">
            The value to be contained by the resulting <see cref="T:NpSharp.Framework.Functional.Option`1"/>.
            </param>
        </member>
        <member name="M:NpSharp.Framework.Functional.Option`1.TryGetValue(`0@)">
            <summary>
            Tries to get the value contained in this <see cref="T:NpSharp.Framework.Functional.Option`1"/>.
            </summary>
            <param name="value">
            When this method returns, contains the <typeparamref name="TValue"/> value
            contained by this <see cref="T:NpSharp.Framework.Functional.Option`1"/>, if it has a value;
            otherwise, the <c>default</c> value for the <typeparamref name="TValue"/> type.
            This parameter is passed uninitialized.
            </param>
            <returns>
            <c>true</c> if this <see cref="T:NpSharp.Framework.Functional.Option`1"/> contains a value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Functional.OptionExtensions">
            <summary>
            Contains extension methods for <see cref="T:NpSharp.Framework.Functional.Option`1"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Functional.OptionExtensions.GetValueOrDefault``1(NpSharp.Framework.Functional.Option{``0})">
            <summary>
            Retrieves the value of the provided <paramref name="option"/>,
            or the default value for <typeparamref name="TValue"/>.
            </summary>
            <typeparam name="TValue">
            The type of the value contained in the provided <paramref name="option"/>.
            </typeparam>
            <param name="option">
            The <see cref="T:NpSharp.Framework.Functional.Option`1"/> to have its value retrieved.
            </param>
            <returns>
            The value contained in the provided <paramref name="option"/>, if it has a value;
            otherwise, the default value for <typeparamref name="TValue"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Functional.OptionExtensions.GetValueOrDefault``1(NpSharp.Framework.Functional.Option{``0},``0)">
            <summary>
            Retrieves the value of the provided <paramref name="option"/>,
            or the provided <paramref name="default"/> value.
            </summary>
            <typeparam name="TValue">
            The type of the value contained in the provided <paramref name="option"/>.
            </typeparam>
            <param name="option">
            The <see cref="T:NpSharp.Framework.Functional.Option`1"/> to have its value retrieved.
            </param>
            <param name="default">
            The <typeparamref name="TValue"/> to return
            if the provided <paramref name="option"/> does not contain a value.
            </param>
            <returns>
            The value contained in the provided <paramref name="option"/>, if it has a value;
            otherwise, the provided <paramref name="default"/> value.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Functional.OptionExtensions.GetValueOrDefault``2(NpSharp.Framework.Functional.Option{``0},``1)">
            <summary>
            Retrieves the value of the provided <paramref name="option"/>,
            or the provided <paramref name="default"/> value.
            </summary>
            <typeparam name="TValue">
            The type of the value contained in the provided <paramref name="option"/>.
            </typeparam>
            <typeparam name="TTarget">
            The type of the <paramref name="default"/> value.
            </typeparam>
            <param name="option">
            The <see cref="T:NpSharp.Framework.Functional.Option`1"/> to have its value retrieved.
            </param>
            <param name="default">
            The <typeparamref name="TTarget"/> to return
            if the provided <paramref name="option"/> does not contain a value.
            </param>
            <returns>
            The value contained in the provided <paramref name="option"/>, if it has a value;
            otherwise, the provided <paramref name="default"/> value.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.DataPurge.DataPurgeMessage">
            <summary>
            Message to trigger the data purge cleanup routine
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.DataPurge.DataPurgeMessage.DefaultTopic">
            <summary>
            Default topic for this <see cref="T:NpSharp.Framework.InternalServices.DataPurge.DataPurgeMessage"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataPurge.DataPurgeMessage.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.DataPurge.DataPurgeMessage"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.DataPurge.IDataPurge">
            <summary>
            Interface for data purge internal service
            This internal service is intented to be used only by DataRetention plugin.
            The DataRetention plugin contains all logic and configuration for databases purge
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataPurge.IDataPurge.Delete(System.String,System.TimeSpan,System.String)">
            <summary>
            Deletes documents older than the value defined by <paramref name="periodToKeep"/>
            on the collection specified by <paramref name="collectionName"/> 
            or the full database of <paramref name="pluginName"/> if <paramref name="collectionName"/> is null or emtpy.
            <br/>
            Deletes also data from archived documents.
            </summary>
            <param name="pluginName">The short name of the plugin we want to delete documents from</param>
            <param name="periodToKeep">The period of data to keep</param>
            <param name="collectionName">Optional. The collection name to delete documents from. If null all collections on the database will be considered</param>
            <returns>The total number of documents deleted</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataPurge.IDataPurge.Archive(System.String,System.TimeSpan,System.String)">
            <summary>
            Archives documents older than the value defined by <paramref name="periodToKeep"/>
            on the collection specified by <paramref name="collectionName"/> 
            or the full database of <paramref name="pluginName"/> if <paramref name="collectionName"/> is null or emtpy.
            </summary>
            <param name="pluginName">The short name of the plugin we want to archive documents</param>
            <param name="periodToKeep">The period of data to keep</param>
            <param name="collectionName">Optional. The collection name to archive documents. If null all collections on the database will be considered</param>
            <returns>The total number of documents deleted</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Debounce.IDebouncer">
            <summary>
            Provides an internal service that help us to create debounced calls
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Debounce.IDebouncer.Debounce(System.Action,System.Int32)">
            <summary>
            Creates a debounced <see cref="T:System.Action"/>.
            </summary>
            <param name="action">
            An instance of an <see cref="T:System.Action"/> to be debounced
            </param>.
            <param name="milliseconds">
            The interval debounce time in milliseconds.
            </param>.
            <returns>
            An instance of <see cref="T:System.Action"/> containing the <paramref name="action"/> debounced.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Debounce.IDebouncer.Debounce``1(System.Action{System.Collections.Generic.ISet{``0}},System.Int32)">
            <summary>
            Creates a debounced <see cref="T:System.Action`1"/>.
            </summary>
            <param name="action">
            An instance of an <see cref="T:System.Action`1"/> of an <see cref="T:System.Collections.Generic.ISet`1"/> to be debounced
            </param>.
            <param name="milliseconds">
            The interval debounce time in milliseconds.
            </param>.
            <returns>
            An instance of <see cref="T:System.Action`1"/> containing the <paramref name="action"/> debounced.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.IFailoverService">
            <summary>
            Provides operations regarding failover management.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.Failover.IFailoverService.Promoting">
            <summary>
            Occurs immediately after when the current NP# instance is promoted.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.Failover.IFailoverService.Promoted">
            <summary>
            Occurs immediately after when the current NP# instance is promoted.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.Failover.IFailoverService.Demoting">
            <summary>
            Occurs immediately after when the current NP# instance is promoted.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.Failover.IFailoverService.Demoted">
            <summary>
            Occurs immediately after when the current NP# instance is demoted.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.Failover.IFailoverService.PromotedInstanceChanged">
            <summary>
            Occurs when the current promoted NP# instance has changed.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.IFailoverService.IsPromoted">
            <summary>
            Gets if the current instance is promoted.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.IFailoverService.IsPromoting">
            <summary>
            Gets if the current instance is being promoted.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.IFailoverService.IsManualManagementEnabled">
            <summary>
            Gets whether the manual failover management of this instance is enabled 
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.IFailoverService.CurrentPromotedInstance">
            <summary>
            Gets the current <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> in the network.
            If there is no current promoted instance, it returns <c>null</c>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.IFailoverService.Promote">
            <summary>
            Promotes the local instance plugins to begin work
            <returns>an instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromoteResponse"/> with information about the promotion</returns>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.IFailoverService.Demote">
            <summary>
            Demotes the local instance plugins that are non-infrastructure and the ones not marked as run when demoted
            <returns>an instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.DemoteResponse"/> with information about the demotion</returns>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.IFailoverService.RegisterMainInstance(System.String)">
            <summary>
            Registers the remote instance name that this instance will serve as failover
            </summary>
            <param name="instanceName">the name of the main instance</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.IFailoverService.EnableManualManagement">
            <summary>
            Disables the native failover management of the NpSharp Framework
            </summary>
            <remarks>
            Only use this API when an external application or plugin will take care about the way an instance should be promoted.
            </remarks>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs">
            <summary>
            Contains the data associated to an NP# instance failover demotion.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs.InstanceName">
            <summary>
            Gets or sets the name of the demoted instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs.DemotedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the demoting has finished.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs.op_Implicit(NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage)~NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs">
            <summary>
            Converts the provided <paramref name="message"/> to a <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs"/>.
            </summary>
            <param name="message">An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage"/> to be converted.</param>
            <returns>The equivalent instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedEventArgs"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage">
            <summary>
            Represents a message indicating that an instance has been demoted
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage.DefaultTopic">
            <summary>
            The Default Topic of this <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage"/>
            </summary>
            <param name="instanceName">the name of the demoted instance </param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage.InstanceName">
            <summary>
            Gets or sets the name of the demoted instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotedMessage.DemotedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the demoting has finished
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs">
            <summary>
            Contains the data associated to an NP# instance being demoted.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs.InstanceName">
            <summary>
            Gets or sets the name of the instance being demoted.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs.DemotingStartedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the demoting has started.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs.op_Implicit(NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage)~NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs">
            <summary>
            Converts the provided <paramref name="message"/> to a <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs"/>.
            </summary>
            <param name="message">An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage"/> to be converted.</param>
            <returns>The equivalent instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingEventArgs"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs">
            <summary>
            Contains the data associated to an NP# instance failover promotion.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs.InstanceName">
            <summary>
            Gets or sets the name of the promoted instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs.PromotedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the promote has finished.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs.PromoteResponse">
            <summary>
            The <see cref="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs.PromoteResponse"/> with information about the promotion.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs.op_Implicit(NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage)~NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs">
            <summary>
            Converts the provided <paramref name="message"/> to a <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs"/>.
            </summary>
            <param name="message">An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage"/> to be converted.</param>
            <returns>The equivalent instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedEventArgs"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs">
            <summary>
            Contains the data associated to an NP# instance being promoted.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs.InstanceName">
            <summary>
            Gets or sets the name of the instance being promoted.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs.PromotingStartedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the promoting has started.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs.op_Implicit(NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage)~NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs">
            <summary>
            Converts the provided <paramref name="message"/> to a <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs"/>.
            </summary>
            <param name="message">An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage"/> to be converted.</param>
            <returns>The equivalent instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingEventArgs"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage">
            <summary>
            Represents a message indicating that an instance is being promoted
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage.DefaultTopic">
            <summary>
            The Default Topic of this <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage"/>
            </summary>
            <param name="instanceName">the name of the instance being promoted </param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage.InstanceName">
            <summary>
            Gets or sets the name of the instance being promoted
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotingMessage.PromotingStartedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the promoting has started
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage">
            <summary>
            Represents a message indicating that an instance has been promoted
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.DefaultTopic">
            <summary>
            The Default Topic of this <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.#ctor(System.String,NpSharp.Framework.InternalServices.Failover.PromoteResponse)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage"/>
            </summary>
            <param name="instanceName">the name of the promoted instance</param>
            <param name="response">the <see cref="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.PromoteResponse"/> with information about the promotion</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.InstanceName">
            <summary>
            Gets or sets the name of the promoted instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.PromotedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the promote has finished
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.PromoteResponse">
            <summary>
            The <see cref="P:NpSharp.Framework.InternalServices.Failover.InstancePromotedMessage.PromoteResponse"/> with information about the promotion
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage">
            <summary>
            Represents a message indicating that an instance is being demoted
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage.DefaultTopic">
            <summary>
            The Default Topic of this <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage"/>
            </summary>
            <param name="instanceName">the name of the instance being demoted </param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage.InstanceName">
            <summary>
            Gets or sets the name of the instance being demoted
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.InstanceDemotingMessage.DemotingStartedAt">
            <summary>
            The <see cref="T:System.DateTime"/> in which the demoting has started
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance">
            <summary>
            Contains details about a promoted NP# instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromotedInstance.IsLocal">
            <summary>
            Gets or sets whether the NP# instance is the local instance or not.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromotedInstance.InstanceName">
            <summary>
            Gets or sets the NP# instance name.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromotedInstance.BaseAddress">
            <summary>
            Gets or sets the HTTP base address of the NP# instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromotedInstance.Equals(NpSharp.Framework.InternalServices.Failover.PromotedInstance)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromotedInstance.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromotedInstance.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromotedInstance.op_Equality(NpSharp.Framework.InternalServices.Failover.PromotedInstance,NpSharp.Framework.InternalServices.Failover.PromotedInstance)">
            <summary>
            Compares two instances of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> for equality.
            </summary>
            <param name="left">
            An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> to be compared to <paramref name="right"/>.
            </param>
            <param name="right">
            An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> to be compared to <paramref name="left"/>.
            </param>
            <returns><c>true</c> if the two instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromotedInstance.op_Inequality(NpSharp.Framework.InternalServices.Failover.PromotedInstance,NpSharp.Framework.InternalServices.Failover.PromotedInstance)">
            <summary>
            Compares two instances of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> for inequality.
            </summary>
            <param name="left">
            An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> to be compared to <paramref name="right"/>.
            </param>
            <param name="right">
            An instance of <see cref="T:NpSharp.Framework.InternalServices.Failover.PromotedInstance"/> to be compared to <paramref name="left"/>.
            </param>
            <returns><c>true</c> if the two instances are different; otherwise, false.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.PromotedInstanceChangedEventArgs">
            <summary>
            Contains the data associated to a change to the current NP# promoted instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromotedInstanceChangedEventArgs.CurrentPromotedInstance">
            <summary>
            Gets or sets the current promoted instance data.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromotedInstanceChangedEventArgs.PreviousPromotedInstance">
            <summary>
            Gets or sets the previous promoted instance data.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.PromoteResponse">
            <summary>
            Provides information about the result of an instance promotion tentative
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromoteResponse.Success">
            <summary>
            Gets or sets a flag indicating if the instance promotion occurred successfully
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.PromoteResponse.Message">
            <summary>
            Gets or sets a message about what occurred during the promotion
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromoteResponse.CreateSuccessResponse(System.String)">
            <summary>
            Creates a new <see cref="T:NpSharp.Framework.InternalServices.Failover.PromoteResponse"/> with a success status
            </summary>
            <param name="message">a message indicating what happened during the promotion</param>
            <returns>a successfull <see cref="T:NpSharp.Framework.InternalServices.Failover.PromoteResponse"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.PromoteResponse.CreateFailureResponse(System.String)">
            <summary>
            Creates a new <see cref="T:NpSharp.Framework.InternalServices.Failover.PromoteResponse"/> with a failure status
            </summary>
            <param name="message">a message indicating what happened during the promotion</param>
            <returns>a failed <see cref="T:NpSharp.Framework.InternalServices.Failover.PromoteResponse"/></returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Failover.DemoteResponse">
            <summary>
            Provides information about the result of an instance demotion tentative
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.DemoteResponse.Success">
            <summary>
            Gets or sets a flag indicating if the instance demotion occurred successfully
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Failover.DemoteResponse.Message">
            <summary>
            Gets or sets a message about what occurred during the demotion
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.DemoteResponse.CreateSuccessResponse(System.String)">
            <summary>
            Creates a new <see cref="T:NpSharp.Framework.InternalServices.Failover.DemoteResponse"/> with a success status
            </summary>
            <param name="message">a message indicating what happened during the demotion</param>
            <returns>a successfull <see cref="T:NpSharp.Framework.InternalServices.Failover.DemoteResponse"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Failover.DemoteResponse.CreateFailureResponse(System.String)">
            <summary>
            Creates a new <see cref="T:NpSharp.Framework.InternalServices.Failover.DemoteResponse"/> with a failure status
            </summary>
            <param name="message">a message indicating what happened during the demotion</param>
            <returns>a failed <see cref="T:NpSharp.Framework.InternalServices.Failover.DemoteResponse"/></returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IFileSystemWatcher">
            <summary>
            Provides a testable wrap around the implementation of <see cref="T:System.IO.FileSystemWatcher"/>.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.IFileSystemWatcher.Error">
            <summary>
            Occurs when the instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>
            is unable to continue monitoring changes or when the internal buffer overflows.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.IFileSystemWatcher.Changed">
            <summary>
            Occurs when a file or directory in the specified Path is changed.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.IFileSystemWatcher.Created">
            <summary>
            Occurs when a file or directory in the specified path is created.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.IFileSystemWatcher.Deleted">
            <summary>
            Occurs when a file or directory in the specified path is deleted.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.IFileSystemWatcher.Renamed">
            <summary>
            Occurs when a file or directory in the specified path is renamed.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcher.EnableRaisingEvents">
            <summary>
            Enables all event notifications.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcher.DisableRaisingEvents">
            <summary>
            Disables all event notifications.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcher.SetFileFilter(System.String)">
            <summary>
            Sets a filter used to determine what files are monitored in a directory.
            </summary>
            <param name="filter">A <see cref="T:System.String"/> with the filter to be used.</param>
            <remarks>
            To watch changes in all files, set the Filter property to an empty string (""). 
            To watch a specific file, set the Filter property to the file name. 
            For example, to watch for changes in the file MyDoc.txt, set the Filter property to "MyDoc.txt". 
            You can also watch for changes in a certain type of file. For example, to watch for changes in any text files, set the Filter property to "*.txt". 
            Use of multiple filters such as "*.txt|*.doc" is not supported.
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcher.ClearFileFilter">
            <summary>
            Clears the file filter. All files will be monitored after the cleaning.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcher.SetNotificationFilter(System.IO.NotifyFilters)">
            <summary>
            Sets the type of changes to watch for.
            </summary>
            <param name="notifyFilters">The <see cref="T:System.IO.NotifyFilters"/> wanted.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcher.ShouldIncludeSubdirectories(System.Boolean)">
            <summary>
            Sets a value indicating whether subdirectories within the specified path should be monitored.
            </summary>
            <param name="include">A <see cref="T:System.Boolean"/> that when true, will make all subdirectories be monitored.</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IFileSystemWatcherFactory">
            <summary>
            Implements the factory pattern for creation of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcherFactory.CreateNew">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.
            </summary>
            <returns>An instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcherFactory.CreateNew(System.String)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.
            </summary>
            <param name="directoryPath">The directory to monitor.</param>
            <returns>An instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IFileSystemWatcherFactory.CreateNew(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.
            </summary>
            <param name="directoryPath">The directory to monitor.</param>
            <param name="filter">The file (ex. filename.txt) or the type of files (ex. *.txt) to watch.</param>
            <returns>An instance of <see cref="T:NpSharp.Framework.InternalServices.IFileSystemWatcher"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPluginController">
            <summary>
            Provides operations to be performed on plugins 
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.Start(System.Guid)">
            <summary>
            Starts an instance of a plugin.
            </summary>
            <param name="pluginId">the id of the plugin to be started</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.Start(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Starts an instance of a plugin.
            </summary>
            <param name="pluginShortName">The short name of the plugin.</param>
            <param name="nodeName">(optional) The name of the node in which the plugin is inserted.</param>
            <param name="logicalName">(optional) The name of the logical name in which the plugin is inserted.</param>
            <param name="wait">(optional) When true, waits for the plugin to start.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.Stop(System.Guid)">
            <summary>
            Stops an instance of a plugin.
            </summary>
            <param name="pluginId">the id of the plugin to be stopped</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.Stop(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Stops an instance of a plugin.
            </summary>
            <param name="pluginShortName">The short name of the plugin.</param>
            <param name="nodeName">(optional) The name of the node in which the plugin is inserted.</param>
            <param name="logicalName">(optional) The name of the logical name in which the plugin is inserted.</param>
            <param name="wait">(optional) When true, waits for the plugin to stop.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.Restart(System.Guid)">
            <summary>
            Restarts an instance of a plugin.
            </summary>
            <param name="pluginId">the id of the plugin to be restarted</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.Restart(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Restarts an instance of a plugin.
            </summary>
            <param name="pluginShortName">The short name of the plugin.</param>
            <param name="nodeName">(optional) The name of the node in which the plugin is inserted.</param>
            <param name="logicalName">(optional) The name of the logical name in which the plugin is inserted.</param>
            <param name="wait">(optional) When true, waits for the plugin to restarts.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.MoveToQuarantine(System.Guid)">
            <summary>
            Moves the plugin instance identified by the provided <paramref name="pluginId"/> to quarantine.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.RemoveFromQuarantine(System.Guid)">
            <summary>
            Moves the plugin instance identified by the provided <paramref name="pluginId"/> from quarantine.
            </summary>
            <param name="pluginId"></param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginController.RequestAdditionalTime">
            <summary>
            Request additional time for the current pending operation.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IServiceEndpointFinder">
            <summary>
            Exposes methods for finding <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> endpoints.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IServiceEndpointFinder.TryGetEndpoint``1(System.String,System.String,System.String,System.Uri@)">
            <summary>
            Tries to get the endpoint for the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> whose endpoint has to be retrieved.</typeparam>
            <param name="instance">A constraint that indicates in which NP# instance this service has to be found on.</param>
            <param name="node">A constraint that indicates which logical node this service has to be found on.</param>
            <param name="logicalName">A constraint that indicates which logical name this service has to have.</param>
            <param name="uri">When this method returns, contains the <see cref="T:System.Uri"/> endpoint where the service is listening to, if the service was found; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the service was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IServiceRouting">
            <summary>
            Internal Service for selecting a specific node on the network to execute a service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IServiceRouting.OnNode``1(``0,System.String)">
            <summary>
            Selects a service on a specific node of the topology.
            </summary>
            <param name="service">The <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> type to execute.</param>
            <param name="node">The node name, as specified on topology.</param>
            <typeparam name="T">The <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> type.</typeparam>
            <exception cref="T:System.InvalidOperationException">Throws whenever the <typeparamref name="T"/> is not an <see cref="T:NpSharp.Framework.ServiceContracts.IService"/>.</exception>
            <returns>A proxy to the service on the provided <paramref name="node"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IServiceRouting.OnTopologyService``1(``0,System.String,System.String)">
            <summary>
            Selects a service on a specific node and service (by logical name) of the topology.
            </summary>
            <param name="service">The <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> type to execute.</param>
            <param name="node">The node name, as specified on topology.</param>
            <param name="logicalName">The logical name of the service, as specified on topology.</param>
            <typeparam name="T">The <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> type.</typeparam>
            <exception cref="T:System.InvalidOperationException">Throws whenever the <typeparamref name="T"/> service is not an <see cref="T:NpSharp.Framework.ServiceContracts.IService"/>.</exception>
            <returns>A proxy to the service on the provided <paramref name="node"/> and <paramref name="logicalName"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IServiceRouting.OnInstance``1(``0,System.String,System.String,System.String)">
            <summary>
            Selects a service on a specific remote instance, node and service (by logical name) of the topology
            </summary>
            <param name="service">The <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> type to execute.</param>
            <param name="instanceName">The instance name, as specified on topology.</param>
            <param name="node">The node name, as specified on topology.</param>
            <param name="logicalName">The logical name of the service, as specified on topology.</param>
            <typeparam name="T">The <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> type.</typeparam>
            <exception cref="T:System.InvalidOperationException">Throws whenever the <typeparamref name="T"/> service is not an <see cref="T:NpSharp.Framework.ServiceContracts.IService"/>.</exception>
            <returns>A proxy to the service on the instance whose name is the provided <paramref name="instanceName"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.ITraceSwitch">
            <summary>
            Service responsible for enabling/disabling tracing information for microkernel and plugins.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITraceSwitch.Enable">
            <summary>
            Enables tracing for the current NP# Microkernel.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITraceSwitch.Disable">
            <summary>
            Disables tracing for the current NP# Microkernel.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITraceSwitch.Enable(System.Guid)">
            <summary>
            Enables tracing for the Plugin Instance identified by provided <paramref name="pluginId"/>.
            </summary>
            <param name="pluginId">The <see cref="T:System.Guid"/> that identifies a plugin.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITraceSwitch.Disable(System.Guid)">
            <summary>
            Disables tracing for the Plugin Instance identified by provided <paramref name="pluginId"/>.
            </summary>
            <param name="pluginId">The <see cref="T:System.Guid"/> that identifies a plugin.</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.CaseInsensitiveAliasEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that compares <see cref="P:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Alias"/> in a case insensitive manner.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.CaseInsensitiveAliasEqualityComparer.Instance">
            <summary>
            Gets an instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.CaseInsensitiveAliasEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.CaseInsensitiveAliasEqualityComparer.Equals(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.CaseInsensitiveAliasEqualityComparer.GetHashCode(NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb">
            <summary>
            Interface of the Http Media DB internal service.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb.Path">
            <summary>
            The base path of this instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb.GetMediaUrl(System.String,System.String)">
            <summary>
            Gets the HTTP URL of a media.
            </summary>
            <param name="mediaName">The media name.</param>
            <param name="locale">The media locale.</param>
            <returns>The <see cref="T:System.Uri"/> that identifies the media.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb.GetUniqueMediaUrl(System.String,System.String)">
            <summary>
            Gets a unique identifier for the provided <paramref name="mediaName"/>
            and the provided <paramref name="locale"/>.
            </summary>
            <param name="mediaName">The name of the media.</param>
            <param name="locale">The locale of the media.</param>
            <returns>
            The resulting instance of <see cref="T:System.Uri"/> that identifies the media;
            or <c>null</c> if the provided <paramref name="mediaName"/>
            is <c>null</c> or consists exclusively of white spaces characters
            or the media could not be found on registered repositories.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IMediaBroker">
            <summary>
            Interface of the Media Brokerage Internal Service.
            </summary>
            <seealso cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaBroker.GetMediaInfo(System.String,System.String)">
            <summary>
            Returns a new instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> with the provided media file name and locale.
            </summary>
            <param name="mediaFileName">The media file name.</param>
            <param name="locale">The locale.</param>
            <returns>The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> instance.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb">
            <summary>
            Contains methods for adding media repositories
            and retrieving medias from added repositories.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.Pause">
            <summary>
            Temporarily releases all repositories being controlled by this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>.
            Every further access to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>
            may block or fail until it is <see cref="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.Resume">resumed</see>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.Resume">
            <summary>
            This tries to reacquire all repositories that were previously released by a <see cref="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.Pause">pause</see>.
            This operation may resume pending operations of this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.AddMediaRepository(System.String,System.String)">
            <summary>
            Adds a new Media Repository to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance.
            </summary>
            <param name="path">
            The File System Path to this Media Repository.
            </param>
            <param name="locale">
            A string that represents a locale of this Media Repository (null or empty for no locale).
            </param>
            <returns>Returns true if the repository has been added; otherwise, false.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadMediaAsStream(System.String,System.String)">
            <summary>
            Reads a media from this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance as a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="mediaFileName">The filename of the media.</param>
            <param name="locale">A string that represents the locale of the media (null or empty for no locale).</param>
            <returns>The media stream, or null if not found.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadMedia(System.String,System.String)">
            <summary>
            Reads a <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/> from this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance.
            </summary>
            <param name="mediaFileName">The filename of the media.</param>
            <param name="locale">A string that represents the locale of the media (null or empty for no locale).</param>
            <returns>The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/> if it is present into this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>; otherwise, null.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadTag(System.String,System.String)">
            <summary>
            Reads a tag from this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance.
            </summary>
            <param name="mediaFileName">The filename of the media.</param>
            <param name="locale">A string that represents the locale of the media (null or empty for no locale).</param>
            <returns>
            A <see cref="T:System.String"/> that represents the tag for the media if it
            is present into this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>; otherwise, null.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable">
            <summary>
            Interface of Media Alias Table internal service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.SetMediaAlias(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,System.String)">
            <summary>
            Associates a <see cref="T:System.String"/> that represents a media file name with the provided <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
            <param name="mediaAlias">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.</param>
            <param name="mediaFileName">The media file name.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.SetMediaAlias(System.Collections.Generic.IDictionary{NpSharp.Framework.InternalServices.MediaDb.MediaAlias,System.String})">
            <summary>
            Associates a <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and <see cref="T:System.String"/> thar represents a media file name.
            </summary>
            <param name="aliases">The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.GetMediaFileName(NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <summary>
            Gets the media file name associated with the provided <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
            <param name="mediaAlias">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.</param>
            <returns>The associated media file name.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.GetMediaFileNames(System.Collections.Generic.IEnumerable{NpSharp.Framework.InternalServices.MediaDb.MediaAlias})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and media file name using the provided <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
            <param name="aliases">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and media file name.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.GetAllMediaFileNames">
            <summary>
            Gets all associations between <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>es and media file name.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and media file name.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.Media">
            <summary>
            Contains information related to a specific media served from the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>.
            </summary>
            <seealso cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.Media.#ctor(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.
            </summary>
            <param name="mimeType">The MIME type of the media.</param>
            <param name="size">The length of the media in bytes.</param>
            <param name="mediaStream">The content <see cref="T:System.IO.Stream"/> of the media.</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.Media.MimeType">
            <summary>
            Gets the MIME type of this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.Media.Size">
            <summary>
            Gets the length in bytes of this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.Media.MediaStream">
            <summary>
            Gets the content <see cref="T:System.IO.Stream"/> of this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.Media.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias">
            <summary>
            Represents a localized media alias.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>
            with the given <paramref name="locale"/> and <paramref name="alias"/>.
            </summary>
            <param name="locale">The media locale.</param>
            <param name="alias">The media alias.</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Alias">
            <summary>
            Gets the alias of this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Locale">
            <summary>
            Gets the optional media alias locale (empty or null for "no locale") of this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Equals(NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.ToString">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.op_Equality(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <summary>
            Tests whether two specified <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> are equivalent.
            </summary>
            <param name="left">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the right of the equality operator.</param>
            <returns><c>true</c> if the two <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.op_Inequality(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <summary>
            Tests whether two specified <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> are different.
            </summary>
            <param name="left">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the right of the inequality operator.</param>
            <returns><c>true</c> if the two <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> are different; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo">
            <summary>
            Provides easy access to <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> and <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/> to plugins.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaName">
            <summary>
            This <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> media name.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaLocale">
            <summary>
            This <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> media locale.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.#ctor(System.String,System.String,NpSharp.Framework.InternalServices.MediaDb.IMediaDb,NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb)">
            <summary>
            Intializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> with the provided <see cref="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaName"/>, <see cref="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaLocale"/> and an instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> and <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/>.
            </summary>
            <param name="mediaName">The media name.</param>
            <param name="locale">The media locale.</param>
            <param name="mediaDb">The instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>.</param>
            <param name="httpMediaDb">The instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.ReadMedia">
            <summary>
            Reads the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/> associated to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
            </summary>
            <returns>An instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.</returns>
            <seealso cref="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadMedia(System.String,System.String)"/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.ReadMediaAsStream">
            <summary>
            Reads the <see cref="T:System.IO.Stream"/> associated to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
            </summary>
            <returns>The Media <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.GetMediaUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> associated to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
            </summary>
            <returns>The Media <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PluginMonitorInfo">
            <summary>
            Holds monitoring information about a Plugin Instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Id">
            <summary>
            Gets or sets the <see cref="T:System.Guid"/> that identifies
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Instance">
            <summary>
            Gets or sets the name of the Microkernel running
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Node">
            <summary>
            Gets or sets the Node Name where
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/> is running on.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.ServiceLogicalName">
            <summary>
            Gets or sets the service logical name
            of the plugin instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Service">
            <summary>
            Gets or sets the Service Name of
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.ShortName">
            <summary>
            Gets or sets the Plugin Name of
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Version">
            <summary>
            Gets or sets the Plugin <see cref="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Version"/> of
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.State">
            <summary>
            Gets or sets the State of
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.WebHostPath">
            <summary>
            Gets or sets the Web Host path being used by
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Memory">
            <summary>
            Gets or sets the amount of memory being used by
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Processor">
            <summary>
            Gets or sets the CPU load being used by
            the Plugin Instance associated to this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.IsInQuarantine">
            <summary>
            Gets or sets whether this <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/> is in quarantine.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Alias">
            <summary>
            Gets or sets the plugin alias, a business friendly name
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Processes.IProcessesManager">
            <summary>
            Exposes access to processes created by the NP# Framework.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Processes.IProcessesManager.MicrokernelProcessId">
            <summary>
            Gets the unique identifier for the process running the NP# Microkernel.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Processes.IProcessesManager.DatabaseServerProcessId">
            <summary>
            Gets the unique identifier for the process running the Database Server.
            </summary>
            <remarks>
            If the process is restarting, it will retrieve -1.
            </remarks>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Processes.IProcessesManager.PluginHostProcesses">
            <summary>
            Gets a sequence that contains all running <see cref="T:NpSharp.Framework.InternalServices.Processes.PluginHostProcess"/>es.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Processes.IProcessesManager.RestartProcess(System.Int32)">
            <summary>
            Restarts a process based on the PID.
            </summary>
            <param name="processId">The id of the process to be restarted.</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Processes.PluginHostProcess">
            <summary>
            Holds information about a process hosting instances of <see cref="T:NpSharp.Framework.IPlugin"/>s.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Processes.PluginHostProcess.ProcessId">
            <summary>
            Gets the unique identifier for the process associated to this <see cref="T:NpSharp.Framework.InternalServices.Processes.PluginHostProcess"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Processes.PluginHostProcess.PluginInstances">
            <summary>
            Gets a sequence that contains all <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/> running in this <see cref="T:NpSharp.Framework.InternalServices.Processes.PluginHostProcess"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.AcknowledgmentTimeoutException">
            <summary>
            The <see cref="T:NpSharp.Framework.InternalServices.PubSub.MessageHubException"/> that is thrown when a published request
            did not receive an acknowledgment within the specified amount of time.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.AcknowledgmentTimeoutException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.AcknowledgmentTimeoutException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.AcknowledgmentTimeoutException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.AcknowledgmentTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub">
            <summary>
            Exposes methods for making requests and provide responses on top of a Publish / Subscribe pattern.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub.PublishRequestAsync``1(NpSharp.Framework.InternalServices.PubSub.RequestBase)">
            <summary>
            Publishes the provided <paramref name="request"/> as a Request.
            </summary>
            <typeparam name="TResponse">The expected response type.</typeparam>
            <param name="request">An instance of <see cref="T:NpSharp.Framework.InternalServices.PubSub.RequestBase"/> to publish.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> of <typeparamref name="TResponse"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub.PublishRequestAsync``1(NpSharp.Framework.InternalServices.PubSub.RequestBase,NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions)">
            <summary>
            Publishes the provided <paramref name="request"/> as a Request, using the provided <paramref name="options"/>.
            </summary>
            <typeparam name="TResponse">The expected response type.</typeparam>
            <param name="request">An instance of <see cref="T:NpSharp.Framework.InternalServices.PubSub.RequestBase"/> to publish.</param>
            <param name="options">An instance of <see cref="T:NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions"/> to use for this request.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> of <typeparamref name="TResponse"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub.SubscribeToRequests``2(System.String,System.String,System.Func{``0,``1})">
            <summary>
            Subscribes to handle requests made to the provided <paramref name="topic"/> and <paramref name="api"/>,
            using the provided <paramref name="callback"/>.
            </summary>
            <typeparam name="TRequest">
            The type of requests handled by the provided <paramref name="callback"/>.
            </typeparam>
            <typeparam name="TResponse">
            The type of responses generated by the provided <paramref name="callback"/>.
            </typeparam>
            <param name="topic">The topic to subscribe to.</param>
            <param name="api">The API the resulting subscription will handle.</param>
            <param name="callback">A <see cref="T:System.Func`2"/> that will handle incoming requests.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub.SubscribeToRequests``2(System.String,System.String,System.String,System.Func{``0,``1})">
            <summary>
            Subscribes to handle requests made to the provided <paramref name="topic"/> and <paramref name="api"/>,
            using the provided <paramref name="filter"/> and <paramref name="callback"/>.
            </summary>
            <typeparam name="TRequest">
            The type of requests handled by the provided <paramref name="callback"/>.
            </typeparam>
            <typeparam name="TResponse">
            The type of responses generated by the provided <paramref name="callback"/>.
            </typeparam>
            <param name="topic">The topic to subscribe to.</param>
            <param name="api">The API the resulting subscription will handle.</param>
            <param name="filter">A json string filter used to filter out incoming requests.</param>
            <param name="callback">A <see cref="T:System.Func`2"/> that will handle incoming requests.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub.SubscribeToRequests``2(System.String,System.String,System.Object,System.Func{``0,``1})">
            <summary>
            Subscribes to handle requests made to the provided <paramref name="topic"/> and <paramref name="api"/>,
            using the provided <paramref name="filter"/> and <paramref name="callback"/>.
            </summary>
            <typeparam name="TRequest">
            The type of requests handled by the provided <paramref name="callback"/>.
            </typeparam>
            <typeparam name="TResponse">
            The type of responses generated by the provided <paramref name="callback"/>.
            </typeparam>
            <param name="topic">The topic to subscribe to.</param>
            <param name="api">The API the resulting subscription will handle.</param>
            <param name="filter">A object filter used to filter out incoming requests.</param>
            <param name="callback">A <see cref="T:System.Func`2"/> that will handle incoming requests.</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.MessageHubException">
            <summary>
            Base class for Message Hub exceptions.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageHubException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageHubException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageHubException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageHubException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.NegativeAcknowledgmentException">
            <summary>
            The <see cref="T:NpSharp.Framework.InternalServices.PubSub.MessageHubException"/> that is thrown when a published request
            received a negative acknowledgment.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NegativeAcknowledgmentException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NegativeAcknowledgmentException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NegativeAcknowledgmentException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NegativeAcknowledgmentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.NoSubscribersException">
            <summary>
            The <see cref="T:NpSharp.Framework.InternalServices.PubSub.MessageHubException"/> that is thrown when a published request
            was published to zero subscribers.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NoSubscribersException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NoSubscribersException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NoSubscribersException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.NoSubscribersException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions">
            <summary>
            Encapsulates the options to use for publishing requests.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions"/> with its default values.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions.ResponseTimeout">
            <summary>
            Gets or sets the maximum amount of time to wait for a Response.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.PublishRequestOptions.AcknowledgmentTimeout">
            <summary>
            Gets or sets the maximum amount of time to wait for an Acknowledgment.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.RequestBase">
            <summary>
            Base abstract class for requests sent via the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IRequestResponseMessageHub"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.RequestBase.#ctor(System.String,System.String)">
            <summary>
            Constructs a request with the given topic and api
            </summary>
            <param name="topic">The request topic</param>
            <param name="api">The request api</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.RequestBase.Api">
            <summary>
            The intended API that this request is targeting.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.RequestTimeoutException">
            <summary>
            The <see cref="T:NpSharp.Framework.InternalServices.PubSub.MessageHubException"/> that is thrown when a published request
            did not receive an response within the specified amount of time.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.RequestTimeoutException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.RequestTimeoutException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.RequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub">
            <summary>
            Message hub internal service for plugins.
            Responsible for implementing the publish-subscribe messaging pattern.
            </summary>
            <see href="http://msdn.microsoft.com/en-us/library/ff649664.aspx"/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.PublishAsync(System.String)">
            <summary>
            Asynchronously publishes a JSON-formatted message
            </summary>
            <param name="jsonMessage">JSON-formatter message (which MUST include the mandatory 'Topic' property)</param>
            <returns>number of subscribers that received this message</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.PublishAsync(NpSharp.Framework.InternalServices.PubSub.MessageBase)">
            <summary>
            Asynchronously publishes a message
            </summary>
            <param name="message">the message</param>
            <returns>number of subscribers that received this message</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribes for receiving messages from the given topic
            </summary>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="callback">callback message handler</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Subscribe``1(System.String,System.String,System.Action{``0})">
            <summary>
            Subscribes for receiving messages from the given topic, using the given filters
            </summary>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="jsonFilters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Subscribe``1(System.String,System.Object,System.Action{``0})">
            <summary>
            Subscribes for receiving messages from the given topic, using the given filters
            </summary>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="filters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.SubscribeDurable``1(System.String,System.String,System.Action{``0},NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions)">
            <summary>
            Creates a durable subscription for receiving messages from the given topic, using the given filters.
            Durable subscriptions can guarantee message delivery even in cases of failures because the messages are stored in persistent queues.
            </summary>
            <remarks>Calling this method twice has not effect other than changing the callback and filters to be used from now on (the queue will not be emptied)</remarks>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="jsonFilters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
            <param name="options">durable subscription options (pass null to use the default values)</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.SubscribeDurable``1(System.String,System.Object,System.Action{``0},NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions)">
            <summary>
            Creates a durable subscription for receiving messages from the given topic, using the given filters.
            Durable subscriptions can guarantee message delivery even in cases of failures because the messages are stored in persistent queues.
            </summary>
            <remarks>Calling this method twice has not effect other than changing the callback and filters to be used from now on (the queue will not be emptied)</remarks>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="filters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
            <param name="options">durable subscription options (pass null to use the default values)</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from the given topic.
            </summary>
            <remarks>If this is a durable subscription, the subscription will be removed and as well as all queued messages</remarks>
            <param name="topic">the topic to unsubscribe from</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.UnsubscribeAll">
            <summary>
            Unsubscribes from all topics.
            </summary>
            <remarks>If you have any durable subscriptions, the subscriptions will be removed and as well as all queued messages</remarks>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.MessageBase">
            <summary>
            Base abstract class for messages sent via the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.MessageBase.Topic">
            <summary>
            Message topic - this field is MANDATORY for sending out messages
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageBase.#ctor(System.String)">
            <summary>
            Constructs a message with the given topic
            </summary>
            <param name="topic"></param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions">
            <summary>
            Defines options for durable subscriptions
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxQueuedMessages">
            <summary>
            Maximum number of persisted queued messages - if this number if exceeded, old messages are discarded.
            The default value is 500.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxFailedMessages">
            <summary>
            Maximum number of persisted failed queued messages - if this number if exceeded, old messages are discarded.
            The default value is 50.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxMessageAge">
            <summary>
            Maximum age of queued messages - messages older than this are discarded.
            The default is one week.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxSubscriptionAge">
            <summary>
            Gets the maximum age of the durable subscription associated to this <see cref="T:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.#ctor">
            <summary>
            Initialize the default values
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.RemoteInstanceInfo">
            <summary>
            Holds information about a known remote instance
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.RemoteInstanceInfo.#ctor">
            <summary>
            Initialize new instance of <see cref="T:NpSharp.Framework.InternalServices.RemoteInstanceInfo"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemoteInstanceInfo.Name">
            <summary>
            Gets or sets the name of the remote instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemoteInstanceInfo.ProductVersion">
            <summary>
            Gets or sets the ProductVersion of the remote instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemoteInstanceInfo.LastContactUtc">
            <summary>
            Gets or sets the UTC timestamp of the last time we successfully communicated with this instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemoteInstanceInfo.HttpUri">
            <summary>
            Gets the most recent remote HTTP endpoint of this instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemoteInstanceInfo.Plugins">
            <summary>
            List of <see cref="T:NpSharp.Framework.InternalServices.RemotePluginInfo"/>s running on this instance
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.RemotePluginInfo">
            <summary>
            Holds information about a known remote plugin
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.ShortName">
            <summary>
            Gets or sets the plugin's short name.
            The short name is determined by the last part of the assembly file name, without extension.
            </summary>
            <example>
            For a plugin assembly file named <b>Company.Product.MyPlugin.dll</b>, the short name would be <b>MyPlugin</b>.
            </example>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.AssemblyFile">
            <summary>
            Gets or sets the file name of the DLL containing the plugin implementation.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.Version">
            <summary>
            Gets or sets the Plugin Version.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.NodeName">
            <summary>
            Gets or sets the name of the topological node containing this plugin (may be null for infrastruture plugins)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.WebHostPath">
            <summary>
            Gets or sets the Web Host path being used by the plugin.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.ServiceLogicalName">
            <summary>
            Gets or sets the logical name of the topological service containing this plugin (may be null)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RemotePluginInfo.Alias">
            <summary>
            Gets or sets the plugin alias, a business friendly name
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.RouteInfo">
            <summary>
            Holds information about a route between two NP# instances.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RouteInfo.From">
            <summary>
            The origin instance name.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.RouteInfo.To">
            <summary>
            The destination instance.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.ServiceEndpointFinderExtensions">
            <summary>
            Extension methods for <see cref="T:NpSharp.Framework.InternalServices.IServiceEndpointFinder"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ServiceEndpointFinderExtensions.TryGetEndpoint``1(NpSharp.Framework.InternalServices.IServiceEndpointFinder,System.Uri@)">
            <summary>
            Tries to get the endpoint for the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> whose endpoint has to be retrieved.</typeparam>
            <param name="serviceEndpointFinder">The <see cref="T:NpSharp.Framework.InternalServices.IServiceEndpointFinder"/> to be used to find the service.</param>
            <param name="uri">When this method returns, contains the <see cref="T:System.Uri"/> endpoint where the service is listening to, if the service was found; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the service was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ServiceEndpointFinderExtensions.TryGetEndpoint``1(NpSharp.Framework.InternalServices.IServiceEndpointFinder,System.String,System.Uri@)">
            <summary>
            Tries to get the endpoint for the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> whose endpoint has to be retrieved.</typeparam>
            <param name="serviceEndpointFinder">The <see cref="T:NpSharp.Framework.InternalServices.IServiceEndpointFinder"/> to be used to find the service.</param>
            <param name="node">A constraint that indicates which logical node this service has to be found on.</param>
            <param name="uri">When this method returns, contains the <see cref="T:System.Uri"/> endpoint where the service is listening to, if the service was found; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the service was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ServiceEndpointFinderExtensions.TryGetEndpoint``1(NpSharp.Framework.InternalServices.IServiceEndpointFinder,System.String,System.String,System.Uri@)">
            <summary>
            Tries to get the endpoint for the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> of type <typeparamref name="TService"/>.
            </summary>
            <typeparam name="TService">The type of the <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> whose endpoint has to be retrieved.</typeparam>
            <param name="serviceEndpointFinder">The <see cref="T:NpSharp.Framework.InternalServices.IServiceEndpointFinder"/> to be used to find the service.</param>
            <param name="node">A constraint that indicates which logical node this service has to be found on.</param>
            <param name="logicalName">A constraint that indicates which logical name this service has to have.</param>
            <param name="uri">When this method returns, contains the <see cref="T:System.Uri"/> endpoint where the service is listening to, if the service was found; otherwise, <c>null</c>.</param>
            <returns><c>true</c> if the service was found; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Area">
            <summary>
            Represents a topological area where a logical <see cref="T:NpSharp.Framework.InternalServices.Topology.Node"/> can execute
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Area.AreaTag">
            <summary>XName for the "Area" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Area.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.#ctor(System.String,NpSharp.Framework.InternalServices.Topology.Area)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.Area"/> class. 
            </summary>
            <param name="name">area name</param>
            <param name="parent">parent area (null if this is a root area)</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Area.Name">
            <summary>Get the name of this area</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Area.Parent">
            <summary>Get the parent area (null if this is a root area)</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Area.Children">
            <summary>Get the child areas</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Area.Nodes">
            <summary>Get the nodes defined on this area</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Area.IsRoot">
            <summary>Indicate if this area is a root area (has no parent)</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Area.IsLeaf">
            <summary>Indicate if this area is a leaf area (has no children)</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.Equals(NpSharp.Framework.InternalServices.Topology.Area)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.op_Equality(NpSharp.Framework.InternalServices.Topology.Area,NpSharp.Framework.InternalServices.Topology.Area)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.op_Inequality(NpSharp.Framework.InternalServices.Topology.Area,NpSharp.Framework.InternalServices.Topology.Area)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a topological area from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed area</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.FromXml(System.Xml.Linq.XElement,NpSharp.Framework.InternalServices.Topology.Area)">
            <summary>
            Parse a topological area from an XML element
            </summary>
            <param name="element">XML element</param>
            <param name="parent">parent area</param>
            <returns>parsed area</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Area.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Endpoint">
            <summary>
            Represents a topological <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/>
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.EndpointTag">
            <summary>XName for the "Endpoint" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.IdAttribute">
            <summary>XName for the "id" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.HardwareTypeAttribute">
            <summary>XName for the "hardwareType" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.DescriptionAttribute">
            <summary>XName for the "description" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.ParameterTag">
            <summary>XName for the "Parameter" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Endpoint.ValueAttribute">
            <summary>XName for the "value" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/> class. 
            </summary>
            <param name="id">Endpoint id</param>
            <param name="hardwareType">Endpoint hardware type</param>
            <param name="description">Endpoint description</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Endpoint.Id">
            <summary>
            Get the name of this <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Endpoint.HardwareType">
            <summary>
            Get the HardwareType of this <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Endpoint.Description">
            <summary>
            Gets the Description of this <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Endpoint.Parameters">
            <summary>
            Get the <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/> parameters
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Endpoint.UIs">
            <summary>Get the uis defined on this <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/></summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Endpoint.Peripherals">
            <summary>Get the nodes defined on this area</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.Equals(NpSharp.Framework.InternalServices.Topology.Endpoint)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.op_Equality(NpSharp.Framework.InternalServices.Topology.Endpoint,NpSharp.Framework.InternalServices.Topology.Endpoint)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.op_Inequality(NpSharp.Framework.InternalServices.Topology.Endpoint,NpSharp.Framework.InternalServices.Topology.Endpoint)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a topological Endpoint from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed <see cref="T:NpSharp.Framework.InternalServices.Topology.Endpoint"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Endpoint.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointCollection.EndpointCollectionTag">
            <summary>XName for the "Endpoint" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointCollection.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointCollection.ParameterTag">
            <summary>XName for the "Parameter" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointCollection.ValueAttribute">
            <summary>XName for the "value" XML attribute</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointCollection.Parameters">
            <summary>
            Get the endpoint parameters
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointCollection.Endpoints">
            <summary>
            Get the endpoints
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointCollection.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a topological EndpointCollection from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed <see cref="T:NpSharp.Framework.InternalServices.Topology.EndpointCollection"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointCollection.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral">
            <summary>
            Represents an Endpoint Peripheral element
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.EndpointPeripheralTag">
            <summary>XName for the "EndpointPeripheral" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.TypeAttribute">
            <summary>XName for the "type" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.NodeNameAttribute">
            <summary>XName for the "driver" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.TagsAttribute">
            <summary>XName for the "tags" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.ParameterTag">
            <summary>XName for the "Parameter" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.DriverAttribute">
            <summary>XName for the "driver" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.ValueAttribute">
            <summary>XName for the "value" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.LogicalNameAttribute">
            <summary>XName for the "logicalName" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Construct a new EndpointPeripheral element descriptor
            </summary>
            <param name="type">peripheral type</param>
            <param name="nodeName">peripheral nodeName</param>
            <param name="logicalName">optional peripheral logical name</param>
            <param name="driver">optional peripheral driver</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.Type">
            <summary>
            Get the EndpointPeripheral type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.NodeName">
            <summary>
            Get the EndpointPeripheral driver name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.LogicalName">
            <summary>
            Get the EndpointPeripheral logical name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.Driver">
            <summary>
            Get the EndpointPeripheral logical name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.Parameters">
            <summary>
            Get the EndpointPeripheral parameters
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a Peripheral element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed Peripheral element</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointUi.EndpointUiTag">
            <summary>XName for the "Endpoint" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointUi.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointUi.ParameterTag">
            <summary>XName for the "Parameter" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.EndpointUi.ValueAttribute">
            <summary>XName for the "value" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointUi.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a topological <see cref="T:NpSharp.Framework.InternalServices.Topology.EndpointUi"/> from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed <see cref="T:NpSharp.Framework.InternalServices.Topology.EndpointUi"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.EndpointUi.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.HardwareType">
            <summary>
            Represents a hardware type, to be referenced by a microkernel instance
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.HardwareType.HardwareTypeTag">
            <summary>XName for the "HardwareType" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.HardwareType.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.HardwareType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.HardwareType"/> class. 
            </summary>
            <param name="name">hardware type name</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.HardwareType.Name">
            <summary>
            Get the hardware type name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.HardwareType.Peripherals">
            <summary>
            Get the collection of peripherals
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.HardwareType.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a HardwareType element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed HardwareType element</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.HardwareType.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Instance">
            <summary>
            Represents a microkernel instance
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Instance.InstanceTag">
            <summary>XName for the "Instance" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Instance.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Instance.NodesAttribute">
            <summary>XName for the "nodes" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Instance.HardwareTypeAttribute">
            <summary>XName for the "hardwareType" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Instance.HostAttribute">
            <summary>XName for the "host" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Instance.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.Instance"/> class. 
            </summary>
            <param name="name">instance name</param>
            <param name="nodes">optional comma-separated list of logical nodes to run on this instance</param>
            <param name="hardwareType">optional hardware type for this instance</param>
            <param name="host">optional host adress for this instance</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Instance.Name">
            <summary>
            Get the hardware type name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Instance.HardwareType">
            <summary>
            Get the optional hardware type name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Instance.Nodes">
            <summary>
            Get the set of logical nodes on this instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Instance.Peripherals">
            <summary>
            Get the collection of peripherals
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Instance.Host">
            <summary>
            Get the optional host address
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Instance.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a Instance element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed Instance element</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Instance.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ITopology">
            <summary>
            Exposes access to Topology Data.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.Topology.ITopology.TopologyChanged">
            <summary>
            Event fired when any change happens in the topology.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ITopology.GetResolvedInstance">
            <summary>
            Gets the <see cref="T:NpSharp.Framework.InternalServices.Topology.ResolvedInstance"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ITopology.UpdateEndpointPeripherals(System.String,System.Collections.Generic.IEnumerable{NpSharp.Framework.InternalServices.Topology.EndpointPeripheral})">
            <summary>
            Updates the peripheral nodes inside of an Endpoint node of the Topology
            </summary>
            <param name="endpointId">The Id of the Enpoint that will have its peripheral nodes updated.</param>
            <param name="endpointPeripherals">The sequence of peripherals to replace the current peripherals.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ITopology.ResolveEndpoint(System.String,System.String)">
            <summary>
            Resolves an endpoint given its id and a hardware type id.
            </summary>
            <param name="endpointId">The endpoint Id to be resolved</param>
            <param name="hardwareTypeName">The hardware type to be considered when resolving the endpoint</param>
            <returns>An instance of <see cref="M:NpSharp.Framework.InternalServices.Topology.ITopology.ResolveEndpoint(System.String,System.String)"/></returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Node">
            <summary>
            Represents a logical node in the system topology
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Node.NodeTag">
            <summary>XName for the "Node" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Node.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Node.TypeAttribute">
            <summary>XName for the "type" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Node.AliasAttribute">
            <summary>XName for the "alias" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Node.RunWhenDemotedAttribute">
            <summary>XName for the "runWhenDemoted" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Node.ReplicateWhenFailoverAttribute">
            <summary>XName for the "replicateWhenFailover" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.#ctor(System.String,System.String,NpSharp.Framework.InternalServices.Topology.Area,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.Node"/> class. 
            </summary>
            <param name="name">node name</param>
            <param name="type">node type</param>
            <param name="area">optional topological area for this node</param>
            <param name="alias">optional node alias (friendly name)</param>
            <param name="shouldRunWhenDemoted"></param>
            <param name="shouldReplicateWhenFailover"></param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Node.Name">
            <summary>
            Get the node name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Node.Type">
            <summary>
            Get the node type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Node.Area">
            <summary>
            Get the topological area for this node
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Node.Alias">
            <summary>
            Get the optional node alias (friendly name)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Node.ShouldRunWhenDemoted">
            <summary>
            Indicates if a plugin should run even when the instance is working as demoted failover
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Node.ShouldReplicateWhenFailover">
            <summary>
            Indicates if a plugin should replicate its data when a master-failover relationship is detected
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.Equals(NpSharp.Framework.InternalServices.Topology.Node)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.op_Equality(NpSharp.Framework.InternalServices.Topology.Node,NpSharp.Framework.InternalServices.Topology.Node)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.op_Inequality(NpSharp.Framework.InternalServices.Topology.Node,NpSharp.Framework.InternalServices.Topology.Node)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.FromXml(System.Xml.Linq.XElement,NpSharp.Framework.InternalServices.Topology.Area)">
            <summary>
            Parse a microkernel node data from an XML element
            </summary>
            <param name="element">XML element</param>
            <param name="area">topological area for this node</param>
            <returns>Parsed Node</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Node.DisableFailover">
            <summary>
            Removes this <see cref="T:NpSharp.Framework.InternalServices.Topology.Node"/> from the failover scheme.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.NodeType">
            <summary>
            Represent a node type
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.NodeType.NodeTypeTag">
            <summary>XName for the "NodeType" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.NodeType.TypeAttribute">
            <summary>XName for the "type" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.NodeType"/> class. 
            </summary>
            <param name="type">node type</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.NodeType.Type">
            <summary>
            Get the type of this NodeType
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.NodeType.Services">
            <summary>
            Get the list of services of this NodeType
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.Equals(NpSharp.Framework.InternalServices.Topology.NodeType)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.op_Equality(NpSharp.Framework.InternalServices.Topology.NodeType,NpSharp.Framework.InternalServices.Topology.NodeType)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.op_Inequality(NpSharp.Framework.InternalServices.Topology.NodeType,NpSharp.Framework.InternalServices.Topology.NodeType)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a NodeType from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed NodeType</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.NodeType.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Peripheral">
            <summary>
            Represents a Peripheral element
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.PeripheralTag">
            <summary>XName for the "Peripheral" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.TypeAttribute">
            <summary>XName for the "type" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.DriverAttribute">
            <summary>XName for the "driver" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.TagsAttribute">
            <summary>XName for the "tags" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.ParameterTag">
            <summary>XName for the "Parameter" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.NameAttribute">
            <summary>XName for the "name" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.ValueAttribute">
            <summary>XName for the "value" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.LogicalNameAttribute">
            <summary>XName for the "logicalName" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.NodeNameAttribute">
            <summary>XName for the "nodeName" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Construct a new Peripheral element descriptor
            </summary>
            <param name="type">peripheral type</param>
            <param name="driver">peripheral driver</param>
            <param name="tags">optional comma-separated list of peripheral tags</param>
            <param name="logicalName">optional peripheral logical name</param>
            <param name="nodeName">optional peripheral node name</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.Type">
            <summary>
            Get the peripheral type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.Driver">
            <summary>
            Get the peripheral driver name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.LogicalName">
            <summary>
            Get the peripheral logical name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.NodeName">
            <summary>
            Get the peripheral node name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.Tags">
            <summary>
            Get the peripheral tags
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.Parameters">
            <summary>
            Get the peripheral parameters
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.HasTag(System.String)">
            <summary>
            Determine if this peripheral has the given tag
            </summary>
            <param name="tag">tag name</param>
            <returns>bool</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Peripheral.TypeTagsEqualityComparer">
            <summary>Equality compararer which compares the Peripheral type, logical name and tags only</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.TypeTagsEqualityComparer.Equals(NpSharp.Framework.InternalServices.Topology.Peripheral,NpSharp.Framework.InternalServices.Topology.Peripheral)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.TypeTagsEqualityComparer.GetHashCode(NpSharp.Framework.InternalServices.Topology.Peripheral)">
            <inheritdoc/>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Peripheral.TypeTagsComparerInstance">
            <summary>Equality compararer which compares the Peripheral type and tags only</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Peripheral.TypeTagsComparer">
            <summary>
            Equality compararer which compares the Peripheral type and tags only
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.Merge(NpSharp.Framework.InternalServices.Topology.Peripheral,NpSharp.Framework.InternalServices.Topology.Peripheral)">
            <summary>
            Merges two Peripheral instances into a new one
            </summary>
            <param name="a">first peripheral</param>
            <param name="b">second peripheral (overwrite values from the first one)</param>
            <returns>new peripheral instance</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a Peripheral element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed Peripheral element</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Peripheral.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.PluginSet">
            <summary>
            Represents a list of plugins criteria that compose a service
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.PluginSet.PluginSetTag">
            <summary>XName for the "Plugins" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.PluginSet.ExcludeAttribute">
            <summary>XName for the "exclude" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.PluginSet.IdsAttribute">
            <summary>XName for the "ids" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.PluginSet.ServiceTypeAttribute">
            <summary>XName for the "serviceType" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.PluginSet.TagsAttribute">
            <summary>XName for the "tags" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.PluginSet.#ctor(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.PluginSet"/> class. 
            </summary>
            <param name="exclude">if true, it means that the matched plugins should be excluded rather than included</param>
            <param name="ids">optional comma-separated list of plugin ids</param>
            <param name="serviceType">optional plugin service type</param>
            <param name="tags">optional comma-separated list of plugin tags</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.PluginSet.Exclude">
            <summary>
            Get the exclude property.
            When true, it means that the matched plugins should be excluded rather than included
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.PluginSet.Ids">
            <summary>
            Optional list of plugin ids
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.PluginSet.ServiceType">
            <summary>
            Optional service type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.PluginSet.Tags">
            <summary>
            Optional tags
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.PluginSet.HasTag(System.String)">
            <summary>
            Check is this Plugins has the given tag
            </summary>
            <param name="tag">the tag to check</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.PluginSet.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a Plugins element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed Plugins</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.PluginSet.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint">
            <summary>
            Represents a <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Endpoint"/>, but with all its parameters 
            and peripherals resolved
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Endpoint">
            <summary>
            Original <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Endpoint"/>, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.HardwareType">
            <summary>
            The Original <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.HardwareType"/> that matches with the <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Endpoint"/>, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Parameters">
            <summary>
            The <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Endpoint"/> parameters merged with the <see cref="T:NpSharp.Framework.InternalServices.Topology.EndpointCollection"/> parameters
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpoint.Peripherals">
            <summary>
            A <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:NpSharp.Framework.InternalServices.Topology.EndpointPeripheral"/>, but will all its
            parameters resolved
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral">
            <summary>
            Represents a <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.EndpointPeripheral"/>, but will all its
            parameters resolved
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.EndpointPeripheral">
            <summary>
            Original <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.EndpointPeripheral"/>, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.Peripheral">
            <summary>
            The Original <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.Peripheral"/> that matches with the <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.EndpointPeripheral"/>, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.Driver">
            <summary>
            The resolved Driver
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.Parameters">
            <summary>
            The <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.EndpointPeripheral"/> parameters merged with the <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedEndpointPeripheral.Peripheral"/> parameters
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ResolvedInstance">
            <summary>
            Represents a microkernel <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Instance"/> in the system topology, but with
            all its data already resolved (merged list of peripherals, logical nodes, topological area
            and the exact set of plugins to load for each service instance)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Instance">
            <summary>
            Original microkernel instance data, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Peripherals">
            <summary>
            Resolved peripherals for this instance (result of merging peripherals
            from <see cref="T:NpSharp.Framework.InternalServices.Topology.HardwareType"/> and <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Instance"/>)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Nodes">
            <summary>
            Resolved logical nodes for this instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Plugins">
            <summary>
            Resolved set of plugin descriptors to load for this instance (infrastructure plugins)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Routes">
            <summary>
            Resolved set of <see cref="T:NpSharp.Framework.InternalServices.Topology.Route"/>s for this instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.Endpoints">
            <summary>
            Resolved Endpoints for this instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ResolvedInstance.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ResolvedNode">
            <summary>
            Represents a logical <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedNode.Node"/>, but with all its services already resolved
            (with the exact set of plugins to load for each service instance)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedNode.Node">
            <summary>
            Original logical node data, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedNode.Services">
            <summary>
            Resolved list of services
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ResolvedNode.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.Topology.ResolvedNode"/> with an empty list of <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedNode.Services"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ResolvedService">
            <summary>
            Represents a <see cref="P:NpSharp.Framework.InternalServices.Topology.ResolvedService.Service"/> instance, but with all its plugin descriptors already resolved
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedService.Service">
            <summary>
            Original service instance, exactly as read from the XML
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ResolvedService.Plugins">
            <summary>
            Resolved set of plugin descriptors to load for this service
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Route">
            <summary>
            Represents a Route between two <see cref="T:NpSharp.Framework.InternalServices.Topology.Instance"/>s in two "adjacent" networks.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Route.RouteTypeTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "Route" XML element.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Route.FromAttributeName">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "from" XML attribute.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Route.ToAttributeName">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "to" XML attribute.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Route.From">
            <summary>
            Gets the instance name where this route starts.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Route.To">
            <summary>
            Gets the instance name where this route ends.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Route.#ctor(System.String,System.String)">
            <summary>
             Creates a new instance of <see cref="T:NpSharp.Framework.InternalServices.Topology.Route"/>
            </summary>
            <param name="from">The instance name where this route starts.</param>
            <param name="to">The instance name where this route ends.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Route.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parses an <see cref="T:NpSharp.Framework.InternalServices.Topology.Route"/> from the provided <paramref name="element"/>.
            </summary>
            <param name="element">An instance of <see cref="T:System.Xml.Linq.XElement"/> that should represent a <see cref="T:NpSharp.Framework.InternalServices.Topology.Route"/>.</param>
            <returns>The parsed <see cref="T:NpSharp.Framework.InternalServices.Topology.Route"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Route.ToXml">
            <summary>
            Converts this object to XML.
            </summary>
            <returns>An instance of <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.Service">
            <summary>
            Represents a concrete service to be loaded.
            The plugins that compose this service are determined from the <see cref="T:NpSharp.Framework.InternalServices.Topology.ServiceType"/>
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Service.ServiceTag">
            <summary>XName for the "Service" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Service.TypeAttribute">
            <summary>XName for the "type" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Service.AliasAttribute">
            <summary>XName for the "alias" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Service.TagsAttribute">
            <summary>XName for the "tags" XML attribute</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.Service.LogicalNameAttribute">
            <summary>XName for the "logicalName" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.Service"/> class. 
            </summary>
            <param name="type">service type</param>
            <param name="alias">optional service alias</param>
            <param name="tags">optional comma-separated service tags</param>
            <param name="logicalName">optional service logical name</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Service.Type">
            <summary>
            Get the service type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Service.Alias">
            <summary>
            Get the optional service alias
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Service.LogicalName">
            <summary>
            Get the optional service logical name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.Service.Tags">
            <summary>
            Get the service tags
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.HasTag(System.String)">
            <summary>
            Check is this service has the given tag
            </summary>
            <param name="tag">tag to verify</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.Equals(NpSharp.Framework.InternalServices.Topology.Service)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.op_Equality(NpSharp.Framework.InternalServices.Topology.Service,NpSharp.Framework.InternalServices.Topology.Service)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.op_Inequality(NpSharp.Framework.InternalServices.Topology.Service,NpSharp.Framework.InternalServices.Topology.Service)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a boolean</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a Service element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed Service</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.Service.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.ServiceType">
            <summary>
            Represents a service type and the plugins that compose this service
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.ServiceType.ServiceTypeTag">
            <summary>XName for the "ServiceType" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.ServiceType.TypeAttribute">
            <summary>XName for the "type" XML attribute</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ServiceType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.Topology.ServiceType"/> class. 
            </summary>
            <param name="type">service type name</param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ServiceType.Type">
            <summary>
            Get the service type name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.ServiceType.PluginSets">
            <summary>
            Get the list of PluginSet for this service type
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ServiceType.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a Plugins element from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed Plugins</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.ServiceType.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.TopologyChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:NpSharp.Framework.InternalServices.Topology.ITopology.TopologyChanged"/> event.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.Topology.TopologyData">
            <summary>
            Holds all system topology data
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.TopologyTag">
            <summary>XName for the "Topology" XML element</summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.AreasContainerTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "Areas" XML Element.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.NodeTypesContainerTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "NodeTypes" XML Element.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.ServiceTypesContainerTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "ServiceTypes" XML Element.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.HardwareTypescContainerTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "HardwareTypes" XML Element.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.RoutesContainerTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "Routes" XML Element.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.InternalServices.Topology.TopologyData.InstancesContainerTag">
            <summary>
            <see cref="T:System.Xml.Linq.XName"/> for the "Instances" XML Element.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.TopologyData.Areas">
            <summary>Get the topological areas</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.TopologyData.NodeTypes">
            <summary>Get the node types</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.TopologyData.ServiceTypes">
            <summary>Get the service types</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.TopologyData.HardwareTypes">
            <summary>Get the hardware types</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.TopologyData.Routes">
            <summary>Get the routes</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.Topology.TopologyData.Instances">
            <summary>Get the microkernel instances</summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.TopologyData.FromXml(System.Xml.Linq.XElement)">
            <summary>
            Parse a TopologyData from an XML element
            </summary>
            <param name="element">XML element</param>
            <returns>parsed TopologyData</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.TopologyData.ToXml">
            <summary>
            Convert this object to XML
            </summary>
            <returns>XML element</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.TopologyData.CreateDefault(System.String)">
            <summary>
            Create a default (empty) topology data, with the given instance name
            </summary>
            <param name="instanceName">instance name</param>
            <returns>topology data</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.Topology.TopologyData.AddToList``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Xml.Linq.XName,System.Collections.Generic.List{``0},System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Parse elements from a container tag and add them to a list
            </summary>
            <typeparam name="T">element type</typeparam>
            <param name="root">root element</param>
            <param name="containerTag">name of the container tag</param>
            <param name="elementsTag">name of the element tag</param>
            <param name="list">list to add parsed elements to</param>
            <param name="fromXml">function which converts xml elements into objects</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.DataProvider.DataProviderBase">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.DataProviderBase.GetDataTypes">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.DataProviderBase.Generate(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.InternalServices.DataProvider.DataProviderNotFoundException">
            <summary>
            Represents an error that occurs if there are no available data providers.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.DataProviderNotFoundException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.DataProviderNotFoundException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.DataProviderNotFoundException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.DataProviderNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.InternalServices.DataProvider.IDataProvider">
            <summary>
            Provides the methods to process data from plugins.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.IDataProvider.GetDataTypes">
            <summary>
            Gets the data types that this provider works with.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.IDataProvider.Generate(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generate data, by its data type.
            </summary>
            <param name="dataType">The data type to generate.</param>
            <param name="parameters">The parameters.</param>
            <returns>A <see cref="T:System.String"/> representation of the data.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.DataProvider.IDataProviderManager">
            <summary>
            Providers methods to process and retrieve data from plugins.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.IDataProviderManager.Generate(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Generate the data.
            </summary>
            <param name="dataType">The type of the data that will be generated.</param>
            <param name="parameters">Parameters used by the specific provider.</param>
            <returns>The processed data.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.IDataProviderManager.IsDataTypeSupported(System.String)">
            <summary>
            Verifies if a specific data type is supported by any plugin
            </summary>
            <param name="dataType"></param>
            <returns>True if the data type is supported. False otherwise</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.DataProvider.IDataProviderManager.GetSupportedDataTypes">
            <summary>
            Retrieves the supported data types as registered by the loaded plugins.
            </summary>
            <returns>An array of <see cref="T:System.String"/> containing the data types found.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.I18N.II18N">
            <summary>
            Interface of the I18N internal service for plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18N.GetTranslation(System.String)">
            <summary>
            Gets the translation associated to the provided I18N key, in the current plugin locale
            </summary>
            <param name="key">The I18N key.</param>
            <returns>The translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18N.GetTranslation(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the translation associated to the provided I18N keys, in the current plugin locale
            </summary>
            <param name="keys">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of I18N keys</param>
            <returns>The associations between I18N keys and translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18N.GetAllTranslations">
            <summary>
            Gets the full I18N translation table for the current plugin locale
            </summary>
            <returns>I18N translation table for the current plugin locale</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.I18N.II18NService">
            <summary>
            Interface of the I18N internal service.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.I18N.II18NService.DefaultLocale">
            <summary>
            Gets or Sets the Default Locale for translations
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.SetTranslation(NpSharp.Framework.InternalServices.I18N.TranslationKey,System.String)">
            <summary>
            Associates the provided <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> with the provided <paramref name="translation"/>.
            </summary>
            <param name="key">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.SetTranslation(System.Collections.Generic.IDictionary{NpSharp.Framework.InternalServices.I18N.TranslationKey,System.String})">
            <summary>
            Adds the mapped <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translation to the existing table.
            </summary>
            <param name="translations">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> -> translation mapping.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.GetTranslation(NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <summary>
            Gets the translation associated to the provided <paramref name="key"/>.
            </summary>
            <param name="key">The provided <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.</param>
            <returns>The translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.GetTranslation(System.Collections.Generic.IEnumerable{NpSharp.Framework.InternalServices.I18N.TranslationKey})">
            <summary>
            Gets the association between the provided <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and the respective translation.
            </summary>
            <param name="keys">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.</param>
            <returns>The associations between <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.GetAllTranslations(System.String)">
            <summary>
            Gets all the associations between <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translation.
            </summary>
            <returns>All the current associations between <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translations.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.I18N.TranslationKey">
            <summary>
            Represents the Composite Key of the <see cref="T:NpSharp.Framework.InternalServices.I18N.II18NService"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Key">
            <summary>
            Gets the translation key of this <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Locale">
            <summary>
            Gets the locale of this <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>
            with the provided <paramref name="locale"/> and <paramref name="key"/>.
            </summary>
            <param name="locale">This <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.<see cref="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Locale"/>.</param>
            <param name="key">This <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.<see cref="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Key"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.Equals(NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.ToString">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.op_Equality(NpSharp.Framework.InternalServices.I18N.TranslationKey,NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <summary>
            Checks if the provided <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>s are equivalent.
            </summary>
            <param name="left">The left <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> to be compared.</param>
            <param name="right">The right <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> to be compared.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is equivalent to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.op_Inequality(NpSharp.Framework.InternalServices.I18N.TranslationKey,NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <summary>
            Checks if the provided <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>s are different.
            </summary>
            <param name="left">The left <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> to be compared.</param>
            <param name="right">The right <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> to be compared.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is different from <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IColorDb">
            <summary>
            Interface of the Color DB Internal Service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.SetColor(System.String,System.Drawing.Color)">
            <summary>
            Sets a pair of <see cref="T:System.Drawing.Color"/> into the Color DB.
            </summary>
            <param name="name">The color name.</param>
            <param name="color">The respective <see cref="T:System.Drawing.Color"/>.</param>
            <remarks>
            <para>Note that this operation is additive only:</para>
            <para>If the Color Name being set did not exist previously,
            it will be added into the Color DB with the specified value.</para>
            <para> On the other hand, if the Color Name being set did exist previously,
            its value will be replaced with the specified value.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.SetColors(System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Sets a <see cref="T:System.Collections.Generic.IDictionary`2"/> into the Color DB.
            </summary>
            <param name="colors">The <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <remarks>
            <para>Note that this operation is additive only:</para>
            <para>If the Color Name being set did not exist previously,
            it will be added into the Color DB with the specified value.</para>
            <para> On the other hand, if the Color Name being set did exist previously,
            its value will be replaced with the specified value.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.ReplaceColorDb(System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Replaces the Color DB entirely,
            storing a brand-new Color DB into the database and,
            if it is loaded into memory, replacing the in-memory Color DB with the received argument.
            </summary>
            <param name="colors">The <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <remarks>
            <para>Note that this operation is destructive:</para>
            <para>If a color that previously existed in the Color DB
            and does not exist in the new Color DB, it will not be present after calling this method.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.GetColor(System.String)">
            <summary>
            Gets a <see cref="T:System.Drawing.Color"/> from the Color DB. If the color does not exist, this method tries to resolve the Color using <see cref="M:System.Drawing.Color.FromName(System.String)"/>.
            </summary>
            <param name="name">The color name.</param>
            <returns>The respective <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.TryGetColor(System.String,System.Drawing.Color@)">
            <summary>
            Gets the <see cref="T:System.Drawing.Color"/> associated with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The color name.</param>
            <param name="color">When this method returns, contains the value associated with the provided <paramref name="name"/>, if the <paramref name="name"/> is found; otherwise, the default value for <see cref="T:System.Drawing.Color"/>.</param>
            <returns>true if this <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/> contains a <see cref="T:System.Drawing.Color"/> associated to <paramref name="name"/>; otherwise, false.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.GetColors(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> from the Color DB.
            </summary>
            <param name="names">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of color names.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> of Color Name and Color.</returns>
            <remarks>
            <para>T is <see cref="T:System.String"/>.</para>
            <para>TKey is <see cref="T:System.String"/> and represents a Color Name.</para>
            <para>TValue is the respective <see cref="T:System.Drawing.Color"/>.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.GetAllColors">
            <summary>
            Gets all colors from the Color DB.
            </summary>
            <returns>All colors from the in-memory Color DB.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPersistenceDbCommands">
            <summary>
            Defines database operations which are not part of a unit-of-work session
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.DropCollection``1">
            <summary>
            Deletes all documents from the given collection
            </summary>
            <typeparam name="TDocument">type of document (collection)</typeparam>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.DropCollectionAsync``1">
            <summary>
            Deletes all documents from the given collection
            </summary>
            <typeparam name="TDocument">type of document (collection)</typeparam>
            <returns>the task</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.DatabaseExists(System.String)">
            <summary>
            Verifies if a database exists on the current instance
            </summary>
            <returns><c>true</c> if the database indicated by the provided <paramref name="databaseName"/> exists; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.GetAllDatabaseNames">
            <summary>
            Retrieves the names of all databases available on the current instance
            </summary>
            <returns>a collection with the names of the databases</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.GetDatabaseId(System.String)">
            <summary>
            Retrieves the GUID representing the ID for a given database
            </summary>
            <param name="databaseName">the name of the database</param>
            <returns>a <see cref="T:System.Guid"/> representing the ID of the database</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.GetDatabaseDocument(System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            that contains information related to the database
            named as the provided <paramref name="databaseName"/>.
            </summary>
            <param name="databaseName">The name of the database to get information from.</param>
            <returns>If the database exists, an instance of <see cref="T:Newtonsoft.Json.Linq.JObject"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.SetDatabaseSettings(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the Settings of an existing <see cref="!:DatabaseDocument"/> 
            for the provided <param name="databaseName" /> with the <param name="settings"/> instance.
            </summary>
            <param name="databaseName">The name of the database to be updated.</param>
            <param name="settings">An instance of <see cref="T:System.Collections.Generic.Dictionary`2"/> with the new settings.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.GetCountOfDocuments(System.String)">
            <summary>
            Retrieves the count of all documents of <paramref name="databaseName"/>
            </summary>
            <param name="databaseName">The name of database to be inferred</param>
            <returns>Total of documents</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.L10N.ILocalization">
            <summary>
            Localization internal service for plugins
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat">
            <summary>
            Gets the format pattern for a date value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat">
            <summary>
            Gets the format pattern for a time value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator">
            <summary>
            Gets the string to use as the decimal separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator">
            <summary>
            Gets the string to use as the thousand separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyName">
            <summary>
            Gets the name of the currency used in the country/region, formatted in the native language of the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol">
            <summary>
            Gets the currency symbol associated with the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals">
            <summary>
            Gets the number of decimal places to use in currency values.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyPositiveFormat">
            <summary>
            Gets the format to be used when formatting a positive currency.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyNegativeFormat">
            <summary>
            Gets the format to be used when formatting a negative currency.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDate(System.DateTime)">
            <summary>
            Converts the <see cref="P:System.DateTime.Date"/> of the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> format.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> to be converted.</param>
            <returns>A string representation of the provided <see cref="P:System.DateTime.Date"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDate(System.DateTime,System.String)">
            <summary>
            Converts the <see cref="P:System.DateTime.Date"/> of the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the provided <paramref name="format"/>.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> to be converted.</param>
            <param name="format">A standard or custom date format string.</param>
            <returns>A string representation of the provided <see cref="P:System.DateTime.Date"/> as specified by the provided <paramref name="format"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDate(System.String)">
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.DateTime"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="date">A string that contains a date to convert.</param>
            <returns>An object that is equivalent to the date contained in <paramref name="date"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDate(System.String,System.String)">
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.DateTime"/> equivalent using the provided <paramref name="format"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="date">A string that contains a date to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="date"/>.</param>
            <returns>An object that is equivalent to the date contained in <paramref name="date"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatTime(NpSharp.Framework.Time)">
            <summary>
            Converts the provided <see cref="T:NpSharp.Framework.Time"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> format.
            </summary>
            <param name="time">The <see cref="T:NpSharp.Framework.Time"/> to be converted.</param>
            <returns>A string representation of the provided <see cref="T:NpSharp.Framework.Time"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatTime(NpSharp.Framework.Time,System.String)">
            <summary>
            Converts the provided <see cref="T:NpSharp.Framework.Time"/> to its equivalent string representation using the provided <paramref name="format"/>.
            </summary>
            <param name="time">The <see cref="T:NpSharp.Framework.Time"/> to be converted.</param>
            <param name="format">A standard or custom time format string.</param>
            <returns>A string representation of the provided <see cref="T:NpSharp.Framework.Time"/> as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseTime(System.String)">
            <summary>
            Converts the specified string representation of a time to its <see cref="T:NpSharp.Framework.Time"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="time">A string that contains a time to convert.</param>
            <returns>An object that is equivalent to the time contained in <paramref name="time"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseTime(System.String,System.String)">
            <summary>
            Converts the specified string representation of a time to its <see cref="T:NpSharp.Framework.Time"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="time">A string that contains a time to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="time"/>.</param>
            <returns>An object that is equivalent to the time contained in <paramref name="time"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDateTime(System.DateTime)">
            <summary>
            Converts the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> formats.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to be converted.</param>
            <returns>A string representation of the provided <see cref="T:System.DateTime"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDateTime(System.DateTime,System.String)">
            <summary>
            Converts the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the provided <paramref name="format"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to be converted.</param>
            <param name="format">A standard or custom date and time format string.</param>
            <returns>A string representation of the provided <see cref="T:System.DateTime"/> as specified by the provided <paramref name="format"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDateTime(System.String)">
            <summary>
            Converts the specified string representation of a date and tim to its <see cref="T:System.DateTime"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> formats and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="dateTime">A string that contains a date and time to convert.</param>
            <returns>An object that is equivalent to the date and time contained in <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDateTime(System.String,System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent using the provided <paramref name="format"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="dateTime">A string that contains a date and time to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="dateTime"/>.</param>
            <returns>An object that is equivalent to the date and time contained in <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDecimal(System.Decimal)">
            <summary>
            Converts the numeric value of the provided <paramref name="decimal"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="decimal">The <see cref="T:System.Decimal"/> to be converted.</param>
            <returns>The string representation of the value of the provided <paramref name="decimal"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDecimal(System.Decimal,System.String,System.String,System.Int32)">
            <summary>
            Converts the numeric value of the provided <paramref name="decimal"/> to its equivalent string representation using the specified <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.
            </summary>
            <param name="decimal">The <see cref="T:System.Decimal"/> to be converted.</param>
            <param name="decimalSeparator">The decimal separator to use.</param>
            <param name="thousandSeparator">The thousand separator to use.</param>
            <param name="decimalPlaces">number of decimal places</param>
            <returns>The string representation of the value of the provided <paramref name="decimal"/> as specified by <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDecimal(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal"/> equivalent using <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="decimal">The string representation of the number to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="decimal"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDecimal(System.String,System.String,System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal"/> equivalent using the specified <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.
            </summary>
            <param name="decimal">The string representation of the number to convert.</param>
            <param name="decimalSeparator">The decimal separator used in the string representation.</param>
            <param name="thousandSeparator">The thousand separator used in the string representation.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="decimal"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatCurrency(System.Decimal)">
            <summary>
            Converts the numeric value of the provided <paramref name="currency"/> to its equivalent currency string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="currency">The <see cref="T:System.Decimal"/> to be converted.</param>
            <returns>The string representation of the value of the provided <paramref name="currency"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatCurrency(System.Decimal,System.String)">
            <summary>
            Converts the numeric value of the provided <paramref name="currency"/> to its equivalent currency string representation using the specified <paramref name="currencySymbol"/>.
            </summary>
            <param name="currency">The <see cref="T:System.Decimal"/> to be converted.</param>
            <param name="currencySymbol">The string to use as the currency symbol.</param>
            <returns>The string representation of the value of the provided <paramref name="currency"/> as specified by <paramref name="currencySymbol"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseCurrency(System.String)">
            <summary>
            Converts the currency string representation of the provided <paramref name="currency"/> to its <see cref="T:System.Decimal"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="currency">The currency string representation to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="currency"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseCurrency(System.String,System.String,System.String,System.String)">
            <summary>
            Converts the currency string representation of the provided <paramref name="currency"/> to its <see cref="T:System.Decimal"/> equivalent using the specified <paramref name="currencySymbol"/>, <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.
            </summary>
            <param name="currency">The currency string representation to convert.</param>
            <param name="currencySymbol">The string used as the currency symbol.</param>
            <param name="decimalSeparator">The decimal separator to use.</param>
            <param name="thousandSeparator">The thousand separator to use.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="currency"/> as specified by <paramref name="currencySymbol"/>, <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.L10N.ILocalizationService">
            <summary>
            Extended localization internal service for plugins (contains setter interfaces)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.DateFormat">
            <summary>
            Gets or sets the format pattern for a date value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.TimeFormat">
            <summary>
            Gets or sets the format pattern for a time value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.DecimalSeparator">
            <summary>
            Gets or sets the string to use as the decimal separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.ThousandSeparator">
            <summary>
            Gets or sets the string to use as the thousand separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyName">
            <summary>
            Gets or sets the name of the currency used in the country/region, formatted in the native language of the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol associated with the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyDecimals">
            <summary>
            Gets or sets the number of decimal places to use in currency values.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyPositiveFormat">
            <summary>
            Gets or sets the format to be used when formatting a positive currency.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyNegativeFormat">
            <summary>
            Gets or sets the format to be used when formatting a negative currency.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IMicrokernel">
            <summary>
            Public members of the microkernel, accessible from plugins
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.IMicrokernel.StartupTime">
            <summary>
            Gets the <see cref="T:System.TimeSpan"/> that this <see cref="T:NpSharp.Framework.InternalServices.IMicrokernel"/> took to start.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.IMicrokernel.ProductInformation">
            <summary>
            Gets the <see cref="P:NpSharp.Framework.InternalServices.IMicrokernel.ProductInformation"/> respective to this <see cref="T:NpSharp.Framework.InternalServices.IMicrokernel"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.GetProgramArguments">
            <summary>
            Retrieve the main executable command-line arguments
            </summary>
            <returns>list of arguments</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.GetInstalledPlugins">
            <summary>
            Retrieves the descriptors from the installed plugins
            </summary>
            <returns>List of the <see cref="T:NpSharp.Framework.PluginDescriptor"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.AddPluginOnTopology(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Dynamically register a new plugin in the microkernel topology.<br/>
            The plugin will be registered as an infrastructure plugin (not associated to a node, nor service), and will be immediately started.
            </summary>
            <param name="pluginName">The plugin DLL name (E.g.: NpSharp.Plugin.Something.DLL)</param>
            <param name="nodeName">
            Optional topological node name to associate this plugin with.
            If this topological node does not exist, it will be dynamically created and registered in the topology (not associated to any area)
            </param>
            <param name="waitPluginCreation">If true, waits for the plugin creation before return</param>
            <param name="loadSingleInstance">If true, only one instance of the plugin will be loaded</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.AddPluginOnTopology(System.String,System.String,System.Boolean,NpSharp.Framework.PluginTopologyOptions)">
            <summary>
            Dynamically register a new plugin in the microkernel topology.<br/>
            </summary>
            <param name="pluginName">The plugin DLL name (E.g.: NpSharp.Plugin.Something.DLL)</param>
            <param name="nodeName">
            Optional topological node name to associate this plugin with.
            If this topological node does not exist, it will be dynamically created and registered in the topology (not associated to any area)
            </param>
            <param name="waitPluginCreation">If true, waits for the plugin creation before return</param>
            <param name="options">
            The <see cref="T:NpSharp.Framework.PluginTopologyOptions"/> associated with the instance being registered.
            When none is provided, the default options will be considered.
            </param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.AddPeripheralPluginOnTopology(System.String,System.String,System.String,System.String,System.Boolean,NpSharp.Framework.PeripheralPluginTopologyOptions)">
            <summary>
            Dynamically register a new peripheral plugin in the microkernel topology.<br/>
            </summary>
            <param name="pluginAssembly">The plugin DLL name (E.g.: NpSharp.Plugin.Something.DLL).</param>
            <param name="driverAssembly">The driver DLL name (E.g.: NpSharp.Driver.Something.DLL).</param>
            <param name="peripheralType">The type name of the peripheral, like CashDrawer, CardReader, LineDisplay etc.</param>
            <param name="nodeName">(optional) Topological node name to associate this plugin with.
            If this topological node does not exist, it will be dynamically created and registered in the topology (not associated to any area)</param>
            <param name="waitPluginCreation">(optional) If true, waits for the plugin creation before return.</param>
            <param name="options"> (optional) The <see cref="T:NpSharp.Framework.PluginTopologyOptions"/> associated with the instance being registered.
            When none is provided, the default options will be considered.
            </param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.Stop(System.Int32)">
            <summary>
            Stops the microkernel with the given exit code
            </summary>
            <param name="exitCode">exit code</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.Restart">
            <summary>
            Restarts the microkernel
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.GetRemoteInstances">
            <summary>
            Retrieves the basic information about known remote instances
            </summary>
            <returns>A collection of <see cref="T:NpSharp.Framework.InternalServices.RemoteInstanceInfo"/></returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.RegisterInstanceFromOtherTopology(System.String,System.String)">
            <summary>
            Registers a remote instance that belongs to another topology.
            </summary>
            <param name="name">The name of the remote instance.</param>
            <param name="host">The host address of the remote instance (should be configured as {IP or host name}:{port}</param>
            <exception cref="T:System.ArgumentException">Throws when any of the parameters are null or empty.</exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.RegisterRoutes(System.Collections.Generic.IEnumerable{NpSharp.Framework.InternalServices.RouteInfo})">
            <summary>
            Registers a route between two different NP# instances.
            </summary>
            <param name="routes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with a collection of <see cref="T:NpSharp.Framework.InternalServices.RouteInfo"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.RefreshPlugins">
            <summary>
            Promotes or Demotes plugins on topology based on the current failover status.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.DisableFailoverForNode(System.String)">
            <summary>
            Disables the failover scheme for the node whose name is the provided <paramref name="nodeName"/>.
            </summary>
            <param name="nodeName">The name of the node that has to have its failover scheme disabled.</param>
            <remarks>
            After calling this API, every further attempt to change the failover behavior for this specific node
            (for example, by using the <see cref="M:NpSharp.Framework.InternalServices.IMicrokernel.AddPluginOnTopology(System.String,System.String,System.Boolean,NpSharp.Framework.PluginTopologyOptions)"/> API)
            will be ignored.
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.SetProductBundleVersion(System.Version)">
            <summary>
            Set product bundle version.
            </summary>
            <param name="version">The version of product bundle.</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPluginMonitor">
            <summary>
            Plugin Monitor and Info about running plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginMonitor.PluginsLoaded(System.Boolean)">
            <summary>
            Get all loaded plugins.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginMonitor.GetPluginMonitorInfo(System.Guid,System.Boolean)">
            <summary>
            Gets the current status about a plugin.
            </summary>
            <param name="pluginId">The id of the plugin.</param>
            <param name="getMemory">Flag indicating if a garbage collection should be performed so that memory info is updated.</param>
            <returns>An instance of <see cref="T:NpSharp.Framework.InternalServices.PluginMonitorInfo"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.ISystemProperties">
            <summary>
            Internal service which holds generic system-wide properties
            </summary>
            <remarks>
            See https://wiki.rdisoftware.com/display/PELE/NP+Sharp+System+Properties for a detailed list of all known System Properties.
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.AddFromArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds system properties from a list of command-line arguments.<br/>
            System properties can be defined in the command-line by using the following syntax:
            <b>-DPropertyName=PropertyValue</b>
            </summary>
            <param name="args">command-line arguments</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.Get(System.String,System.String)">
            <summary>
            Retrieve a system-wide property value
            </summary>
            <param name="name">system-wide property name</param>
            <param name="defaultValue">optional default value to return if the property does not exist</param>
            <returns>system-wide property value</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.Get``1(System.String,``0)">
            <summary>
            Retrieve a system-wide property value, converted into the given type
            </summary>
            <typeparam name="T">type to convert to property into</typeparam>
            <param name="name">system-wide property name</param>
            <param name="defaultValue">optional default value to return if the property does not exist</param>
            <returns>system-wide property value</returns>
            <exception cref="T:System.FormatException">if the given property cannot be converted to the given type</exception>
            <exception cref="T:System.OverflowException">if the given property cannot be converted to the given type</exception>
            <exception cref="T:System.InvalidCastException">if the given property cannot be converted to the given type</exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.GetAll">
            <summary>
            Retrieve all known system-wide properties, as a list of key,value pairs
            </summary>
            <returns>system-wide properties</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.Set(System.String,System.String)">
            <summary>
            Dynamically set the value of a system-wide property
            </summary>
            <param name="name">property name</param>
            <param name="value">property value (null to remove the property)</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.SetMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Dynamically set a list of system-wide properties at once
            </summary>
            <param name="properties">list of properties</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IWebHostService">
            <summary>
            Internal service which provides webhost infrastructure for plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IWebHostService.Open">
            <summary>
            Starts listening to HTTP Requests.
            </summary>
            <remarks>
            The base address used by the server has the following format:
            <para>
            <c>{NPSHARP-PREFIX}/{PLUGIN-SHORT-NAME}/{PLUGIN-NODE-NAME}</c>
            </para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IWebHostService.Open(System.String)">
            <summary>
            Hosts a WebAPI Plugin
            </summary>
            <param name="siteName">The Base Address for the Web plugin.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IWebHostService.RegisterResourceAssembly(System.String)">
            <summary>
            Registers an <see cref="T:System.Reflection.Assembly"/> indicated by the provided
            <paramref name="assemblyName"/> as an source for static resources.
            </summary>
            <param name="assemblyName">The name of the <see cref="T:System.Reflection.Assembly"/> to register (e.g. Additional.Resources.dll).</param>
            <remarks>
            When handling requests for static resources, the Web Host will
            first try to serve it from resources embedded into the Plugin's DLL.
            It none resource was found, it will try to serve it from assemblies
            added using this method, prioritizing assemblies that were added first.
            </remarks>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.InternalServices"/> namespace contains
            interfaces for NpSharp internal services.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IScheduler">
            <summary>
            Scheduler internal service - abstracts the creation of timers in order for them to be easy to test and monitor in a centralized way
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IScheduler.CreateTimer(System.String,System.Action,System.TimeSpan)">
            <summary>
            Creates a new timer with the given name, callback and due time
            </summary>
            <param name="timerName">timer name (used for monitoring purposes)</param>
            <param name="callback">callback to be executed when the timer triggers</param>
            <param name="dueTime">how long to wait for the timer to be triggered</param>
            <returns>the timer instance</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IScheduler.CreateTimer(System.String,System.Action,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a new periodical timer with the given name, callback, due time and period
            </summary>
            <param name="timerName">timer name (used for monitoring purposes)</param>
            <param name="callback">callback to be executed when the timer triggers</param>
            <param name="dueTime">how long to wait for the timer to be triggered</param>
            <param name="period">how often to trigger the timer after the initial <paramref name="dueTime"/></param>
            <returns>the timer instance</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.ITimer">
            <summary>
            Abstraction over the <see cref="T:System.Threading.Timer"/> in order for them to be easy to test and monitor in a centralized way.
            Timers must be created using the <see cref="T:NpSharp.Framework.InternalServices.IScheduler"/> internal service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.Int32,System.Int32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan"/> values to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter, in milliseconds, is less than -1. </exception><exception cref="T:System.NotSupportedException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter, in milliseconds, is greater than 4294967294. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.UInt32,System.UInt32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.Int64,System.Int64)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter is less than -1. </exception><exception cref="T:System.NotSupportedException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter is greater than 4294967294. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Dispose(System.Threading.WaitHandle)">
            <summary>
            Releases all resources used by the current instance and signals when the timer has been disposed of.
            </summary>
            
            <returns>
            true if the function succeeds; otherwise, false.
            </returns>
            <param name="notifyObject">The <see cref="T:System.Threading.WaitHandle"/> to be signaled when the Timer has been disposed of. </param><exception cref="T:System.ArgumentNullException">The <paramref name="notifyObject"/> parameter is null. </exception>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPersistence">
            <summary>
            Interface for the persistence component provided by the microkernel.
            Plugins should <b>[Import]</b> this interface for persisting any desired data.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistence.OpenSession">
            <summary>
            Opens a new persistence session, which must be disposed after usage.
            </summary>
            <returns>session</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistence.OpenAsyncSession">
            <summary>
            Opens a new asynchronous persistence session, which must be disposed after usage.
            </summary>
            <returns>session</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.IPersistence.DbCommands">
            <summary>
            Retrieves the <see cref="T:NpSharp.Framework.InternalServices.IPersistenceDbCommands"/> to interact with this persistence database
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DriverContracts.DriverBase">
            <summary>
            Base abstract class for all driver implementations.
            </summary>
            <seealso cref="T:NpSharp.Framework.DriverContracts.IDriver"/>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.DriverBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.DriverContracts.DriverBase.Parameters">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.DriverBase.Configure(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.DriverBase.OpenDevice">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.DriverBase.Claim">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.DriverBase.Release">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.DriverContracts.IDriver">
            <summary>
            Base contract for driver implementation
            </summary>
        </member>
        <member name="P:NpSharp.Framework.DriverContracts.IDriver.Parameters">
            <summary>
            The configuration parameters for the given driver as configured on the topology.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.IDriver.Configure(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Injects the configuration parameters as configured on the topology.
            </summary>
            <remarks>
            This method already have a default implementation on <see cref="T:NpSharp.Framework.DriverContracts.DriverBase"/>
            Only override it when really necessary. All configuration parameters are accessible
            via the <see cref="P:NpSharp.Framework.DriverContracts.IDriver.Parameters"/> property.
            </remarks>
            <param name="parameters">A <see cref="T:System.Collections.Generic.IDictionary`2"/> with the parameters keys and values.</param>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.IDriver.OpenDevice">
            <summary>
            Called by the microkernel right after the driver has been instantiated.
            Should be used to establish the communication between the driver and the device.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.IDriver.Claim">
            <summary>
            Not explicited called by the Microkernel.
            Use it when it's necessary to implement an attempt to access the device.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DriverContracts.IDriver.Release">
            <summary>
            Not explicited called by the Microkernel.
            Use it to implement an attempt to cease the access to the device.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException">
            <summary>
            This <see cref="T:System.Exception"/> is thrown when an action that depends on the database could not be executed.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException"/> with the provided <paramref name="message"/>.
            </summary>
            <param name="message">An <see cref="T:System.String"/> to be set on <see cref="P:System.Exception.Message"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException"/> with the provided <paramref name="message"/> and <paramref name="inner"/>.
            </summary>
            <param name="message">An <see cref="T:System.String"/> to be set on <see cref="P:System.Exception.Message"/>.</param>
            <param name="inner">An instance of <see cref="T:System.Exception"/> to be set on <see cref="P:System.Exception.InnerException"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeReachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">An instance of <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">An instance of <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeStartedException">
            <summary>
            This <see cref="T:System.Exception"/> is raised when the local Database Server could not be started.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeStartedException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeStartedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.DatabaseCannotBeStartedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException">
            <summary>
            This exception is raised when a concurrency conflict is encountered
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.Persistence.PersistenceException">
            <summary>
            Generic expection in the persistence layer
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ExternalServiceTimeoutException">
            <summary>
            Error when communication with an external service was timed out.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceTimeoutException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceTimeoutException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceTimeoutException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ResponseDeserializationException">
            <summary>
            There was an error deserializing the service operation response
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseDeserializationException.OriginalExceptionType">
            <summary>
            Original exception type name (if this was caused by an exception deserialization error)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseDeserializationException.OriginalMessage">
            <summary>
            Original exception message (if this was caused by an exception deserialization error)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="originalMessage">original exception message</param>
            <param name="originalExceptionType">original exception type name</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ResponseSerializationException">
            <summary>
            There was an error serializing the service operation response
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseSerializationException.OriginalExceptionType">
            <summary>
            Original exception type name (if this was caused by an exception serialization error)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseSerializationException.OriginalMessage">
            <summary>
            Original exception message (if this was caused by an exception serialization error)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="originalException">original exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Exceptions"/> namespace contains
            all exceptions that can be thrown to NpSharp plugins.<br/>
            This includes both exceptions thrown by plugins interfaces and exceptions thrown by the NpSharp framework itself.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.NpSharpPerformanceCounterException">
            <summary>
            NpSharp Performance Counter Exception
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.NpSharpPerformanceCounterException.#ctor(System.String)">
            <summary>
            General Exception
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.NpSharpPerformanceCounterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException">
            <summary>
            Error communicating with an external service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.RequiredParameterException">
            <summary>
            When a required parameter is not set.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.RequiredParameterException.ParameterName">
            <summary>
            Gets or sets the name of the missing required parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.#ctor(NpSharp.Framework.Configuration.Parameter)">
            <summary>
            Occurs when a parameter or a value is required and is not set.
            </summary>
            <param name="parameter">Required Parameter</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.InvalidTopologyException">
            <summary>
            Thrown when the system topology configuration is invalid
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.InvalidPluginException">
            <summary>
            Thrown when a plugin is found to be invalid
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.InvalidParameterValueException">
            <summary>
            Attempted to set an invalid parameter value
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ProxyCompilationException">
            <summary>
            Exception for Proxy Compilation issues.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:NpSharp.Framework.Exceptions.ProxyCompilationException"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ServiceCommunicationException">
            <summary>
            Error communicating with a service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ServiceNotFoundException">
            <summary>
            A requested service has not been found
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Exceptions.ServiceNotFoundException"/>
            for the provided <paramref name="serviceType"/>.
            </summary>
            <param name="serviceType">The <see cref="T:System.Type"/> of the service that was not found.</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ValidationException">
            <summary>
            Exception for Validation issues
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:NpSharp.Framework.Exceptions.ValidationException"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Logging.ILoggerSettings">
            <summary>
            Defines properties to get information related to the <see cref="T:NpSharp.Framework.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.ILoggerSettings.OutputFolder">
            <summary>
            Gets the base output folder for logs.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.EmptyLogger">
            <summary>
            A fake <see cref="T:NpSharp.Framework.Logging.ILogger"/> implementation which does nothing
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Logging.EmptyLogger.Write(System.Int32,System.Object[],System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Logging.EmptyLogger.WriteDebug(System.Object,System.Exception,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="F:NpSharp.Framework.Logging.EmptyLogger.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.EventLogLevel">
            <summary>
            Windows Event severity types
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Disabled">
            <summary>
            Does not write into windows events
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Info">
            <summary>
            when an operation was executed successfully
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Warning">
            <summary>
            whenever a "recoverable" error occurs or when an external application should be notified
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Error">
            <summary>
            whenever is raised an error that allows the application to continue running (recoverable errors)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.ILogger">
            <summary>
            Logger interface
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Logging.ILogger.Write(System.Int32,System.Object[],System.String,System.Int32)">
            <summary>
            Writes a log message with variable number of arguments
            </summary>
            <param name="logId">Log ID (for plugins, this must be in the plugin's <see cref="P:NpSharp.Framework.PluginBase.LogTable"/></param>
            <param name="args">optional formatting arguments</param>
            <param name="sourceFilePath">caller source file name</param>
            <param name="sourceLineNumber">caller source line number</param>
        </member>
        <member name="M:NpSharp.Framework.Logging.ILogger.WriteDebug(System.Object,System.Exception,System.String,System.Int32)">
            <summary>
            Writes a debug log message
            </summary>
            <param name="message">message</param>
            <param name="ex">optional exception to log stacktrace</param>
            <param name="sourceFilePath">caller source file name</param>
            <param name="sourceLineNumber">caller source line number</param>
        </member>
        <member name="T:NpSharp.Framework.Logging.LogType">
            <summary>
            Log severity type
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Info">
            <summary>
            when an operation was executed successfully
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Warning">
            <summary>
            whenever a "recoverable" error occurs or when an external application should be notified
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Error">
            <summary>
            whenever is raised an error that allows the application to continue running (recoverable errors)
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Fatal">
            <summary>
            when the application stops running or cannot be started
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Logging"/> namespace contains
            interfaces and objects that can be used to interact with the NpSharp application logging layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.LogDescriptor">
            <summary>
            Contains all the details of a log entry that can be produced by a plug-in.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Logging.LogDescriptor.#ctor(System.Int32,System.String,NpSharp.Framework.Logging.LogType)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
            <param name="id"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Id"/></param>
            <param name="message"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Message"/></param>
            <param name="severity"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Severity"/></param>
        </member>
        <member name="M:NpSharp.Framework.Logging.LogDescriptor.#ctor(System.Int32,System.String,NpSharp.Framework.Logging.LogType,System.Int32,NpSharp.Framework.Logging.EventLogLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/> that is linked to a Windows Event.
            </summary>
            <param name="id"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Id"/></param>
            <param name="message"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Message"/></param>
            <param name="severity"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Severity"/></param>
            <param name="eventLogId"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.EventLogId"/></param>
            <param name="eventLogType"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.EventLogType"/></param>
            <param name="logPossibleCause"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleCause"/></param>
            <param name="logPossibleSolution"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleSolution"/></param>
            <remarks>
            When <see cref="T:NpSharp.Framework.Logging.EventLogLevel"/> is different of <see cref="F:NpSharp.Framework.Logging.EventLogLevel.Disabled"/> will write into Windows Event.
            </remarks>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.Id">
            <summary>
            Gets the log entry identification of this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            It should be unique amongst every <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/> present in a log table.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.Message">
            <summary>
            Gets the message associated to this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.Severity">
            <summary>
            Gets the <see cref="T:NpSharp.Framework.Logging.LogType"/>
            that represents the severity of this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.EventLogId">
            <summary>
            Gets the Windows Event Log identification associated to this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.EventLogType">
            <summary>
            Gets the <see cref="T:NpSharp.Framework.Logging.EventLogLevel"/>
            that represents the severity in the Windows Event Log of this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleCause">
            <summary>
            Gets a message that contains the possible cause of a log entry associated to this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleSolution">
            <summary>
            Gets a message that contains the possible fix of a log entry associated to this <see cref="T:NpSharp.Framework.Logging.LogDescriptor"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.MethodInfoExtensions">
            <summary>
            Extensions methods for <see cref="T:System.Reflection.MethodInfo"/> instances.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.MethodInfoExtensions.InvokePreservingException(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invokes a given <see cref="T:System.Reflection.MethodInfo"/> and, when a <see cref="T:System.Reflection.TargetException"/> occurs, it throws the original inner exception.
            </summary>
            <param name="method">The instance of <see cref="T:System.Reflection.MethodInfo"/> to be executed.</param>
            <param name="obj">The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor.</param>
            <param name="parameters">An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. </param>
            <returns>The method result as an <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.MethodInfoExtensions.InvokeMethodWithWrappedQueryableAsync``2(System.Reflection.MethodInfo,System.Linq.IQueryable{``0},System.Object[])">
            <summary>
            Asynchronously invokes a <see cref="T:System.Reflection.MethodInfo"/> with the given parameters.
            </summary>
            <remarks>
            The <paramref name="source"/> should be implemented either by <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> or IRavenQueryable types.
            </remarks>
            <typeparam name="TSource">The type of the elements source.</typeparam>
            <typeparam name="TReturn">The type of the value that will be retrieved.</typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> of <typeparamref name="TSource"/> with the source elements.</param>
            <param name="method">An instance of <see cref="T:System.Reflection.MethodInfo"/> with the method to be invoked.</param>
            <param name="parameters">An array of <see cref="T:System.Object"/> with the parameters to be passed on to the method</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> of <typeparamref name="TReturn"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.MethodInfoExtensions.IgnoreErrors``1(System.Action{``0},``0)">
            <summary>
            Executes a given <paramref name="action"/> without throwing any <see cref="T:System.Exception"/>.
            </summary>
            <typeparam name="T">The type of the argument.</typeparam>
            <param name="action">The <see cref="T:System.Action`1"/> to be executed.</param>
            <param name="arg">The argument to pass on to the <paramref name="action"/>.</param>
        </member>
        <member name="T:NpSharp.Framework.Network.INetworkInterfacesFinder">
            <summary>
            Provides network discovery related operations.
            </summary>
        </member>
        <member name="E:NpSharp.Framework.Network.INetworkInterfacesFinder.NetworkInterfacesChanged">
            <summary>
            Fires whenever a network interface change is detected.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Network.INetworkInterfacesFinder.Find">
            <summary>
            Returns the current set of <see cref="T:System.Net.IPAddress"/> that are connected.
            </summary>
            <returns>An array of <see cref="T:System.Net.IPAddress"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.Network.NetworkInterfacesChangedArgs">
            <summary>
            Contains the data associated to changes in the network interfaces.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Network.NetworkInterfacesChangedArgs.#ctor(System.Net.IPAddress[])">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.Network.NetworkInterfacesChangedArgs"/>.
            </summary>
            <param name="ipAddresses">An array of <see cref="T:System.Net.IPAddress"/>.</param>
        </member>
        <member name="P:NpSharp.Framework.Network.NetworkInterfacesChangedArgs.IpAddresses">
            <summary>
            Gets an array with the current connected <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.ErrorCodes">
                    Error Codes
                    @brief Those error codes should be used to identify errors throughout the code,
                            they are in 2 categories, module identification and error code. They should be 'or'ed.
        </member>
        <member name="F:NpSharp.Framework.Np6Messaging.ErrorCodes.Unidentified">
            <summary>
            Error not identified
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_NOWINSOCK" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_NOHOSTNAME" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_NOMULTIHOMEFOUND" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_INVPARAM" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_RESNOTFOUND" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_HOOKEXISTS" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_HOOKNOTFOUND" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_TIMEOUTNOTFOUND" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_SOCKETCREATIONXER" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_CONNECTXER" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_SENDXER" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_RECVXER" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_HEADERXER" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_BODYXER" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_MEMORYAVAIL" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_BINDPORT" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_BINDSOCKET" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_JOINGROUP" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_THREADPOOL" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_SOCKETNAME" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_SOCKETLISTENING" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_SOCKETACCEPT" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_CREATECHANNEL" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_NOTINITIALIZED" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_INSERTRESOURCE" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_NULLHANDLE" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_NULLCONTEXT" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_ISCLOSING" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_DUPLICATE1" -->
        <!-- Badly formed XML comment ignored for member "F:NpSharp.Framework.Np6Messaging.ErrorCodes.NPREMSG_DUPLICATE2" -->
        <member name="T:NpSharp.Framework.Np6Messaging.INp6MessagingControllerFactory">
            <summary>
            A factory responsible for creating instances of <see cref="T:NpSharp.Framework.Np6Messaging.INp6MessagingController"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingControllerFactory.CreateNew">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.Np6Messaging.INp6MessagingController"/>.
            </summary>
            <returns>
            The newly created instance of <see cref="T:NpSharp.Framework.Np6Messaging.INp6MessagingController"/>.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.MessagingException">
            <summary>
            Attempted to set an invalid parameter value
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.MessagingException.ErrorCode">
            <summary>
            Identifies the error
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.MessagingException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.MessagingException.#ctor(NpSharp.Framework.Np6Messaging.ErrorCodes)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">error Code</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.MessagingException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.MessagingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.MessagingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.MessagingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Np6Messaging"/> namespace contains
            interfaces and objects that can be used to interact with the NP6 Messaging integration layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.NpCommand">
            <summary>
            Enum with NP6 commands numbers
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Np6Messaging.NpCommand.ExecuteEcpCommand">
            <summary>
            Defines the command index to execute a eCP command.
            The underlying number must be equal to NP6 command number.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Np6Messaging.NpCommand.ExecuteNpSharpCommand">
            <summary>
            Defines the command index to execute a NpSharp command
            The underlying number must be equal to NP6 command number.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.INp6MessagingController">
            <summary>
            Np6 Messaging interface
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.Initialize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the messaging controller.
            </summary>
            <param name="multiHomebase">Indicates what is the Ip Homebase for Multicast interactions</param>
            <param name="multicastIp">Indicates which Ip is being used for Multicast interactions</param>
            <param name="multicastPort">Indicates which Port is used for Multicast interactions</param>
            <param name="multicastTtl">Indicates what is the Time To Live for Multicast interactions</param>
            <param name="nIsServer">Indicates wether it is a Server</param>
            <param name="nServerPort">Indicates what is the server port</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.Close">
            <summary>
            Close connection.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.SendReceive(System.UInt16,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Sends a message and receives a message back. It waits up to 3000 milliseconds for the response.
            </summary>
            <param name="command">The Message's command</param>
            <param name="sender">The Message's sender</param>
            <param name="receiver">The message's receiver</param>
            <param name="param">The command's parameters</param>
            <param name="message">The message being passed</param>
            <returns>The message in response to the message sent</returns>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.SendReceive(System.Int16,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Sends a message and receives a message back. It waits up to 3000 milliseconds for the response.
            </summary>
            <param name="command">The Message's command</param>
            <param name="sender">The Message's sender</param>
            <param name="receiver">The message's receiver</param>
            <param name="param">The command's parameters</param>
            <param name="message">The message being passed</param>
            <returns>The message in response to the message sent</returns>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.SendReceive(System.UInt16,System.String,System.String,System.Byte[],System.Byte[],System.TimeSpan)">
            <summary>
            Sends a message and receives a message back with a custom timeout.
            </summary>
            <param name="command">The Message's command</param>
            <param name="sender">The Message's sender</param>
            <param name="receiver">The message's receiver</param>
            <param name="param">The command's parameters</param>
            <param name="message">The message being passed</param>
            <param name="timeout">The maximum time, in milliseconds, to wait for the response</param>
            <returns>The message in response to the message sent</returns>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.SendReceive(System.Int16,System.String,System.String,System.Byte[],System.Byte[],System.TimeSpan)">
            <summary>
            Sends a message and receives a message back with a custom timeout.
            </summary>
            <param name="command">The Message's command</param>
            <param name="sender">The Message's sender</param>
            <param name="receiver">The message's receiver</param>
            <param name="param">The command's parameters</param>
            <param name="message">The message being passed</param>
            <param name="timeout">The maximum time, in milliseconds, to wait for the response</param>
            <returns>The message in response to the message sent</returns>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.AddResource(System.String)">
            <summary>
            Adds a Resource to the context
            </summary>
            <param name="resourceName">Resource ShortName</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.AddMsgHandler(System.UInt16,System.String,NpSharp.Framework.Np6Messaging.MsgCallbackEx)">
            <summary>
            Adds a Messaging Handler to the context
            </summary>
            <param name="command">The command Id</param>
            <param name="resourceName">The name of the resource that will handle messages of the provided command.</param>
            <param name="handler">The delegate to handle messages</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.AddMsgHandler(System.Int16,System.String,NpSharp.Framework.Np6Messaging.MsgCallbackEx)">
            <summary>
            Adds a Messaging Handler to the context
            </summary>
            <param name="command">The command Id</param>
            <param name="resourceName">The name of the resource that will handle messages of the provided command.</param>
            <param name="handler">The delegate to handle messages</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.RemoveResource(System.String,System.Boolean)">
            <summary>
            Removes a Resource added to the context
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="annouce">true to announce via multicast</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.RemoveMsgHandler(System.UInt16,System.String)">
            <summary>
            Remove a Messaging Handler added to the context
            </summary>
            <param name="command">Command Id</param>
            <param name="resourceName">The name of the resouce that will stop handling messages of the provided command.</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.RemoveMsgHandler(System.Int16,System.String)">
            <summary>
            Remove a Messaging Handler added to the context
            </summary>
            <param name="command">Command Id</param>
            <param name="resourceName">The name of the resouce that will stop handling messages of the provided command.</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.QueryResourceByType(System.String,System.UInt32)">
            <summary>
            Query for Resources in the network
            </summary>
            <param name="resourceType">Type of resource</param>
            <param name="timeout">Timeout for the messaging</param>
            <returns>Array with all resources found in network</returns>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.MsgCallbackEx">
            <summary>
            Caller back for the SendReceive method.
            </summary>
            <param name="msgDesc">Message being sent.</param>
            <param name="source">Source of the message.</param>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.NpMessage">
            <summary>
            Represents a Message on Messaging Protocol for use to communicate between resources.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.NpMessage.#ctor">
            <summary>
            Instantiate a new NpMessage describing the nature of the message to be sent.
            Important: This constructor is used for deserialization purposes. Do not remove it.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.NpMessage.#ctor(System.Int16,System.Byte[],System.Byte[],System.String)">
            <summary>
            Instantiate a new NpMessage describing the nature of the message to be sent.
            </summary>
            <param name="command">The Command Id for the receiver</param>
            <param name="param">The command parameters</param>
            <param name="payload">The message payload</param>
            <param name="destination">The message's destination</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.NpMessage.#ctor(System.UInt16,System.Byte[],System.Byte[],System.String)">
            <summary>
            Instantiate a new NpMessage describing the nature of the message to be sent.
            </summary>
            <param name="command">The Command Id for the receiver</param>
            <param name="param">The command parameters</param>
            <param name="payload">The message payload</param>
            <param name="destination">The message's destination</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.NpMessage.#ctor(System.Byte[],System.Byte[],System.String)">
            <summary>
            Instantiate a new NpMessage describing the nature of the message to be sent.
            </summary>
            <param name="param">The command parameters</param>
            <param name="payload">The message payload</param>
            <param name="destination">The message's destination</param>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Payload">
            <summary>
            The message's payload.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Command">
            <summary>
            The Command Id for the resource which will receive the message.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.UCommand">
            <summary>
            The Command Id for the resource which will receive the message.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Param">
            <summary>
            The command parameters to the resource to run it.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Destination">
            <summary>
            The resource which the message will be destined for.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.PayloadTerminationByteSuppressed">
            <summary>
            Gets or sets a flag indicating if the Payload byte array had the termination byte suppressed.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.ParamTerminationByteSuppressed">
            <summary>
            Gets or sets a flag indicating if the Payload byte array had the termination byte suppressed.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.ParamEx">
            <summary>
            The message's parameter expanded. It considers the termination flag.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.PayloadEx">
            <summary>
            The message's payload expanded. It considers the termination flag.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.NpMessage.GetBytesWithTerminationByte(System.Byte[])">
            <summary>
            Gets the provided <paramref name="bytes"/> with the termination byte.
            </summary>
            <param name="bytes">An array of <see cref="T:System.Byte"/>.</param>
            <returns>A copy of the provided <paramref name="bytes"/>, with the termination byte.</returns>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IExtendedPersistenceQueryable`1">
            <summary>
            Extends the behavior of <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>
            </summary>
            <typeparam name="T">The generic type to deal within the operations of this interface.</typeparam>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IExtendedPersistenceQueryable`1.WrappedQuery">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryable`1"/> wrapped by this <see cref="T:NpSharp.Framework.Persistence.IExtendedPersistenceQueryable`1"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.EncryptionAlgorithm">
            <summary>
            The encryption algorithm to be used.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Persistence.EncryptionAlgorithm.AES">
            <summary>
            Indicates that the Advanced Encryption Standard (AES) algorithm should be used to encrypt data.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Persistence.EncryptionAlgorithm.DES">
            <summary>
            Indicates that the Data Encryption Standard (DES) algorithm should be used to encrypt data.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Persistence.EncryptionAlgorithm.RC2">
            <summary>
            Indicates that the Rivest Cipher 2 (RC2) algorithm should be used to encrypt data.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Persistence.EncryptionAlgorithm.TripleDES">
            <summary>
            Indicates that the Triple Data Encryption Standard (3DES) algorithm should be used to encrypt data.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IAsyncAdvancedSessionOperations">
            <summary>
            Exposes advanced async session operations.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IAsyncAdvancedSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind
            the session back would fail and raise an <see cref="T:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.ISyncAdvancedSessionOperations">
            <summary>
            Exposes advanced synchronous session operations.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.ISyncAdvancedSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind
            the session back would fail and raise an <see cref="T:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.ISyncAdvancedSessionOperations.Stream``1(System.Linq.IQueryable{``0})">
            <summary>
            Stream the results on the query to the client, converting them to CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called.
            </summary>
            <remarks>
            This should only be used with queries with the index specified. Queries that don't have an index already created will throw exception.
            </remarks>
            <param name="query">The instance of <see cref="T:System.Linq.IQueryable`1"/> to be streamed.</param>
            <typeparamref name="T">The generic type within the <paramref name="query"/>.</typeparamref>
            <returns>An instance of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceEncryptionAttribute">
            <summary>
            Indicates that a plugin requires database encryption.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceEncryptionAttribute.EncryptionKey">
            <summary>
            Gets or sets the encryption key to be used when encrypting the database.
            This property has to be set with a string with minimum length of 8.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceEncryptionAttribute.EncryptionAlgorithm">
            <summary>
            Gets or sets the <see cref="P:NpSharp.Framework.Persistence.PersistenceEncryptionAttribute.EncryptionAlgorithm"/> to be used when encrypting the database.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceReplication">
            <summary>
            Specifies the persistence replication mode for a given plugin. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Persistence.PersistenceReplication.Mode">
            <summary>
            The specified <see cref="T:NpSharp.Framework.Persistence.PersistenceReplicationMode"/> for this <see cref="T:NpSharp.Framework.Persistence.PersistenceReplication"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceReplication.#ctor(NpSharp.Framework.Persistence.PersistenceReplicationMode)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Persistence.PersistenceReplication"/> with the provided <paramref name="mode"/>.
            </summary>
            <param name="mode"></param>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceReplicationMode">
            <summary>
            Enumeration of available modes for <see cref="T:NpSharp.Framework.Persistence.PersistenceReplication"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Persistence.PersistenceReplicationMode.AllNodes">
            <summary>
            Replicate to all NpSharp Instances.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.EscapeQueryOptions">
            <summary>
            Defines the valid escape query options.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceKeyTypeException">
            <summary>
            Exception thrown when the entity's key property is not of the type <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceKeyTypeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.Persistence.PersistenceKeyTypeException"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceKeyTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.Persistence.PersistenceKeyTypeException"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceKeyTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.Persistence.PersistenceKeyTypeException"/>.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceKeyTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.Persistence.IAsyncPersistenceSession">
            <summary>
            Represents a short-lived asynchronous persistence session.
            The persistence session implements the "unit-of-work" pattern.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IAsyncPersistenceSession.Advanced">
            <summary>
            Gets an instance of <see cref="T:NpSharp.Framework.Persistence.IAsyncAdvancedSessionOperations"/> of this <see cref="T:NpSharp.Framework.Persistence.IAsyncPersistenceSession"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.Query``1">
            <summary>
            Dynamically queries the database using LINQ
            </summary>
            <typeparam name="T">Collection to query</typeparam>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.QueryMapReduce``2(NpSharp.Framework.Persistence.PersistenceIndexDefinition{``0,``1})">
            <summary>
            Dynamically queries a database map-reduce index using LINQ
            </summary>
            <typeparam name="T">Index collection type</typeparam>
            <typeparam name="TReduceResult">type of the reduce result</typeparam>
            <param name="indexDefinition">map-reduce index definition</param>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.StoreAsync(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>async task</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.StoreAsync(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity with the specified id.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The entity unique id.</param>
            <returns>async task</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion.
            The entity will be deleted when <see cref="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.SaveChangesAsync"/> is called.
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.DeleteById(System.String)">
            <summary>
            Marks the specified entity ID for deletion
            </summary>
            <param name="id">the id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.LoadAsync``1(System.String)">
            <summary>
            Loads the entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids. 
            </summary>
            <typeparam name="T">document type</typeparam>
            <param name="ids">document ids</param>
            <returns>entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Loads entities with the given ID prefix
            </summary>
            <typeparam name="T">type of entity</typeparam>
            <param name="keyPrefix">ID prefix</param>
            <param name="start">optional number of entities to skip</param>
            <param name="pageSize">max number of entities to retrieve (defaults to 25)</param>
            <param name="exclude">optional ID wild card filtering pattern to exclude</param>
            <returns>array of entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.SaveChangesAsync">
            <summary>
            Saves all the changes performed on this session.
            </summary>
            <returns>async task</returns>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceKeyAttribute">
            <summary>
            Defines that the property will be a key for the entity.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.SearchOptions">
            <summary>
            Defines the search options (operators).
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Persistence"/> namespace contains
            interfaces and objects that can be used to interact with the NpSharp Persistence layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IndexedAttribute">
            <summary>
            Marks an entity property as indexed in the database.
            Note that the entity containing this property MUST be annotated with the <see cref="T:NpSharp.Framework.Persistence.EntityAttribute"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1">
            <summary>
            Persistence component query interface
            </summary>
            <typeparam name="T">entity type</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Statistics(NpSharp.Framework.Persistence.IPersistenceQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records.
            Note that only persistence component queries are accepted here, otherwise an exception is thrown.
            </summary>
            <param name="stats">output statistics</param>
            <returns>persistence component query (for fluent calls)</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns>persistence component query (for fluent calls)</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns>persistence component query (for fluent calls)</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Search(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Decimal,NpSharp.Framework.Persistence.SearchOptions,NpSharp.Framework.Persistence.EscapeQueryOptions)">
            <summary>
            Dynamically searches the database using full-text search and LINQ
            </summary>
            <typeparam name="T">Index collection type</typeparam>
            <param name="fieldExpression">field expression</param>
            <param name="searchTerms">search terms</param>
            <param name="boost"></param>
            <param name="searchOptions">search options</param>
            <param name="escapeQueryOptions">escape query options</param>
            <returns>The result of the query</returns>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IPersistenceQueryStatistics">
            <summary>
            Statistics about a persistence component query.
            Such as how many records match the query.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.IsStale">
            <summary>Whatever the query returned potentially stale results</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.DurationMilliseconds">
            <summary>The duration of the query _server side_</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.TotalResults">
            <summary>Total count of the results that matched the query</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.SkippedResults">
            <summary>Number of skipped results</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.Timestamp">
            <summary>The time when the query results were unstale.</summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.EntityAttribute">
            <summary>
            Marks a class as a persistent entity, which can be stored and queried using the persistence API.
            Note that using this attribute is only required if your entity has other persistence
            meta-data attributes, such as the the <see cref="T:NpSharp.Framework.Persistence.IndexedAttribute"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceIndexDefinition">
            <summary>
            Abstract base class for PersistenceIndexDefinition
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceIndexDefinition.#ctor(System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="indexDocumentType">Entity document type</param>
            <param name="indexReduceResultType">Reduce result type</param>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition.IndexName">
            <summary>
            Optional index name (the default will be the class name).
            Note that this will be automatically prefixed by the plugin namespace.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition.IndexDocumentType">
            <summary>
            Entity document type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition.IndexReduceResultType">
            <summary>
            Reduce result type
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2">
            <summary>
            Represents a persistence map-reduce index definition
            </summary>
            <typeparam name="TDocument">Entity document type</typeparam>
            <typeparam name="TReduceResult">Reduce result type</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.Map">
            <summary>
            Index "Map" function
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.Reduce">
            <summary>
            Optional index "Reduce" function
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.Indexes">
            <summary>
            Optional index for "Search" function.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceIndexDefinition`1">
            <summary>
            Represents a simple persistence index definition
            </summary>
            <typeparam name="TDocument">entity document type</typeparam>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IPersistenceSession">
            <summary>
            Represents a short-lived persistence session.
            The persistence session implements the "unit-of-work" pattern.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceSession.Advanced">
            <summary>
            Gets an instance of <see cref="T:NpSharp.Framework.Persistence.ISyncAdvancedSessionOperations"/> of this <see cref="T:NpSharp.Framework.Persistence.IPersistenceSession"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Query``1">
            <summary>
            Dynamically queries the database using LINQ
            </summary>
            <typeparam name="T">Collection to query</typeparam>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.QueryMapReduce``2(NpSharp.Framework.Persistence.PersistenceIndexDefinition{``0,``1})">
            <summary>
            Dynamically queries a database map-reduce index using LINQ
            </summary>
            <typeparam name="T">Index collection type</typeparam>
            <typeparam name="TReduceResult">type of the reduce result</typeparam>
            <param name="indexDefinition">map-reduce index definition</param>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Search``1(NpSharp.Framework.Persistence.PersistenceIndexDefinition{``0})">
            <summary>
            Dynamically searches the database using full-text search and LINQ
            </summary>
            <typeparam name="T">Index collection type</typeparam>
            <param name="indexDefinition">index definition</param>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Store(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Store(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity with the specified id.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The entity unique id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion.
            The entity will be deleted when <see cref="M:NpSharp.Framework.Persistence.IPersistenceSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.DeleteById(System.String)">
            <summary>
            Marks the specified entity ID for deletion
            </summary>
            <param name="id">the id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Load``1(System.String)">
            <summary>
            Loads the entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids. 
            </summary>
            <typeparam name="T">document type</typeparam>
            <param name="ids">document ids</param>
            <returns>entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.LoadStartingWith``1(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Loads entities with the given ID prefix
            </summary>
            <typeparam name="T">type of entity</typeparam>
            <param name="keyPrefix">ID prefix</param>
            <param name="matches">optional ID wildcard filtering pattern match (both ? and * are allowed wildcards)</param>
            <param name="start">optional number of entities to skip</param>
            <param name="pageSize">max number of entities to retrieve (defaults to 25)</param>
            <param name="exclude">optional ID wild card filtering pattern to exclude</param>
            <returns>array of entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.SaveChanges">
            <summary>
            Saves all the changes performed on this session.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginInformation">
            <summary>
            Contains details of a plug-in available in the NP#.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginInformation.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PluginInformation"/> with empty data.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginInformation.#ctor(NpSharp.Framework.PluginDescriptor)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PluginInformation"/>
            with data from the provided <paramref name="pluginDescriptor"/>.
            </summary>
            <param name="pluginDescriptor">
            An instance of <see cref="T:NpSharp.Framework.PluginDescriptor"/> where the information will be extracted from.
            </param>
        </member>
        <member name="P:NpSharp.Framework.PluginInformation.Name">
            <summary>
            Gets or sets the name of the plug-in being represented by this <see cref="T:NpSharp.Framework.PluginInformation"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginInformation.Version">
            <summary>
            Gets or sets the <see cref="P:NpSharp.Framework.PluginInformation.Version"/>
            of the plug-in being represented by this <see cref="T:NpSharp.Framework.PluginInformation"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginIsolationStrategy">
            <summary>
            Contains strategies to be used with the <see cref="T:NpSharp.Framework.RequiresProcessIsolationAttribute"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.PluginIsolationStrategy.ById">
            <summary>
            Isolates plug-in instances by their internal instance identification.
            This makes every instance of such plug-in to run in a different process,
            isolated from every other instance of the same plug-in and
            from every other different plug-in being executed.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.PluginIsolationStrategy.ByName">
            <summary>
            Isolates plug-in instances by their short name.
            This makes every instance of such plug-in to share the same unique process.
            When using this strategy, every instance of plug-in named as "SomePlugin",
            regardless of their node name; logical name; or signature.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ProductInformation">
            <summary>
            Contains details of the NP# product.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ProductInformation.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.ProductInformation"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductInformation.ProductVersion">
            <summary>
            Gets or sets the <see cref="T:System.Version"/> of the NP# Product.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductInformation.MicrokernelVersion">
            <summary>
            Gets or sets the <see cref="T:System.Version"/> of the NP# Microkernel.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductInformation.Plugins">
            <summary>
            Gets or sets a sequence of <see cref="T:NpSharp.Framework.PluginInformation"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductInformation.ProductBundleVersion">
            <summary>
            Gets or sets the <see cref="T:System.Version"/> of the SmartUpdate.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductInformation.InstanceName">
            <summary>
            Gets or sets the Instance Name
            </summary>
        </member>
        <member name="T:NpSharp.Framework.QueryableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Linq.IQueryable`1"/> instances.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.#cctor">
            <summary>
            Static constructor for <see cref="T:NpSharp.Framework.QueryableExtensions"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously retrieves a <see cref="T:System.Collections.Generic.IList`1"/> of results for a <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be enumerated. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with an instance of <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously verifies if a given <see cref="T:System.Linq.IQueryable`1"/> contains any element.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be verified. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with true if the <paramref name="source"/> contains elements.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously verifies if a given <see cref="T:System.Linq.IQueryable`1"/> contains any element matching an expression.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be verified. </param>
            <param name="predicate">An instance of <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> that receives an instance of <see cref="!:T"/> and returns <see cref="T:System.Boolean"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with true if the <paramref name="source"/> contains elements that matches the <paramref name="predicate"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously counts the quantity of elements in a given <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the quantity of elements into the <paramref name="source"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously counts the quantity of elements in a given <see cref="T:System.Linq.IQueryable`1"/> matching an expression.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="predicate">An instance of <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> that receives an instance of <see cref="!:T"/> and returns <see cref="T:System.Boolean"/>.</param>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be counted. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the quantity of elements into the <paramref name="source"/> matching the <paramref name="predicate"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously retrieves the first elements in a given <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the first element found into the <paramref name="source"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the sequence is empty or the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously retrieves the first elements in a given <see cref="T:System.Linq.IQueryable`1"/> matching an expression.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="predicate">An instance of <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> that receives an instance of <see cref="!:T"/> and returns <see cref="T:System.Boolean"/>.</param>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the first element found into the <paramref name="source"/> matching the <paramref name="predicate"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the sequence is empty or the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously retrieves the first elements in a given <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the first element found into the <paramref name="source"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously retrieves the first elements in a given <see cref="T:System.Linq.IQueryable`1"/> matching an expression.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="predicate">An instance of <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> that receives an instance of <see cref="!:T"/> and returns <see cref="T:System.Boolean"/>.</param>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the first element found into the <paramref name="source"/> matching the <paramref name="predicate"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously retrieves a single element in a given <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the single element found into the <paramref name="source"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the sequence is empty, contains more than one element, or the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously retrieves a single element in a given <see cref="T:System.Linq.IQueryable`1"/> matching an expression.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="predicate">An instance of <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> that receives an instance of <see cref="!:T"/> and returns <see cref="T:System.Boolean"/>.</param>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the single element found into the <paramref name="source"/> matching the <paramref name="predicate"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the sequence is empty, contains more than one element, or the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously retrieves a single element in a given <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with the single element found into the <paramref name="source"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the sequence is empty, contains more than one element, or the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously retrieves a single element in a given <see cref="T:System.Linq.IQueryable`1"/> matching an expression.
            </summary>
            <typeparam name="T"> The type of the elements of source. </typeparam>
            <param name="predicate">An instance of <see cref="T:System.Linq.Expressions.Expression`1"/> of <see cref="T:System.Func`2"/> that receives an instance of <see cref="!:T"/> and returns <see cref="T:System.Boolean"/>.</param>
            <param name="source"> The instance of <see cref="T:System.Linq.IQueryable`1"/> that contains the elements to be searched. </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> with a single element found into the <paramref name="source"/> matching the <paramref name="predicate"/>.</returns>
            <remarks>
            Only <see cref="T:System.Linq.IQueryable`1"/> types that are implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/> are supported.
            </remarks>
            <exception cref="T:System.ArgumentException"> Throws whenever the <paramref name="source"/> is null. </exception>
            <exception cref="T:System.InvalidOperationException"> Throws whenever the sequence is empty, contains more than one element, or the <paramref name="source"/> is not implemented either by IRavenQueryable or <see cref="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetToListAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'ToListAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetAnyAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'AnyAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetAnyAsyncWithExpressionMethodInfo">
            <summary>
            Looks for an instance of the method 'AnyAsync' that contains an expression as argument in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetCountAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'CountAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetCountAsyncWithExpressionMethodInfo">
            <summary>
            Looks for an instance of the method 'CountAsync' that contains an expression as argument in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetFirstAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'FirstAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetFirstAsyncWithExpressionMethodInfo">
            <summary>
            Looks for an instance of the method 'FirstAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetFirstOrDefaultAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'FirstOrDefaultAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetFirstOrDefaultAsyncWithExpressionMethodInfo">
            <summary>
            Looks for an instance of the method 'FirstOrDefaultAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetSingleAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'SingleAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetSingleAsyncWithExpressionMethodInfo">
            <summary>
            Looks for an instance of the method 'SingleAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetSingleOrDefaultAsyncMethodInfo">
            <summary>
            Looks for an instance of the method 'SingleOrDefaultAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetSingleOrDefaultAsyncWithExpressionMethodInfo">
            <summary>
            Looks for an instance of the method 'SingleOrDefaultAsync' in the Raven.Client.Lightweight assembly.
            </summary>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.GetMethod(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns the first method in the LinqExtensions class in the Raven.Client.Lightweight assembly that matches the provided name and arguments types.
            </summary>
            <param name="methodName">The name of the desired method.</param>
            <param name="argumentsTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Type"/> with the types of the arguments that should be matched on the method arguments.</param>
            <remarks>The <paramref name="argumentsTypes"/> should be on the exact same order as they appear on the method to be retrieved.</remarks>
            <returns>An instance of <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.QueryableExtensions.TypeComparer">
            <summary>
            Implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.TypeComparer.Equals(System.Type,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.QueryableExtensions.TypeComparer.GetHashCode(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PeripheralPluginTopologyOptions">
            <summary>
            <see cref="T:NpSharp.Framework.PluginTopologyOptions"/> derived class, with options for peripheral plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PeripheralPluginTopologyOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.PeripheralPluginTopologyOptions"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PeripheralPluginTopologyOptions.Parameters">
            <summary>
            A <see cref="T:System.Collections.Generic.IDictionary`2"/> containing elements with a name and value for a peripheral parameter.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginTopologyOptions">
            <summary>
            Defines options based on topology data regarding the way the plugin should work
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginTopologyOptions.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:NpSharp.Framework.PluginTopologyOptions"/>
            </summary>
            <param name="shouldRunWhenDemoted">(optional) Indicates if a plugin should run even when the instance is working as demoted failover</param>
            <param name="shouldReplicateWhenFailover">(optional) Indicates if a plugin should replicate its data when a master-failover relationship is detected</param>
            <param name="loadSingleInstance">(optional) Indicates if a plugin should have only one instance created, whatever the quantity of times it's added on topology</param>
        </member>
        <member name="P:NpSharp.Framework.PluginTopologyOptions.ShouldRunWhenDemoted">
            <summary>
            Indicates if a plugin should run even when the instance is working as demoted failover
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginTopologyOptions.ShouldReplicateWhenFailover">
            <summary>
            Indicates if a plugin should replicate its data when a master-failover relationship is detected
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginTopologyOptions.LoadSingleInstance">
            <summary>
            Indicates if a plugin should have only one instance created, whatever the quantity of times it's added on topology
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginTopologyOptions.ServiceLogicalName">
            <summary>
            Gets or sets the name of the logical name of the Service running the plugin
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginTopologyOptions.Alias">
            <summary>
            Gets or sets the plugin alias, a business friendly name
            </summary>
        </member>
        <member name="T:NpSharp.Framework.RequiresProcessIsolationAttribute">
            <summary>
            Decorating the plugin entry class with this attribute
            makes NP# isolate instances of this plugin in a separated process.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.RequiresProcessIsolationAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.RequiresProcessIsolationAttribute"/>.
            It uses <see cref="F:NpSharp.Framework.PluginIsolationStrategy.ByName"/> strategy by default.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.RequiresProcessIsolationAttribute.#ctor(NpSharp.Framework.PluginIsolationStrategy)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.RequiresProcessIsolationAttribute"/>
            with the provided <paramref name="pluginIsolationStrategy"/>.
            </summary>
            <param name="pluginIsolationStrategy"></param>
        </member>
        <member name="P:NpSharp.Framework.RequiresProcessIsolationAttribute.PluginIsolationStrategy">
            <summary>
            Gets the <see cref="T:NpSharp.Framework.PluginIsolationStrategy"/>
            to be used when deciding how to isolate a plug-in decorated
            with this <see cref="T:NpSharp.Framework.RequiresProcessIsolationAttribute"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContractDescriptor">
            <summary>
            Describes a Service Contract.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContractDescriptor.ServiceContractTypeDescriptor">
            <summary>
            Gets or sets the <see cref="T:NpSharp.Framework.TypeDescriptor"/>
            that describes the type of the Service Contract described by this <see cref="T:NpSharp.Framework.ServiceContractDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContractDescriptor.ServiceMetadataAttributes">
            <summary>
            Gets or sets the sequence of <see cref="T:NpSharp.Framework.ServiceContracts.ServiceMetadataAttribute"/>
            associated to the Service Contract described by this <see cref="T:NpSharp.Framework.ServiceContractDescriptor"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContractDescriptor.op_Implicit(System.Type)~NpSharp.Framework.ServiceContractDescriptor">
            <summary>
            Converts the provided <paramref name="type"/> to a <see cref="T:NpSharp.Framework.ServiceContractDescriptor"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> of the Service Contract to be converted.
            </param>
        </member>
        <member name="M:NpSharp.Framework.ServiceContractDescriptor.op_Implicit(NpSharp.Framework.TypeDescriptor)~NpSharp.Framework.ServiceContractDescriptor">
            <summary>
            Converts the provided <paramref name="descriptor"/> to a <see cref="T:NpSharp.Framework.ServiceContractDescriptor"/>.
            </summary>
            <param name="descriptor">
            The <see cref="T:NpSharp.Framework.TypeDescriptor"/> of the Service Contract to be converted.
            </param>
        </member>
        <member name="M:NpSharp.Framework.ServiceContractDescriptor.op_Implicit(NpSharp.Framework.ServiceContractDescriptor)~NpSharp.Framework.TypeDescriptor">
            <summary>
            Implicitly extracts the <see cref="P:NpSharp.Framework.ServiceContractDescriptor.ServiceContractTypeDescriptor"/> from the provided <paramref name="descriptor"/>.
            </summary>
            <param name="descriptor">
            The <see cref="T:NpSharp.Framework.ServiceContractDescriptor"/> to have its <see cref="P:NpSharp.Framework.ServiceContractDescriptor.ServiceContractTypeDescriptor"/> extracted.
            </param>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.ServiceMetadataAttribute">
            <summary>
            Represents the base class for custom attributes for Service Metadata.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceMetadataAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.ServiceContracts.ServiceMetadataAttribute"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.WebServiceSuffixAttribute">
            <summary>
            Indicates that an specific Service Contract contains a URL Endpoint Suffix.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.WebServiceSuffixAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.ServiceContracts.WebServiceSuffixAttribute"/>
            with the provided <paramref name="suffix"/>.
            </summary>
            <param name="suffix">
            The suffix to be appended to the URL Service Endpoint.
            This value cannot be <c>null</c> or consisted exclusively of white-space characters.
            </param>
        </member>
        <member name="P:NpSharp.Framework.ServiceContracts.WebServiceSuffixAttribute.Suffix">
            <summary>
            Gets the suffix to be appended to the URL Service Endpoint.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.ServiceContracts"/> namespace contains all the
            service contract interfaces defined by the NpSharp framework.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata">
            <summary>
            Metadata of methods implemented in a <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> 
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata.Name">
            <summary>
            Method Name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata.UriTemplate">
            <summary>
            UriTemplate value of the WebGet WebInvoke attribute
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata.HttpVerb">
            <summary>
            Http verb (GET, POST, PUT, etc)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata.WrappedRequest">
            <summary>
            Whether the BodyStyle property of WebInvoke is Wrapped/WrappedRequest
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.NpSharpServiceMetadata">
            <summary>
            This class encapsulates a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ServiceContracts.NpSharpServiceMetadata.Operations">
            <summary>
            This <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata"/> 
            contains metadata such as method name, http verbs (GET, POST, etc) 
            and other detais of all methods implemented by a specific <see cref="T:NpSharp.Framework.ServiceContracts.IService"/> in a plugin.
            To see all operations metadata retrieved, see <see cref="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.ServiceBase">
            <summary>
            Base class for all plugins that implement a service
            </summary>
            <seealso cref="T:NpSharp.Framework.IPlugin"/>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.ServiceContracts.ServiceBase"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceBase.Ping">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceBase.GetNpSharpServiceMetadata">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceBase.CreateNpSharpOperationMetadata(System.Reflection.MethodInfo)">
            <summary>
            Creates an instance of <see cref="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata"/> with metadata of a specific method defined in its service contract.
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> of the current method</param>
            <returns>An instance of <see cref="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata"/></returns>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceBase.HasWrappedBodyStyle(System.ServiceModel.Web.WebInvokeAttribute)">
            <summary>
            Checks if the provided <paramref name="webInvokeAttribute"/> has the <see cref="P:System.ServiceModel.Web.WebInvokeAttribute.BodyStyle"/> set to
            <see cref="F:System.ServiceModel.Web.WebMessageBodyStyle.Wrapped"/> or <see cref="F:System.ServiceModel.Web.WebMessageBodyStyle.WrappedRequest"/>.
            </summary>
            <param name="webInvokeAttribute">An instance of <see cref="T:System.ServiceModel.Web.WebInvokeAttribute"/>.</param>
            <returns><c>true</c> if the <see cref="P:System.ServiceModel.Web.WebInvokeAttribute.BodyStyle"/> is set to <see cref="F:System.ServiceModel.Web.WebMessageBodyStyle.Wrapped"/> or <see cref="F:System.ServiceModel.Web.WebMessageBodyStyle.WrappedRequest"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.IService">
            <summary>
            Base contract for all services
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.IService.Ping">
            <summary>
            Checks network connectivity with the service.
            Service implementations should always return true here, since this operation
            is only used to check for network communication state.
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.IService.GetNpSharpServiceMetadata">
            <summary>
            Retrieves the service metadata, such as method name, http verb etc, 
            of all methods defined in the service contract.
            For details about all operations metadata retrieved, see <see cref="T:NpSharp.Framework.ServiceContracts.NpSharpOperationMetadata"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NpSharp.Framework.Telemetry.DisabledTelemetry">
            <summary>
            A implementation of <see cref="T:NpSharp.Framework.Telemetry.ITelemetry"/> to be used when the telemetry is disabled.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Telemetry.DisabledTelemetry.Instance">
            <summary>
            Singleton static instance of <see cref="T:NpSharp.Framework.Telemetry.DisabledTelemetry"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.DisabledTelemetry.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.Telemetry.DisabledTelemetry.ReportMetric(System.String,System.Single,System.String)">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.Telemetry.ITelemetry">
            <summary>
            Exposes methods that can be used by NP# components to register telemetry metrics.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.ITelemetry.IsEnabled">
            <summary>
            Gets whether the telemetry is enabled or not.
            </summary>
            <remarks>
            If this property is set to <c>false</c>,
            any call to <see cref="M:NpSharp.Framework.Telemetry.ITelemetry.ReportMetric(System.String,System.Single,System.String)"/> will return immediately
            without performing any extra operation.
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.Telemetry.ITelemetry.ReportMetric(System.String,System.Single,System.String)">
            <summary>
            Registers a telemetry metric.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that contains the name for the metric being reported.
            </param>
            <param name="value">
            A <see cref="T:System.Single"/> value that represents the quantity to record for the metric being reported.
            </param>
            <param name="unit">
            A <see cref="T:System.String"/> that represents the unit of measurement for the metric being reported.
            </param>
        </member>
        <member name="T:NpSharp.Framework.Telemetry.TelemetryMetric">
            <summary>
            <see cref="T:NpSharp.Framework.Telemetry.TelemetryMetric"/> is a group of data that make sense to be analyzed further.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetric.ComponentName">
            <summary>
            Gets or sets the ComponentName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetric.NodeName">
            <summary>
            Gets or sets the NodeName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetric.LogicalName">
            <summary>
            Gets or sets the LogicalName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetric.Name">
            <summary>
            Gets or sets the metric name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetric.Unit">
            <summary>
            Gets or sets the metric unit
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetric.Values">
            <summary>
            Gets or sets the metric value
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Telemetry.TelemetryMetricMessage">
            <summary>
            A message containing telemetry metric data.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Telemetry.TelemetryMetricMessage.DefaultTopic">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.Telemetry.TelemetryMetricMessage.#ctor">
            <summary>
            Initializes an instance of <see cref="T:NpSharp.Framework.Telemetry.TelemetryMetricMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetricMessage.InstanceName">
            <summary>
            Gets or sets the name of the NP# instance
            that generated this <see cref="T:NpSharp.Framework.Telemetry.TelemetryMetricMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Telemetry.TelemetryMetricMessage.Metrics">
            <summary>
            Gets or sets an instance of <see cref="T:NpSharp.Framework.Telemetry.TelemetryMetric"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Threading.ResettableLazy`1">
            <summary>
            Provides support for lazy initialization with re-evaluation.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Threading.ResettableLazy`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/> class.
            When lazy initialization occurs, the specified initialization function is used.
            </summary>
            <param name="factory">
            The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
        </member>
        <member name="P:NpSharp.Framework.Threading.ResettableLazy`1.Value">
            <summary>
            Gets the lazily initialized value of the current <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/> instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Threading.ResettableLazy`1.IsValueCreated">
            <summary>
            Gets a value that indicates whether a value has been created for this <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/> instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Threading.ResettableLazy`1.Reset">
            <summary>
            Resets the current lazily initialized value of the current <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/> instance,
            making next accesses to <see cref="P:NpSharp.Framework.Threading.ResettableLazy`1.Value"/> produce a new value.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Threading.ResettableLazy`1.VolatileRead(System.Boolean@)">
            <summary>
            Reads the value of the specified field.
            On systems that require it, inserts a memory barrier
            that prevents the processor from reordering memory operations as follows:
            If a read or write appears after this method in the code, the processor cannot move it before this method.
            </summary>
            <param name="location">The field to read.</param>
            <returns>
            The value that was read.
            This value is the latest written by any processor in the computer,
            regardless of the number of processors or the state of processor cache.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Threading.ResettableLazy`1.VolatileWrite(System.Boolean@,System.Boolean)">
            <summary>
            Writes the specified value to the specified field.
            On systems that require it, inserts a memory barrier
            that prevents the processor from reordering memory operations as follows:
            If a read or write appears before this method in the code, the processor cannot move it after this method.
            </summary>
            <param name="location">
            The field where the value is written.
            </param>
            <param name="value">
            The value to write. The value is written immediately so that it is visible to all processors in the computer.
            </param>
        </member>
        <member name="T:NpSharp.Framework.Threading.ResettableLazyExtensions">
            <summary>
            Extension methods for <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Threading.ResettableLazyExtensions.Initialize``1(NpSharp.Framework.Threading.ResettableLazy{``0})">
            <summary>
            Forces the initialization of the provided <paramref name="lazy"/>.
            </summary>
            <typeparam name="T">The type of object produced by the provided <paramref name="lazy"/>.</typeparam>
            <param name="lazy">The <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/> to have it is initialization forced.</param>
            <returns>The value produced by the provided <paramref name="lazy"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.Threading.ResettableLazyExtensions.Reinitialize``1(NpSharp.Framework.Threading.ResettableLazy{``0})">
            <summary>
            Forces the re-initialization of the provided <paramref name="lazy"/>.
            </summary>
            <typeparam name="T">The type of object produced by the provided <paramref name="lazy"/>.</typeparam>
            <param name="lazy">The <see cref="T:NpSharp.Framework.Threading.ResettableLazy`1"/> to have it is re-initialization forced.</param>
            <returns>The value produced by the provided <paramref name="lazy"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.Tracing.EmptyTrace">
            <summary>
            Stub implementation of <see cref="T:NpSharp.Framework.Tracing.ITrace"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Tracing.EmptyTrace.Instance">
            <summary>
            Singleton static instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.EmptyTrace.IsEnabled">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Tracing.EmptyTrace.Write(System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Tracing.ITrace">
            <summary>
            Defines the service responsible for writing tracing information.
            This service is oriented towards outputting a high volume of low-level debug information at real-time without impacting the performance.
            This can be achieved by selectively enabling this service when this kind of information is relevant. See <see cref="P:NpSharp.Framework.Tracing.ITrace.IsEnabled"/> for details.
            
            Anything written using this service will NOT be written into the System Logs files.
            For that purpose, use the <see cref="T:NpSharp.Framework.Logging.ILogger"/> service.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.ITrace.IsEnabled">
            <summary>
            Gets whether the Real-Time trace is enabled.
            </summary>
            <remarks>
            If this property is set to false, any call to the <see cref="M:NpSharp.Framework.Tracing.ITrace.Write(System.String,System.String,System.Int32)"/> method will return immediately.
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.Tracing.ITrace.Write(System.String,System.String,System.Int32)">
            <summary>
            Writes the specified <paramref name="content"/> to the trace output.
            </summary>
            <param name="content">The <see cref="T:System.String"/> to be written.</param>
            <param name="sourceFilePath">The full path of the source file that contains the caller of this method. Should not be set.</param>
            <param name="sourceLineNumber">The line number in the source file at which this method is called. Should not be set.</param>
            <remarks>
            If <see cref="P:NpSharp.Framework.Tracing.ITrace.IsEnabled"/> is set to false, this method returns immediately, without writing any information to the trace output.
            </remarks>
        </member>
        <member name="T:NpSharp.Framework.Tracing.TraceMessage">
            <summary>
            Represents a trace message.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Tracing.TraceMessage.DefaultTopic">
            <summary>
            The Default Topic of this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Tracing.TraceMessage.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/> with the <see cref="P:NpSharp.Framework.InternalServices.PubSub.MessageBase.Topic"/> set to <see cref="F:NpSharp.Framework.Tracing.TraceMessage.DefaultTopic"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.Microkernel">
            <summary>
            The name of the Microkernel that has originally published this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.SourceName">
            <summary>
            The name of the source publishing this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.SourceId">
            <summary>
            The ID of the source publishing this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.TimeStamp">
            <summary>
            The <see cref="T:System.DateTime"/> of when this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/> was published.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.Content">
            <summary>
            The content of this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.SourceFile">
            <summary>
            The full path of the source file that has written this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Tracing.TraceMessage.SourceLineNumber">
            <summary>
            The line number in the source file at which this <see cref="T:NpSharp.Framework.Tracing.TraceMessage"/> was created.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DateTimeExtensions.GetDaysOfWeekFlag(System.DateTime)">
            <summary>
            Returns the <see cref="T:System.DateTime"/> value as a <see cref="T:NpSharp.Framework.DaysOfWeek"/> representation
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value.</param>
            <returns></returns>
        </member>
        <member name="T:NpSharp.Framework.DaysOfWeek">
            <summary>
            Specifies the day of week
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Monday">
            <summary>
            Specifies that the day is monday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Tuesday">
            <summary>
            Specifies that the day is tuesday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Wednesday">
            <summary>
            Specifies that the day is wednesday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Thursday">
            <summary>
            Specifies that the day is thursday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Friday">
            <summary>
            Specifies that the day is friday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Saturday">
            <summary>
            Specifies that the day is saturday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Sunday">
            <summary>
            Specifies that the day is sunday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.All">
            <summary>
            Specifies that all days are valid
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DecimalExtension">
            <summary>
            Extension methods for <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DecimalExtension.ToN2(System.Decimal)">
            <summary>
            Returns the <see cref="T:System.Decimal"/> value as a currency representation.
            (e.g.: 1.654 => 1.65)
            </summary>
            <param name="source">The <see cref="T:System.Decimal"/> value.</param>
            <returns>A <see cref="T:System.String"/> instance representing the <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="T:NpSharp.Framework.IClock">
            <summary>
            Interface used to abstract system clock access (and facilitate unit tests)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IClock.Today">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IClock.Now">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IClock.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InfrastructurePluginAttribute">
            <summary>
            Indicate that the plugin is an "infrastructure plugin".
            Infrastructure plugins are always loaded by the system - they don't need to be configured in the
            topology and are not associated to any Service, Node or Area
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InfrastructurePluginAttribute.#ctor">
            <summary>
            Indicate that the plugin is an "infrastructure plugin".
            Infrastructure plugins are always loaded by the system - they don't need to be configured in the
            topology and are not associated to any Service, Node or Area
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DefaultSystemProperties">
            <summary>
            Contains default system property names and values
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.Debug">
            <summary>
            name of the system property containing the debug mode flag
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.InstanceName">
            <summary>name of the system property containing the current instance name</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.OutputFolder">
            <summary>name of the system property containing the output folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.TopologyFile">
            <summary>name of the system property containing the name of the topology xml file</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DataFolder">
            <summary>name of the system property containing the data folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DatabaseFolder">
            <summary>name of the system property containing the database folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DatabaseBackupFolder">
            <summary>name of the system property containing the database backup folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DatabasePort">
            <summary>name of the system property containing the database TCP/IP port number</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.ExternalDatabaseUrl">
            <summary>
            Name of the System Property containing the External Database URL to be used.
            When set, <see cref="F:NpSharp.Framework.DefaultSystemProperties.DatabaseFolder"/> and <see cref="F:NpSharp.Framework.DefaultSystemProperties.DatabasePort"/> System Properties are ignored.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.HttpPort">
            <summary>
            name of the system property containing the system HTTP port number
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.HttpPrefix">
            <summary>
            name of the system property containing the system HTTP endpoint prefix
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.ConfigFolder">
            <summary>
            name of the system property containing the config folder inside the data folder
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.ConfigFilePattern">
            <summary>
            name of the system property containing the config folder inside the data folder
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MulticastGroup">
            <summary>
            name of the system property containing the multicast group
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MulticastPort">
            <summary>
            name of the system property containing the multicast port
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MulticastAnnounceInterval">
            <summary>
            name of the system property containing the multicast announce interval
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.FailoverForInstance">
            <summary>
            name of the system property containing the remote instance this instance serves as failover
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.EnableManualFailover">
            <summary>
            name of the system property that indicates if the failover should work on manual mode
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.HardwareType">
            <summary>
            name of the system property that specify the hardware type for this instance
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.PluginIsolationStrategy">
            <summary>
            name of the system property that specify the strategy for plugin isolation
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MaxLogFileSize">
            <summary>
            name of the system property that specify the maximum size for log file
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.NumberOfDaysToKeepLogs">
            <summary>
            name of the system property that indicates the number of days to keep application log files
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.KeepDbLogsEnabledOnDirtyShutdownFor">
            <summary>
            Name of the system property that defines the amount of time to keep the database logs enabled on dirty shutdown (in minutes).
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.TimeToKeepDbLogsEnabledAfterStartup">
            <summary>
            Name of the system property that defines the amount of time to keep the database 
            logs level defined on <see cref="F:NpSharp.Framework.DefaultSystemProperties.DbLogsLevel"/> after the startup (in minutes).
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DbLogsLevel">
            <summary>
            Name of the system property that defines the minimum database log level to enable on startup.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MaxDbLogFileSize">
            <summary>
            Name of the system property that defines the maximum size for a single database log file.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MaxDbLogFiles">
            <summary>
            Name of the system property that defines the maximum database log files to keep in disk.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.NumberOfDaysToKeepDbBackups">
            <summary>
            Name of the system property that indicates the number of days to keep database backups.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.EnableDbBackupPurge">
            <summary>
            Name of the system property that indicates whether the database backup purge functionality is enabled or not.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.ProductTestsMode">
            <summary>
            Name of the system property that indicates whether the product test mode is enabled or not.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.TelemetryEnabled">
            <summary>
            Name of the system property that indicates whether the telemetry is enabled or not.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.MessageHubReadPostDataTimeoutInMilliseconds">
            <summary>
            Name of the system property that indicates the message hub post data timeout in milliseconds.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.WaitPromotingFinishToStopTimeoutInSeconds">
            <summary>
            name of the system property that indicates the amount time to wait microkernel promoting before stop microkernel
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.EnableRavenDbLogs">
            <summary>
            name of the system property that indicates if RavenDb Logs should be enabled on startup
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.SyncDatabaseTimeoutInSeconds">
            <summary>
            name of the system property that indicates max time to wait for single database synchronization on instance promotion.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.NpSharpCliCommandLine">
            <summary>
            name of the system property containing the command line to call NpSharp.CLI application.
            </summary>
            <remarks>
                This system property was intended to be used together with WF_Shutdown workflow.
                As we have many possibilities for a shutdown/restart workflow, NpSharp.CLI action will be decided depending on the
                chosen action from the workflow.
                The complete workflow reference is <a href="https://doc.rdisoftware.com/documentation/doc61/index.html?buttonconfiguration_111.html">here</a>. 
            </remarks>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DefaultProperties">
            <summary>list of default system properties</summary>
        </member>
        <member name="T:NpSharp.Framework.IPluginContext">
            <summary>
            Interface for acessing the plugin execution context properties
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPluginContext.InstanceName">
            <summary>
            Name of the microkernel instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPluginContext.NodeName">
            <summary>
            Name of the topological node where this plugin is running (can be null)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPluginContext.ServiceLogicalName">
            <summary>
            Logical name of a service (as defined on the topology) where this plugin is running (can be null)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPluginContext.Alias">
            <summary>
            Gets or sets the plugin alias, a business friendly name
            </summary>
        </member>
        <member name="T:NpSharp.Framework.CustomData">
            <summary>
            Represents a collection of custom data.
            </summary>
            <remarks>this class is NOT thread-safe</remarks>
        </member>
        <member name="M:NpSharp.Framework.CustomData.Get``1(System.String,``0)">
            <summary>
            Gets the converted data associated to the provided <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <param name="key">The data key.</param>
            <param name="defaultValue">default value to return if the key is not found</param>
            <returns>If the <paramref name="key"/> exists, returns its associated converted data; otherwise, returns the default of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidCastException">The stored data could not be converted to <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:NpSharp.Framework.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework"/> namespace contains most basic NpSharp Framework
            definitions, such as the <see cref="T:NpSharp.Framework.IPlugin"/> interface and the <see cref="T:NpSharp.Framework.PluginBase"/> abstract class.<br/>
            It also holds a few extension classes which can be useful for most plugins.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.ElapsedTimeCounter">
            <summary>
            Defines an elapsed time counter.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.ElapsedTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.ElapsedTimeCounter"/>.
            </summary>
            <param name="name">The counter name.</param>
            <param name="help">The counter help text.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.ElapsedTimeCounter.CreateCounterInstance(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.ElapsedTimeCounter.CounterType">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IntegerCounter">
            <summary>
            A Integer Counter <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IntegerCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:NpSharp.Framework.PerfCounters.IntegerCounter"/>
            </summary>        
            <param name="counterName">Counter ShortName</param>
            <param name="help">Counter's help message</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IntegerCounter.CreateCounterInstance(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.IntegerCounter.CounterType">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.Dispose(System.Boolean)">
            <summary>
            Dispose resources.
            </summary>
            <param name="disposing">if <c>true</c> dispose managed resources, otherwise, dispose unmanaged resources.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper"/>.
            </summary>
            <param name="categoryName">The name of the category.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.IncrementBy(System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.SetRaw(System.Int64,System.String,System.String)">
            <summary>
            Sets the raw value of a performance counter
            </summary>
            <param name="value">Raw value to set</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>        
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.SetAvg(System.Int64,System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance">
            <summary>
            Defines an elapsed time counter instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance"/>.
            </summary>
            <param name="instanceName">The name of the counter instance.</param>
            <param name="counterName">The name of the counter.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance.Register">
            <summary>
            Registers the current elapsed ticks in the performance counter instance
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.NamespaceDoc">
            <summary>
            Contains internal framework objects NpSharp Perfomance Counters layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper">
            <summary>
            Wraps some aspects of Windows Performance Counter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper.IncrementBy(System.Int64,System.String,System.String)">
            <summary>
            It will increment by a value if the counter exists.
            </summary>
            <param name="value">Value to increment by</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>        
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper.SetAvg(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            It will set an average value calculated by the totalTime / samples if counter exists.
            </summary>
            <param name="totalTime">Total elapsed time</param>
            <param name="samples">Quantity of samples collected</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper.SetRaw(System.Int64,System.String,System.String)">
            <summary>
            Sets the raw value of a performance counter
            </summary>
            <param name="value">Raw value to set</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>        
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance">
            <summary>
            An average timer counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.AvgTimer"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes <see cref="T:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance"/> class.
            </summary>
            <param name="name">Instance ShortName</param>
            <param name="counterName">Counter ShortName</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance.SetAvg(System.Int64,System.Int32)">
            <summary>
            Set a average of totalTime / sample.
            </summary>
            <param name="totalTime">Total elapsed time</param>
            <param name="samples">Number of samples measured.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.CounterInstance">
            <summary>
            Counter Instance for a Performance Counter
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.CounterInstance.Name">
            <summary>
            Gets the name of the counter instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.CounterInstance.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.CounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.CounterInstance"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="counterName">The name of the counter.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance">
            <summary>
            A integer counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes <see cref="T:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance"/> class.
            </summary>
            <param name="name"></param>
            <param name="counterName"></param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance.IncrementBy(System.Int64)">
            <summary>
            Increment actual counter value by specified value.
            </summary>
            <param name="value">Value to increment the actual counter value.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter">
            <summary>
            Performance Counter base.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.Name">
            <summary>
            Counter ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.HasBase">
            <summary>
            If the counter needs a AverageBase to be calculated.
            See: http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.performancecountertype(v=vs.100).aspx
            or <see cref="T:System.Diagnostics.PerformanceCounterType"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.Help">
            <summary>
            Counter help message.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.CounterType">
            <summary>
            Gets the performance counter type
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a <see cref="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter"/> class.
            </summary>
            <param name="name">Counter ShortName</param>
            <param name="hasBase"><see cref="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.HasBase"/></param>
            <param name="help">Counter Help Message</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1">
            <summary>
            Performance Counter base.
            </summary>
            <typeparam name="T">instance type</typeparam>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1.#ctor(System.String,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1.Get(System.String)">
            <summary>
            Returns a counter instance by its instance name.
            </summary>
            <param name="instanceName">The instance name of the counter instance.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1.CreateCounterInstance(System.String)">
            <summary>
            Retrieves a counter instance by its name.
            </summary>
            <param name="instanceName">ShortName of the counter instance.</param>
            <returns>An instance of counter instance.</returns>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.PerfCounterWrapperSelector">
            <summary>
            Select PerfCounter Wrapper based on Windows Identity
            </summary>
        </member>
        <member name="F:NpSharp.Framework.PerfCounters.Internals.PerfCounterWrapperSelector.PerformanceCounter">
            <summary>
            Get a performance counter depended on if user is Administrator
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterElapsedTimeInstance">
            <summary>
            Defines an elapsed time counter instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IPerfCounterElapsedTimeInstance.Register">
            <summary>
            Registers the current elapsed ticks in the performance counter instance
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterAvgInstance">
            <summary>
            An average value counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.IPerfCounterInstance"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IPerfCounterAvgInstance.SetAvg(System.Int64,System.Int32)">
            <summary>
            Set the average value of totalValue / sample.
            </summary>
            <param name="totalValue">Total value</param>
            <param name="samples">Number of samples measured.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterIntegerInstance">
            <summary>
            A integer counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.IPerfCounterInstance"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IPerfCounterIntegerInstance.IncrementBy(System.Int64)">
            <summary>
            Increment actual counter value by specified value.
            </summary>
            <param name="value">Value to increment the actual counter value.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterInstance">
            <summary>
            Represents a performance counter instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.IPerfCounterInstance.Name">
            <summary>
            Gets the name of the counter instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.IPerfCounterInstance.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.AvgTimer">
            <summary>
            An average timer counter. <see cref="F:System.Diagnostics.PerformanceCounterType.AverageTimer32"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.AvgTimer.#ctor(System.String,System.String)">
            <summary>
            Initializes <see cref="T:NpSharp.Framework.PerfCounters.AvgTimer"/> class.
            </summary>
            <param name="counterName">Counter ShortName</param>
            <param name="help">Counters Help Message</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.AvgTimer.CreateCounterInstance(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.AvgTimer.CounterType">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.PerfCounters"/> namespace contains
            interfaces and objects that can be used to interact with the NpSharp Perfomance Counters layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.PerfCounterHolder">
            <summary>
            Class which holds all plugins counters.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.PerfCounterHolder.GetPerfCounters">
            <summary>
            Retrieve the list of performance counters declared on this holder
            </summary>
            <returns>list of performance counters</returns>
        </member>
        <member name="T:NpSharp.Framework.PluginServiceTypeAttribute">
            <summary>
            Marks the plugin with a "service type", which indicates that this plugin should, by default, be loaded
            when the given service is configured on a logical node
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginServiceTypeAttribute.ServiceType">
            <summary>
            Service type
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginServiceTypeAttribute.#ctor(System.String)">
            <summary>
            Marks the plugin with a "service type", which indicates that this plugin should, by default, be loaded
            when the given service is configured on a logical node
            </summary>
            <param name="serviceType">Service type</param>
        </member>
        <member name="T:NpSharp.Framework.PluginTagsAttribute">
            <summary>
            Marks the plugin with one or more "tags", which can be used to filter and classify plugins
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginTagsAttribute.Tags">
            <summary>
            Array of plugin tags
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginTagsAttribute.#ctor(System.String[])">
            <summary>
            Marks the plugin with one or more "tags", which can be used to filter and classify plugins
            </summary>
            <param name="tags">Array of plugin tags</param>
        </member>
        <member name="T:NpSharp.Framework.PluginMetaDataAttribute">
            <summary>
            Base abstract class for plugin meta-data attributes
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginDescriptor">
            <summary>
            Describe all properties of a plugin
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.PluginTypeFullName">
            <summary>
            Type name of the class inheriting from <see cref="T:NpSharp.Framework.PluginBase"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AssemblyFullName">
            <summary>
            ShortName of the assembly containing the plugin implementation
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AssemblyFile">
            <summary>
            File name of the DLL containing the plugin implementation
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.Version">
            <summary>
            Plugin version
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.PrivateFolder">
            <summary>
            ShortName of the plugin "private folder" (the folder containing the plugin DLLs and resources)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AssemblyLocation">
            <summary>
            Gets or sets the full path to the assembly file.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.ShortName">
            <summary>
            Gets or sets the plug-in's short name.
            The short name is determined by the last part of the assembly file name, without extension.
            </summary>
            <example>
            For a plugin assembly file named "Company.Product.MyPlugin.dll", the short name would be "MyPlugin"
            </example>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.ServiceContract">
            <summary>
            Gets or sets the plug-in's service contract.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.ServiceContractDescriptor">
            <summary>
            Gets or sets the plug-in's service contract descriptor.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.HasServiceContract">
            <summary>
            Gets or sets a flag indicating if the plugin has a service contract.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.MetaDataAttributes">
            <summary>
            Gets or sets the meta-data attributes on this plugin instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.PerfCounters">
            <summary>
            Gets or sets the plug-in's performance counters
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.Signature">
            <summary>
            Gets or sets the plug-in's public key token as a hexadecimal string.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.ReferencedAssemblies">
            <summary>
            Gets or sets a sequence of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>
            that represents the references of this <see cref="T:NpSharp.Framework.PluginDescriptor"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AuthorizedReferencedAssemblies">
            <summary>
            Gets or sets a sequence of <see cref="T:NpSharp.Framework.AssemblyDescriptor"/>
            that represents the references of this <see cref="T:NpSharp.Framework.PluginDescriptor"/> and
            were signed with a known key.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.IsLiveReloadEnabled">
            <summary>
            Gets or sets whether the plugin live reload should be enabled.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.IsAuthorized">
            <summary>
            Gets or sets whether the plugin assembly has a valid strong name key
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.Equals(NpSharp.Framework.PluginDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.HasMetaDataAttribute``1">
            <summary>
            Checks of this plugin has the given meta-data attribute
            </summary>
            <typeparam name="T">attribute type</typeparam>
            <returns>true if this metadata attribute is defined for this plugin</returns>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.GetMetaDataAttribute``1">
            <summary>
            Retrieve the first meta-data attribute for the given attribute type, or null if none is found
            </summary>
            <typeparam name="T">attribute type</typeparam>
            <returns>attribute or null</returns>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.GetMetaDataAttributes``1">
            <summary>
            Retrieve all meta-data attributes for the given attribute type
            </summary>
            <typeparam name="T">attribute type</typeparam>
            <returns>attributes</returns>
        </member>
        <member name="T:NpSharp.Framework.ReadOnly">
            <summary>
            Framework constants
            </summary>
        </member>
        <member name="F:NpSharp.Framework.ReadOnly.DefaultPerformanceCounterCategory">
            <summary>
            Category used for performance counters
            </summary>
        </member>
        <member name="F:NpSharp.Framework.ReadOnly.DefaultPerformanceCounterCategoryHelp">
            <summary>
            Category help text used for performance counters
            </summary>
        </member>
        <member name="F:NpSharp.Framework.ReadOnly.DefaultPluginsFolder">
            <summary>
            Default plugins folder
            </summary>
        </member>
        <member name="T:NpSharp.Framework.EnumerableExtension">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates all members of a given IEnumerable type and performs an action for each one
            </summary>
            <typeparam name="T">IEnumerable Type</typeparam>
            <param name="source">Instance of the type</param>
            <param name="action">Method to be executed</param>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts or converts the provided <paramref name="source"/> to a <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be converted.</param>
            <returns>
            The provided <paramref name="source"/> as a <see cref="T:System.Collections.Generic.IList`1"/>;
            or its values enumerated to a <see cref="T:System.Collections.Generic.IList`1"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts or converts the provided <paramref name="source"/> to an <see cref="T:System.Array"/>.
            This method avoids enumerating the provided <paramref name="source"/> if it is already an <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the provided <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of <typeparamref name="T"/>.</param>
            <returns>The provided <paramref name="source"/> enumerated to an <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns distinct elements from a sequence by using the given value selector and default equality comparer to compare values
            </summary>
            <typeparam name="TSource">type of source</typeparam>
            <typeparam name="TKey">type of key</typeparam>
            <param name="source">the source</param>
            <param name="selector">selector used to retrieve distinct values</param>
            <returns>distinct elements</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns distinct elements from a sequence by using the given value selector and default equality comparer to compare values
            </summary>
            <typeparam name="TSource">type of source</typeparam>
            <typeparam name="TKey">type of key</typeparam>
            <param name="source">the source</param>
            <param name="selector">selector used to retrieve distinct values</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or <c>null</c> to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation for the set type.</param>
            <returns>distinct elements</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified <paramref name="separator"/> between each member.
            </summary>
            <typeparam name="T">The type of the members of <paramref name="source"/>.</typeparam>
            <param name="separator">The string to use as a separator.</param>
            <param name="source">A collection that contains the objects to concatenate.</param>
            <returns>
            A string that consists of the members of <paramref name="source"/> delimited by the <paramref name="separator"/> string.
            If <paramref name="source"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.TakeWhileIncludingFirstNonPassingEntry``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns <typeparamref name="T"/> elements from the provided <paramref name="source"/>
            as long as a specified <paramref name="predicate"/> is true,
            including the first element that does not satisfy it.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of elements of the provided <paramref name="source"/>.</typeparam>
            <param name="source">A sequence to return elements from.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements
            from the input sequence that occur at the element
            at which the provided <paramref name="predicate"/> no longer passes.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements from the specified <paramref name="source"/>
            or from the specified <paramref name="defaultSequence"/>
            if the <paramref name="source"/> is empty.
            </summary>
            <typeparam name="T">The type of elements in the provided <paramref name="source"/>.</typeparam>
            <param name="source">The sequence of <typeparamref name="T"/> values to return, in case it is not empty.</param>
            <param name="defaultSequence">The sequence of <typeparamref name="T"/> values to return, in case <paramref name="source"/> is empty.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>
            that contains all the elements from <paramref name="source"/>, if it is not empty;
            otherwise, an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>
            that contains all the elements from <paramref name="defaultSequence"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Intercalate``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes the provided <paramref name="action"/>
            between two consecutive iterations of the provided <paramref name="source"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the elements of the provided <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of <typeparamref name="T"/> values.</param>
            <param name="action">The action to be executed while enumerating the provided <paramref name="source"/>.</param>
            <returns>A sequence of elements of the provided <paramref name="source"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of the provided <paramref name="source"/>.
            </summary>
            <typeparam name="T">
            The <see cref="T:System.Type"/> of the elements of the provided <paramref name="source"/>.
            </typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the specified number of elements
            from the end of the provided <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.ThrowWhen``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Exception})">
            <summary>
            Throws the <see cref="T:System.Exception"/>
            generated by the provided <paramref name="exceptionFactory"/>
            if when an element of the provided <paramref name="source"/>
            passes the provided <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of elements of the provided <paramref name="source"/>.</typeparam>
            <param name="source">The sequence of elements to be checked.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="exceptionFactory">A function used to create an the <see cref="T:System.Exception"/> to be thrown.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the same elements from the provided <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the maximal element of the given <paramref name="source"/>,
            based on the given <paramref name="selector"/>.
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned.
            This overload uses the default comparer for the projected type.
            This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">The type of elements of the provided <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the projected element.</typeparam>
            <param name="source">The sequence to find the maximum <typeparamref name="TSource"/> element.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> to project elements to compare.</param>
            <returns>
            The maximal <typeparamref name="TSource"/> element, according to the provided <paramref name="selector"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is null.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Returns the maximal element of the given <paramref name="source"/>,
            based on the given <paramref name="selector"/>.
            </summary>
            <remarks>
            If more than one element has the maximal projected value, the first
            one encountered will be returned.
            This operator uses immediate execution, but
            only buffers a single result (the current maximal element).
            </remarks>
            <typeparam name="TSource">The type of elements of the provided <paramref name="source"/>.</typeparam>
            <typeparam name="TKey">The type of the projected element.</typeparam>
            <param name="source">The sequence to find the maximum <typeparamref name="TSource"/> element.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> to project elements to compare.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare projected values.</param>
            <returns>
            The maximal <typeparamref name="TSource"/> element, according to the provided <paramref name="selector"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/>, <paramref name="selector"/> or <paramref name="comparer"/> is null.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the provided <paramref name="value"/> in the end of provided <paramref name="source"/>.
            </summary>
            <typeparam name="T">The type of elements of the provided <paramref name="source"/>.</typeparam>
            <param name="source">The sequence whose the provided <paramref name="value"/> will be appended to.</param>
            <param name="value">The <typeparamref name="T"/> value to be appended.</param>
            <returns>
            A sequence that contains every element of the provided <paramref name="source"/>,
            plus the provided <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.NullAsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Treats the provided <paramref name="source"/> as an empty sequence in case it is <c>null</c>.
            </summary>
            <typeparam name="T">The type of elements contained by the provided <paramref name="source"/>.</typeparam>
            <param name="source">A sequence of elements.</param>
            <returns>
            The provided <paramref name="source"/> if it is not <c>null</c>;
            otherwise, an <see cref="M:System.Linq.Enumerable.Empty``1">empty</see> sequence.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1"/>
            class that uses the default equality comparer for the set type,
            contains elements copied from the specified collection,
            and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="source">The collection whose elements are copied to the new set.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" />
            class that uses the specified equality comparer for the set type,
            contains elements copied from the specified collection,
            and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="source">
            The collection whose elements are copied to the new set.
            </param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            implementation to use when comparing values in the set,
            or <see langword="null"/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" />
            implementation for the set type.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.FirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a condition
            or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TArgument">
            The type of the extra element to be passed to the provide <paramref name="predicate"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param>
            <param name="argument">An extra parameter to be passed to the provided <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty
            or if no element passes the test specified by <paramref name="predicate"/>;
            otherwise, the first element in <paramref name="source"/>
            that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.FirstOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,``2,System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a condition
            or a default value if no such element is found.
            </summary>
            <typeparam name="TSource">
            The type of the elements of <paramref name="source"/>.
            </typeparam>
            <typeparam name="TArgument1">
            The type of the extra element to be passed to the provide <paramref name="predicate"/>.
            </typeparam>
            <typeparam name="TArgument2">
            The type of the extra element to be passed to the provide <paramref name="predicate"/>.
            </typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param>
            <param name="argument1">An extra parameter to be passed to the provided <paramref name="predicate"/>.</param>
            <param name="argument2">An extra parameter to be passed to the provided <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            default(<typeparamref name="TSource"/>) if <paramref name="source"/> is empty
            or if no element passes the test specified by <paramref name="predicate"/>;
            otherwise, the first element in <paramref name="source"/>
            that passes the test specified by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``3(System.Collections.Generic.IEnumerable{``0},``2,System.Func{``0,``2,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument">The type of the extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument">The extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``4(System.Collections.Generic.IEnumerable{``0},``2,``3,System.Func{``0,``2,``3,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument1">The first extra argument to <paramref name="selector"/>.</param>
            <param name="argument2">The second extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``5(System.Collections.Generic.IEnumerable{``0},``2,``3,``4,System.Func{``0,``2,``3,``4,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument1">The first extra argument to <paramref name="selector"/>.</param>
            <param name="argument2">The second extra argument to <paramref name="selector"/>.</param>
            <param name="argument3">The third extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``6(System.Collections.Generic.IEnumerable{``0},``2,``3,``4,``5,System.Func{``0,``2,``3,``4,``5,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument1">The first extra argument to <paramref name="selector"/>.</param>
            <param name="argument2">The second extra argument to <paramref name="selector"/>.</param>
            <param name="argument3">The third extra argument to <paramref name="selector"/>.</param>
            <param name="argument4">The fourth extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``7(System.Collections.Generic.IEnumerable{``0},``2,``3,``4,``5,``6,System.Func{``0,``2,``3,``4,``5,``6,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument5">The type of the fifth extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument1">The first extra argument to <paramref name="selector"/>.</param>
            <param name="argument2">The second extra argument to <paramref name="selector"/>.</param>
            <param name="argument3">The third extra argument to <paramref name="selector"/>.</param>
            <param name="argument4">The fourth extra argument to <paramref name="selector"/>.</param>
            <param name="argument5">The fifth extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``8(System.Collections.Generic.IEnumerable{``0},``2,``3,``4,``5,``6,``7,System.Func{``0,``2,``3,``4,``5,``6,``7,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument5">The type of the fifth extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument6">The type of the sixth extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument1">The first extra argument to <paramref name="selector"/>.</param>
            <param name="argument2">The second extra argument to <paramref name="selector"/>.</param>
            <param name="argument3">The third extra argument to <paramref name="selector"/>.</param>
            <param name="argument4">The fourth extra argument to <paramref name="selector"/>.</param>
            <param name="argument5">The fifth extra argument to <paramref name="selector"/>.</param>
            <param name="argument6">The sixth extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Select``9(System.Collections.Generic.IEnumerable{``0},``2,``3,``4,``5,``6,``7,``8,System.Func{``0,``2,``3,``4,``5,``6,``7,``8,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
            <typeparam name="TSource">The type of elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the value returned by <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument5">The type of the fifth extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument6">The type of the sixth extra argument to <paramref name="selector"/>.</typeparam>
            <typeparam name="TArgument7">The type of the seventh extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to invoke a transform function on.</param>
            <param name="argument1">The first extra argument to <paramref name="selector"/>.</param>
            <param name="argument2">The second extra argument to <paramref name="selector"/>.</param>
            <param name="argument3">The third extra argument to <paramref name="selector"/>.</param>
            <param name="argument4">The fourth extra argument to <paramref name="selector"/>.</param>
            <param name="argument5">The fifth extra argument to <paramref name="selector"/>.</param>
            <param name="argument6">The sixth extra argument to <paramref name="selector"/>.</param>
            <param name="argument7">The seventh extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result
            of invoking the transform function on each element of <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.SelectMany``3(System.Collections.Generic.IEnumerable{``0},``2,System.Func{``0,``2,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and flattens the resulting sequences into one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
            <typeparam name="TArgument">The type of the extra argument to <paramref name="selector"/>.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <param name="argument">The extra argument to <paramref name="selector"/>.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking
            the one-to-many transform function on each element of the input sequence.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="selector"/> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.ContainsOnly``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Checks if the provided <paramref name="source"/>
            contains only instances of <paramref name="value"/>
            using the <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> <see cref="T:System.Collections.Generic.EqualityComparer`1"/>
            for the <typeparamref name="TSource"/> type.
            </summary>
            <typeparam name="TSource">
            The type of elements contained in the provided <paramref name="source"/>.
            </typeparam>
            <param name="source">A sequence containing the elements to be checked.</param>
            <param name="value">The value to be checked against <paramref name="source"/>.</param>
            <returns>
            <c>true</c> if the provided <paramref name="source"/>
            is not empty and contains only instances of <paramref name="value"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.ContainsOnly``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks if the provided <paramref name="source"/>
            contains only instances of <paramref name="value"/>
            using the provided <paramref name="equalityComparer"/>.
            </summary>
            <typeparam name="TSource">
            The type of elements contained in the provided <paramref name="source"/>.
            </typeparam>
            <param name="source">A sequence containing the elements to be checked.</param>
            <param name="value">The value to be checked against <paramref name="source"/>.</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to be used to compare values.</param>
            <returns>
            <c>true</c> if the provided <paramref name="source"/>
            is not empty and contains only instances of <paramref name="value"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="equalityComparer"/> is null.
            </exception>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument">The type of the extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument">The type of the extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``3(System.Collections.Generic.IEnumerable{``0},``1,``2,System.Func{``0,``1,``2,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument1">The type of the first extra argument to <paramref name="predicate"/>.</param>
            <param name="argument2">The type of the second extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``4(System.Collections.Generic.IEnumerable{``0},``1,``2,``3,System.Func{``0,``1,``2,``3,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument1">The type of the first extra argument to <paramref name="predicate"/>.</param>
            <param name="argument2">The type of the second extra argument to <paramref name="predicate"/>.</param>
            <param name="argument3">The type of the third extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``5(System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,System.Func{``0,``1,``2,``3,``4,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument1">The type of the first extra argument to <paramref name="predicate"/>.</param>
            <param name="argument2">The type of the second extra argument to <paramref name="predicate"/>.</param>
            <param name="argument3">The type of the third extra argument to <paramref name="predicate"/>.</param>
            <param name="argument4">The type of the fourth extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``6(System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,System.Func{``0,``1,``2,``3,``4,``5,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument5">The type of the fifth extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument1">The type of the first extra argument to <paramref name="predicate"/>.</param>
            <param name="argument2">The type of the second extra argument to <paramref name="predicate"/>.</param>
            <param name="argument3">The type of the third extra argument to <paramref name="predicate"/>.</param>
            <param name="argument4">The type of the fourth extra argument to <paramref name="predicate"/>.</param>
            <param name="argument5">The type of the fifth extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``7(System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6,System.Func{``0,``1,``2,``3,``4,``5,``6,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument5">The type of the fifth extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument6">The type of the sixth extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument1">The type of the first extra argument to <paramref name="predicate"/>.</param>
            <param name="argument2">The type of the second extra argument to <paramref name="predicate"/>.</param>
            <param name="argument3">The type of the third extra argument to <paramref name="predicate"/>.</param>
            <param name="argument4">The type of the fourth extra argument to <paramref name="predicate"/>.</param>
            <param name="argument5">The type of the fifth extra argument to <paramref name="predicate"/>.</param>
            <param name="argument6">The type of the sixth extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Where``8(System.Collections.Generic.IEnumerable{``0},``1,``2,``3,``4,``5,``6,``7,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <typeparam name="TArgument1">The type of the first extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument2">The type of the second extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument3">The type of the third extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument4">The type of the fourth extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument5">The type of the fifth extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument6">The type of the sixth extra argument to <paramref name="predicate"/>.</typeparam>
            <typeparam name="TArgument7">The type of the seventh extra argument to <paramref name="predicate"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="argument1">The type of the first extra argument to <paramref name="predicate"/>.</param>
            <param name="argument2">The type of the second extra argument to <paramref name="predicate"/>.</param>
            <param name="argument3">The type of the third extra argument to <paramref name="predicate"/>.</param>
            <param name="argument4">The type of the fourth extra argument to <paramref name="predicate"/>.</param>
            <param name="argument5">The type of the fifth extra argument to <paramref name="predicate"/>.</param>
            <param name="argument6">The type of the sixth extra argument to <paramref name="predicate"/>.</param>
            <param name="argument7">The type of the seventh extra argument to <paramref name="predicate"/>.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements from the input sequence that satisfy the condition.</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.ConcatIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences if the provided <paramref name="condition"/> is <c>true</c>.
            </summary>
            <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
            <param name="first">The first sequence to concatenate.</param>
            <param name="condition">Whether the sequence has to be concatenated.</param>
            <param name="second">The sequence to concatenate to the first sequence.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the concatenated elements of the two input sequences,
            if the provided <paramref name="condition"/> is <c>true</c>;
            otherwise, the first sequence is returned as is.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Any``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``0,``1,System.Boolean})">
            <summary>
            Determines whether any element of a sequence exists or satisfies a condition based on <paramref name="predicate"/> and <paramref name="argument"/>. 
            </summary>
            <typeparam name="TSource">The type of elements contained by the provided <paramref name="source"/></typeparam>
            <typeparam name="TArgument">The type of provided <paramref name="argument"/></typeparam>
            <param name="source">A sequence of elements.</param>
            <param name="argument">An  element to passed to the function <paramref name="predicate"/> </param>
            <param name="predicate">A <see cref="T:System.Func`2"/> to project elements to compare.</param>
            <returns><c>true</c> if the source sequence contains any elements; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:NpSharp.Framework.IPlugin">
            <summary>
            Plugin lifecycle interface.
            This is the main contract for communication between the microkernel
            and the plugin instances.
            
            Plugin implementations should inherit from the <see cref="T:NpSharp.Framework.PluginBase"/> instead.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.CurrentLocale">
            <summary>
            Gets the locale that the plugin is currently operating on (E.g.: "en_US")
            </summary>
            <remarks>If this is null or whitespace, it means to use the "root" (invariant) locale</remarks>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.ConfigurationSections">
            <summary>
            Get the plugin's configuration sections
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.LogTable">
            <summary>
            Get the plugin's log descriptors which will be registered into Microkernel Log Table.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.PerformanceCounterInstances">
            <summary>
            Gets a list of performance counters.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnLoad">
            <summary>
            Called by the microkernel right after the plugin has been instantiated.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnStart">
            <summary>
            Called by the microkernel right before starting the plugin execution.
            The plugin implementation should start operating at this point.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnStop">
            <summary>
            Called by the microkernel right before stopping the plugin execution.
            The plugin implementation should stop operating at this point.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnUnload">
            <summary>
            Called by the microkernel right before unloading the plugin instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.Configure(System.Collections.Generic.IEnumerable{NpSharp.Framework.Configuration.Section})">
            <summary>
            Configure this plugin with the given configuration sections and parameters.
            This method is called before the plugin is started.
            </summary>
            <param name="sections">list of configuration sections</param>
        </member>
        <member name="T:NpSharp.Framework.PluginBase">
            <summary>
            Base class for all plugins to implement from
            </summary>
            <seealso cref="T:NpSharp.Framework.IPlugin"/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.ConfigurationResolver">
            <summary>
            Gets or sets the <see cref="T:NpSharp.Framework.Configuration.IConfigurationResolver"/> to be used.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PluginBase"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.CurrentLocale">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.ConfigurationSections">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.LogTable">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.PerformanceCounterInstances">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.ResolvedSections">
            <summary>
            Gets a sequence of <see cref="T:NpSharp.Framework.Configuration.Section"/>s that were resolved for this <see cref="T:NpSharp.Framework.PluginBase"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnStart">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnStop">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.Configure(System.Collections.Generic.IEnumerable{NpSharp.Framework.Configuration.Section})">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.IsNotCompilerGeneratedNorImported(System.Reflection.MemberInfo)">
            <summary>
            Checks whether the provided <paramref name="member"/>
            is not decorated with <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/>
            and not decorated with <see cref="T:System.ComponentModel.Composition.ImportAttribute"/>.
            </summary>
            <param name="member">An instance of <see cref="T:System.Reflection.MemberInfo"/> to be checked.</param>
            <returns>
            <c>true</c> if the provided <paramref name="member"/> is not compiler generated and not imported;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.IsConfigurationSectionHolder(System.Reflection.FieldInfo)">
            <summary>
            Gets or sets whether the provided <see cref="!:member"/>
            is a <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>
            that is supposed to be initialized.
            </summary>
            <param name="member">An instance of <see cref="T:System.Reflection.FieldInfo"/> to check.</param>
            <returns>
            <c>true</c> if the provided <paramref name="member"/>
            is a <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.IsConfigurationSectionHolder(System.Reflection.PropertyInfo)">
            <summary>
            Gets or sets whether the provided <see cref="!:member"/>
            is a <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>
            that is supposed to be initialized.
            </summary>
            <param name="member">An instance of <see cref="T:System.Reflection.PropertyInfo"/> to check.</param>
            <returns>
            <c>true</c> if the provided <paramref name="member"/>
            is a <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.ToSection(System.Reflection.FieldInfo)">
            <summary>
            Gets the value of the provided <paramref name="member"/>
            as a <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>,
            converting it to its respective <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/>.
            </summary>
            <param name="member">An instance of <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>
            The <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/>
            from the <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>
            extracted from the provided <paramref name="member"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.ToSection(System.Reflection.PropertyInfo)">
            <summary>
            Gets the value of the provided <paramref name="member"/>
            as a <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>,
            converting it to its respective <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/>.
            </summary>
            <param name="member">An instance of <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>
            The <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/>
            from the <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>
            extracted from the provided <paramref name="member"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.GetConfigurationSections">
            <summary>
            Gets a sequence of <see cref="T:NpSharp.Framework.Configuration.Section"/>
            from this current instance of <see cref="T:NpSharp.Framework.PluginBase"/>
            using reflection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of found <see cref="T:NpSharp.Framework.Configuration.Section"/>s.</returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.GetPerformanceCounters">
            <summary>
            Retrieves the <see cref="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter"/>s of this plugin, via reflection
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.StringExtensions">
            <summary>
            Extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.StringExtensions.Fmt(System.String,System.Object[])">
            <summary>
            Format this string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            </summary>
            <param name="formatString">format string</param>
            <param name="args">formatting arguments</param>
            <returns>formatted string</returns>
        </member>
        <member name="M:NpSharp.Framework.StringExtensions.Quotify(System.String)">
            <summary>
            Surrounds the provided <paramref name="str"/> with quotes (<c>"</c>) if they are not present.
            </summary>
            <param name="str">An instance of <see cref="T:System.String"/>.</param>
            <returns>
            The provided <paramref name="str"/> surrounded with quotes (<c>"</c>).
            </returns>
        </member>
        <member name="M:NpSharp.Framework.StringExtensions.ToBase64(System.String)">
            <summary>
            Encodes the provided <paramref name="string"/> using Base64.
            </summary>
            <param name="string">The <see cref="T:System.String"/> to be encoded.</param>
            <returns>The Base64 encoded string.</returns>
        </member>
        <member name="T:NpSharp.Framework.SystemClock">
            <summary>
            Concrete implementation of IClock, which uses the system DateTime
            </summary>
        </member>
        <member name="F:NpSharp.Framework.SystemClock.Instance">
            <summary>
            Singleton instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.SystemClock.Now">
            <inheritdoc />
        </member>
        <member name="P:NpSharp.Framework.SystemClock.Today">
            <inheritdoc />
        </member>
        <member name="P:NpSharp.Framework.SystemClock.UtcNow">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.Time">
            <summary>
            Represents an specific time
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Time.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a Time structure with the given hour, minute and second
            </summary>
            <param name="hour">hour component</param>
            <param name="minute">minute component</param>
            <param name="second">second component</param>
        </member>
        <member name="P:NpSharp.Framework.Time.Hour">
            <summary>
            The Hour of the time
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Time.Minute">
            <summary>
            The Minute of the time
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Time.Second">
            <summary>
            The Second of the time
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Time.Parse(System.String)">
            <summary>
            Returns the Time representation of the <see cref="T:System.String"/> value
            </summary>
            <param name="time">The <see cref="T:System.String"/> value</param>
            <returns>Time structure</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.Equals(NpSharp.Framework.Time)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.CompareTo(NpSharp.Framework.Time)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Implicit(NpSharp.Framework.Time)~System.TimeSpan">
            <summary>
            TimeSpan implicit cast operator
            </summary>
            <param name="time">the time</param>
            <returns>converted value</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Implicit(System.TimeSpan)~NpSharp.Framework.Time">
            <summary>
            TimeSpan implicit cast operator
            </summary>
            <param name="timespan">the timespan</param>
            <returns>converted value</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Equality(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Equality(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Equality(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Inequality(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if different</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Inequality(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if different</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Inequality(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if different</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThan(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThan(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThan(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThanOrEqual(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThanOrEqual(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThanOrEqual(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThan(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThan(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThan(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThanOrEqual(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThanOrEqual(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThanOrEqual(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="T:NpSharp.Framework.TypeDescriptor">
            <summary>
            Describes all properties of a <see cref="T:System.Type"/>, but without referencing the <see cref="T:System.Type"/> itself, so this
            descriptor is serializable across application domains without loading unnecessary assemblies
            </summary>
        </member>
        <member name="P:NpSharp.Framework.TypeDescriptor.Name">
            <summary>
            Type's name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.TypeDescriptor.FullName">
            <summary>
            Type's full name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.TypeDescriptor.AssemblyQualifiedName">
            <summary>
            Type's assembly qualified name
            </summary>
        </member>
        <member name="M:NpSharp.Framework.TypeDescriptor.Equals(NpSharp.Framework.TypeDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.TypeDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.TypeDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.TypeDescriptor.op_Implicit(System.Type)~NpSharp.Framework.TypeDescriptor">
            <summary>
            Implicit cast from <see cref="T:System.Type"/>
            </summary>
            <param name="t">the type</param>
            <returns>the type descriptor</returns>
        </member>
        <member name="M:NpSharp.Framework.TypeDescriptor.op_Equality(NpSharp.Framework.TypeDescriptor,NpSharp.Framework.TypeDescriptor)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a bool</returns>
        </member>
        <member name="M:NpSharp.Framework.TypeDescriptor.op_Inequality(NpSharp.Framework.TypeDescriptor,NpSharp.Framework.TypeDescriptor)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>a bool</returns>
        </member>
        <member name="T:NpSharp.Framework.Utils.LateReadOnly`1">
            <summary>
            A class that wraps the behavior of "popsicle" immutability.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the values being wrapped.</typeparam>
        </member>
        <member name="P:NpSharp.Framework.Utils.LateReadOnly`1.Value">
            <summary>
            Gets the current value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Utils.LateReadOnly`1.IsClosed">
            <summary>
            Gets whether this <see cref="T:NpSharp.Framework.Utils.LateReadOnly`1"/> is closed for mutations.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Utils.LateReadOnly`1.op_Implicit(`0)~NpSharp.Framework.Utils.LateReadOnly{`0}">
            <summary>
            Wraps the provided <paramref name="value"/> into an instance of <see cref="T:NpSharp.Framework.Utils.LateReadOnly`1"/>.
            </summary>
            <param name="value">The value to be wrapped.</param>
            <returns>
            A <see cref="T:NpSharp.Framework.Utils.LateReadOnly`1"/> whose initial <see cref="P:NpSharp.Framework.Utils.LateReadOnly`1.Value"/>
            is set to the provided <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LateReadOnly`1.op_Implicit(NpSharp.Framework.Utils.LateReadOnly{`0})~`0">
            <summary>
            Unwraps the provided <paramref name="lateReadOnly"/>.
            </summary>
            <param name="lateReadOnly">An instance of <see cref="T:NpSharp.Framework.Utils.LateReadOnly`1"/> to be unwrapped.</param>
            <returns>
            The current wrapped value of the provided <paramref name="lateReadOnly"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LateReadOnly`1.TrySet(`0)">
            <summary>
            Tries to set the provided <paramref name="value"/>.
            </summary>
            <param name="value">The new <typeparamref name="T"/> value to be set.</param>
            <returns>
            <c>true</c> if the value could be set, which means this instance is not yet closed for modifications;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LateReadOnly`1.TryCloseWith(`0)">
            <summary>
            Tries to set the provided <paramref name="value"/>
            and to close the current instance for modifications in a single operation.
            </summary>
            <param name="value">The new <typeparamref name="T"/> value to be set.</param>
            <returns>
            <c>true</c> if the value could be set, which means this instance is not yet closed for modifications;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Utils.LocaleComparer">
            <summary>
            Represents a locale comparison operation that uses <see cref="P:System.StringComparer.InvariantCultureIgnoreCase"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Utils.LocaleComparer.Instance">
            <summary>
            Gets an instance of <see cref="T:NpSharp.Framework.Utils.LocaleComparer"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.Equals(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.GetHashCode(System.String)">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.Equals(System.String[],System.String[])">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.GetHashCode(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.IsWhiteSpaceOrLocaleSeparator(System.Char)">
            <summary>
            Checks if the provided <paramref name="char"/>
            is categorized as white space or a locale separator.
            </summary>
            <param name="char">The <see cref="T:System.Char"/> to evaluate.</param>
            <returns>
            <c>true</c> if the provided <paramref name="char"/>
            is white space or locale separator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.IsNullOrWhiteSpaceOrLocaleSeparator(System.String)">
            <summary>
            Checks if the provided <paramref name="string"/> is <c>null</c>,
            empty, or consists only of white-space or locale separator characters.
            </summary>
            <param name="string">The <see cref="T:System.String"/> to test.</param>
            <returns>
            <c>true</c> if the provided <paramref name="string"/> is <c>null</c>,
            empty, or consists only of white-space or locale separator characters;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.Utils.LocaleUtils">
            <summary>
            Class for utility methods related to Locale strings.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Utils.LocaleUtils.LocaleComparer">
            <summary>
            Gets an instance of <see cref="P:NpSharp.Framework.Utils.LocaleUtils.LocaleComparer"/>.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Utils.LocaleUtils.LocaleSeparators">
            <summary>Locale Segment Separators.</summary>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.GetLocaleSegments(System.String)">
            <summary>
            Gets the locale segments from the given locale string.
            </summary>
            <param name="locale">Locale string</param>
            <returns>Locale segments</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])">
            <summary>
            Normalizes the provided <paramref name="localeSegments"/>.
            </summary>
            <param name="localeSegments">Locale Segments</param>
            <returns>The provided <paramref name="localeSegments"/> joined by _. Null or whitespace entries are ignored. Entries are also trimmed.</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String)">
            <summary>
            Normalizes the provided <paramref name="locale"/>.
            This is a shorthand for <see cref="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])"/> with <see cref="M:NpSharp.Framework.Utils.LocaleUtils.GetLocaleSegments(System.String)"/>.
            </summary>
            <param name="locale">The locale.</param>
            <returns>The return of <see cref="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.ReduceHierarchy(System.String[],System.Int32)">
            <summary>
            Reduces the provided <paramref name="localeSegments"/> by the provided quantity of <paramref name="level"/>.
            </summary>
            <param name="localeSegments">The locale segments.</param>
            <param name="level">Quantity of levels to reduce.</param>
            <returns>The reduced normalized locale.</returns>
            <seealso cref="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])"/>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.ReduceHierarchy(System.String,System.Int32)">
            <summary>
            Reduces the provided <paramref name="locale"/> by the provided quantity of <paramref name="level"/>.
            </summary>
            <param name="locale">The locale.</param>
            <param name="level">Quantity of levels to reduce.</param>
            <returns>The reduced normalized locale.</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.GetLocaleHierarchy(System.String)">
            <summary>
            Gets the sequence containing the hierarchy of the provided <paramref name="locale"/>,
            from the most specific to the least specific.
            </summary>
            <param name="locale"></param>
            <returns></returns>
            <example>
            Given "az-Latin-AZ", this method produces the following sequence:
            "az-Latin-AZ"
            "az-Latin"
            "az"
            ""
            </example>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.GetLocaleHierarchySequence(System.String)">
            <summary>
            Gets the sequence containing the hierarchy of the provided <paramref name="locale"/>,
            from the most specific to the least specific.
            </summary>
            <param name="locale"></param>
            <returns></returns>
            <example>
            Given "az-Latin-AZ", this method produces the following sequence:
            "az-Latin-AZ"
            "az-Latin"
            "az"
            ""
            </example>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.IsLocaleSeparator(System.Char)">
            <summary>
            Checks if the provided <paramref name="char"/>
            is a locale separator.
            </summary>
            <param name="char">The <see cref="T:System.Char"/> to be checked.</param>
            <returns>
            <c>true</c> if the provided <paramref name="char"/> is a locale separator;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NpSharp.Framework.XElementExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Xml.Linq.XElement"/> class
            </summary>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required XML attribute
            </summary>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>attribute value</returns>
            <exception cref="T:System.Xml.XmlException">when the attribute does not exist, or is empty</exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredAttribute``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required XML attribute, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>attribute value</returns>
            <exception cref="T:System.Xml.XmlException">when the attribute does not exist, or is empty</exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Get the value of an optional XML attribute
            </summary>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="defaultValue">default value to return if the attribute is not found, or empty</param>
            <returns>attribute value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetAttribute``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Get the value of an optional XML attribute, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="defaultValue">default value to return if the attribute is not found, or empty</param>
            <returns>attribute value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required child XML element
            </summary>
            <param name="el">father element</param>
            <param name="name">element name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>element value</returns>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredElement``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required child XML element, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">father element</param>
            <param name="name">element name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>element value</returns>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Get the value of an optional XML element
            </summary>
            <param name="el">father element</param>
            <param name="name">child element name</param>
            <param name="defaultValue">default value to return if the element is not found, or empty</param>
            <returns>child element value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetElement``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Get the value of an optional XML element, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">father element</param>
            <param name="name">child element name</param>
            <param name="defaultValue">default value to return if the element is not found, or empty</param>
            <returns>child element value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.HasAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Checks if a XElement has the specified attribute.
            </summary>
            <param name="source"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Checks if a XElement has the specified inner element.
            </summary>
            <param name="source"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetOrAdd(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Gets the first (in document order) child <see cref="T:System.Xml.Linq.XElement"/>
            with the specified <paramref name="elementName"/>
            from the provided <paramref name="element"/>;
            or adds a new <see cref="T:System.Xml.Linq.XElement"/>
            with the provided <paramref name="elementName"/>
            to the provided <paramref name="element"/>.
            </summary>
            <param name="element">The parent instance of <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="elementName">The <see cref="T:System.Xml.Linq.XName"/> to match.</param>
            <param name="ignoreNamespace">Whether the namespace (<c>xmlns</c>) should be ignored.</param>
            <returns>
            The existing <see cref="T:System.Xml.Linq.XElement"/> that matches the specified <paramref name="elementName"/> or the newly appended <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.Elements(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Returns a filtered collection of the child elements of the provided <paramref name="element"/>, in document order.
            Only elements that have a matching <paramref name="elementName"/> are included in the collection.
            </summary>
            <param name="element">An instance of <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="elementName">The <see cref="T:System.Xml.Linq.XName"/> to match.</param>
            <param name="ignoreNamespace">Whether the namespace (<c>xmlns</c>) should be ignored.</param>
            <returns>
            A sequence of <see cref="T:System.Xml.Linq.XElement"/> containing the children of <paramref name="element"/>
            that have a matching <paramref name="elementName"/>, in document order.
            </returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.ToByteArray(System.Xml.Linq.XElement)">
            <summary>
            Creates an <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s that represent the provided <paramref name="element"/>.
            </summary>
            <param name="element">An instance of <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>An <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s that represents the provided <paramref name="element"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.SetNamespace(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
            <summary>
            Sets the <see cref="P:System.Xml.Linq.XName.Namespace"/> of the provided <paramref name="element"/>.
            </summary>
            <param name="element">An instance of <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="namespace">An instance of <see cref="T:System.Xml.Linq.XNamespace"/> to set.</param>
            <returns>The provided <paramref name="element"/>.</returns>
        </member>
        <member name="T:NpSharp.Framework.XNameExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Xml.Linq.XName"/> class
            </summary>
        </member>
        <member name="M:NpSharp.Framework.XNameExtensions.ToAttribute(System.Xml.Linq.XName,System.Object)">
            <summary>
            Return a new <see cref="T:System.Xml.Linq.XAttribute"/> with this name and the given value, but
            returns null if "value" is null
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
            <returns>XML attribute, or null if the given value was null</returns>
        </member>
    </members>
</doc>
