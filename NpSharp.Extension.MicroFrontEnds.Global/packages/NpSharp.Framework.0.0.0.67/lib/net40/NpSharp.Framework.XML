<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NpSharp.Framework</name>
    </assembly>
    <members>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData">
            <summary>
            Data object that represents a checkout dispenser coupon
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.CouponCode">
            <summary>
            Gets or sets the coupon code (this is the code that should be printed in the receipt, for example)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.PosId">
            <summary>
            Gets or sets the POS ID that generated this coupon
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.OrderKey">
            <summary>
            Gets or sets the order key that generated this coupon
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.PromotionId">
            <summary>
            Gets or sets the promotion ID that this coupon activates
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.PromotionName">
            <summary>
            Gets or sets the promotion name that this coupon activates
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.StoreId">
            <summary>
            Gets or sets the store ID that generated this coupon
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.CreationDate">
            <summary>
            Gets or sets the coupon creation date (date ony - no time)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.CreationDateInternal">
            <summary>
            <see cref="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.CreationDate"/> field for the XML serializer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.StartDays">
            <summary>
            Gets or sets the start date (in days after the creation date).
            (Zero if the coupon is valid immediately after creation)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.ExpirationDays">
            <summary>
            Gets or sets the expiration (in days after the start date).
            (Zero if valid in the same day only)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.RedemptionLimit">
            <summary>
            Gets or sets the redemption limit (zero if infinite)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.RedeemedQty">
            <summary>
            Gets or sets the number of times this coupon has been redeemed
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.AnyStore">
            <summary>
            Gets or sets the "any store flag"
            (flag indicating if the coupon is valid for any store or only in the store that generated it)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.BusinessDay">
            <summary>
            Gets or sets the business day (YYYYMMDD) on which this coupon has been created
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.CheckoutCouponData.CouponType">
            <summary>
            Gets or sets the type of the coupon
            </summary>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CheckoutCouponException">
            <summary>
            Base exception for checkout coupon
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CheckoutCouponServerBase">
            <summary>
            Base abstract class for <see cref="T:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer"/> plugins
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.ServiceBase">
            <summary>
            Base class for all plugins that implement a service
            </summary>
            <seealso cref="T:NpSharp.Framework.IPlugin"/>
        </member>
        <member name="T:NpSharp.Framework.PluginBase">
            <summary>
            Base class for all plugins to implement from
            </summary>
            <seealso cref="T:NpSharp.Framework.IPlugin"/>
        </member>
        <member name="T:NpSharp.Framework.IPlugin">
            <summary>
            Plugin lifecycle interface.
            This is the main contract for communication between the microkernel
            and the plugin instances.
            
            Plugin implmentations should inherit from the <see cref="T:NpSharp.Framework.PluginBase"/> instead.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnLoad">
            <summary>
            Called by the microkernel right after the plugin has been instantiated.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnStart">
            <summary>
            Called by the microkernel right before starting the plugin execution.
            The plugin implementation should start operating at this point.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnStop">
            <summary>
            Called by the microkernel right before stopping the plugin execution.
            The plugin implementation should stop operating at this point.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.OnUnload">
            <summary>
            Called by the microkernel right before unloading the plugin instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.IPlugin.Configure(System.Collections.Generic.IEnumerable{NpSharp.Framework.Configuration.Section})">
            <summary>
            Configure this plugin with the given configuration sections and parameters.
            This method is called before the plugin is started.
            </summary>
            <param name="sections">list of configuration sections</param>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.ConfigurationSections">
            <summary>
            Get the plugin's configuration sections
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.LogTable">
            <summary>
            Get the plugin's log descriptors which will be registered into Microkernel Log Table.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.PerformanceCounterInstances">
            <summary>
            Gets a list of performance counters.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPlugin.CurrentLocale">
            <summary>
            Gets the locale that the plugin is currently operating on (E.g.: "en_US")
            </summary>
            <remarks>If this is null or whitespace, it means to use the "root" (invariant) locale</remarks>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.GetConfigurationSections">
            <summary>
            Retieve the configuration sections for this plugin, via reflection
            </summary>
            <returns>configuration sections</returns>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.Configure(System.Collections.Generic.IEnumerable{NpSharp.Framework.Configuration.Section})">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnLoad">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnStart">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnStop">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.OnUnload">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginBase.InitializeLifetimeService">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.CurrentLocale">
            <summary>
            Gets or sets the locale that the plugin is currently operating on (E.g.: "en_US")
            </summary>
            <remarks>If this is null or whitespace, it means to use the "root" (invariant) locale</remarks>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.ConfigurationSections">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.PerformanceCounterInstances">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PluginBase.LogTable">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.IService">
            <summary>
            Base contract for all services
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.IService.Ping">
            <summary>
            Checks network connectivity with the service.
            Service implementations should always return true here, since this operation
            is only used to check for network communication state.
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.ServiceBase.Ping">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer">
            <summary>
            Service responsible for generating, validating and redeeming checkout dispenser coupons
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer.GenerateCheckoutCoupon(NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest)">
            <summary>
            Generates a new checkout coupon
            </summary>
            <param name="request">request data</param>
            <returns>the generated coupon data</returns>
            <exception cref="T:System.ArgumentException">when any of the parameters in the request is invalid</exception>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer.GetCheckoutCoupon(System.String)">
            <summary>
            Retrieves the checkout coupon data, given its coupon code
            </summary>
            <param name="couponCode">The checkout coupon code.</param>
            <returns>Checkout coupon data</returns>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException">when the coupon code version is not supported (new coupon scanned on old software version)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException">when the coupon code signature is invalid</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException">when the coupon code is valid but was not found in the database (probably was created by another store)</exception>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer.RedeemCheckoutCoupon(System.String,System.Int32)">
            <summary>
            Redeem the checkout coupon by its checkout coupon code.
            </summary>
            <param name="couponCode">The checkout coupon code.</param>
            <param name="storeId">store id from NP6</param>
            <returns>Updated checkout coupon data</returns>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException">when the coupon code version is not supported (new coupon scanned on old software version)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException">when the coupon code signature is invalid</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException">when the coupon code is valid but was not found in the database (probably was created by another store)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException">when the coupon is not valid yet (future start date)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponExpiredException">when the coupon has already expired</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException">when the coupon has already redeemed</exception>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer.ValidateCheckoutCoupon(System.String,System.Int32)">
            <summary>
            Validate that the given coupon data can be redeemed, throwing the specific exceptions when it can't
            </summary>
            <param name="couponCode">The checkout coupon code.</param>
            <param name="storeId">store id from NP6</param>
            <returns>Checkout coupon data</returns>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException">when the coupon code version is not supported (new coupon scanned on old software version)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException">when the coupon code signature is invalid</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException">when the coupon code is valid but was not found in the database (probably was created by another store)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException">when the coupon is not valid yet (future start date)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponExpiredException">when the coupon has already expired</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException">when the coupon has already redeemed</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponStoreIdException">when the store id on coupon does not match the current restaurant</exception>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer.CancelCheckoutCoupon(System.String)">
            <summary>
            Cancels a checkout coupon from the database or on the server
            </summary>
            <param name="couponCode">Pipe-separated codes to be cancelled</param>
            CouponNotFoundException
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponServerBase.GenerateCheckoutCoupon(NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponServerBase.GetCheckoutCoupon(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponServerBase.RedeemCheckoutCoupon(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponServerBase.ValidateCheckoutCoupon(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CheckoutCouponServerBase.CancelCheckoutCoupon(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException">
            <summary>
            Thrown when the coupon was already redeemed
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponAlreadyRedeemedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CouponExpiredException">
            <summary>
            Thrown when the coupon has already expired
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponExpiredException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponExpiredException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException">
            <summary>
            Thrown when the coupon code is valid but was not found in the database (probably was created by another store)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponCodeException">
            <summary>
            Base exception for checkout coupon problems with the coupon code
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponCodeException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponCodeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException">
            <summary>
            Thrown when the coupon is not valid yet (start date is in the future)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.CouponType">
            <summary>
            Defines the coupon types.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.CheckoutCoupon.CouponType.CheckoutCoupon">
            <summary>
            Coupon automatically generated by the system and printed during the customer checkout (in the receipt, for example)
            </summary>
        </member>
        <member name="F:NpSharp.Framework.CheckoutCoupon.CouponType.Barcode">
            <summary>
            A simple barcode coupon, such as those printed in newspapers or magazines
            </summary>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest">
            <summary>
            Data object representing a request to the <see cref="M:NpSharp.Framework.CheckoutCoupon.ICheckoutCouponServer.GenerateCheckoutCoupon(NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest)"/> API.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.StoreId">
            <summary>The store ID</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.PosId">
            <summary>The POS ID</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.OrderKey">
            <summary>The order key</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.PromotionId">
            <summary>The promotion ID</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.StartDays">
            <summary>Start date (in days after the creation date) - Zero if the coupon is valid immediately after creation</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.ExpirationDays">
            <summary>How many days the the coupon valid for (after the start date)</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.RedemptionLimit">
            <summary>How many times the coupon can be used (zero for infinite)</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.BusinessDay">
            <summary>The business day (YYYYMMDD)</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.AnyStore">
            <summary>Whether the coupon is valid only for this store or any other store</summary>
        </member>
        <member name="P:NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest.LanguageCode">
            <summary>The language code (e.g.: en_US) to retrieve the promotion name</summary>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException">
            <summary>
            Thrown when the coupon code signature is invalid
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException">
            <summary>
            Thrown when the coupon code version is not supported (new coupon scanned on old software version)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponStoreIdException">
            <summary>
            Thrown when the coupon has a storeId different from the current restaurant
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponStoreIdException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponStoreIdException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponStoreIdException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.CheckoutCoupon.InvalidCouponStoreIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.CollectionExtension">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.CollectionExtension.WithAdd``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Fluent API for adding an element into a collection
            </summary>
            <typeparam name="T">the type</typeparam>
            <param name="source">source collection</param>
            <param name="element">element to add</param>
            <returns>collection instance for fluent API</returns>
            <example><code><![CDATA[
            var x = new List<int>();
            x = x.WithAdd(1).WithAdd(2).WithAdd(3);
            ]]></code></example>
        </member>
        <member name="M:NpSharp.Framework.CollectionExtension.WithRemove``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Fluent API for remocing an element from a collection
            </summary>
            <typeparam name="T">the type</typeparam>
            <param name="source">source collection</param>
            <param name="element">element to remove</param>
            <returns>collection instance for fluent API</returns>
            <example><code><![CDATA[
            var x = new List<int>();
            x = x.WithAdd(1).WithAdd(2).WithAdd(3);
            x = x.WithRemove(1).WithRemove(2);
            ]]></code></example>
        </member>
        <member name="T:NpSharp.Framework.Configuration.BooleanParameter">
            <summary>
            Represents a boolean configuration parameter
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.Parameter`1">
            <summary>
            Represents a configuration parameter of a generic type.
            This class should not be used directly by plugins!
            Use one of the more specialized classes:
                <see cref="T:NpSharp.Framework.Configuration.IntParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.LongParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.DoubleParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.DecimalParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.TimeSpanParameter"/>
            </summary>
            <typeparam name="T">parameter type</typeparam>
        </member>
        <member name="T:NpSharp.Framework.Configuration.Parameter">
            <summary>
            Represents a configuration parameter.
                <see cref="T:NpSharp.Framework.Configuration.StringParameter"/>,
                <see cref="T:NpSharp.Framework.Configuration.UriParameter"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.IsValidString(System.String)">
            <summary>
            Check if the given string value is valid for this parameter
            </summary>
            <param name="value">string value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.StringValueChanged(System.String)">
            <summary>
            Called when the string value of the parameter has changed
            </summary>
            <param name="oldValueString">old string value</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <summary>
            Sets the <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/> of this <see cref="T:NpSharp.Framework.Configuration.Parameter"/> instance.
            </summary>
            <param name="configurationContext">The <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/>.</param>
            <returns>Returns whether this parameter has changed its value due to context changes.</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.Clone">
            <summary>
            Returns a deep clone copy of this parameter
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.Equals(NpSharp.Framework.Configuration.Parameter)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.Name">
            <summary>Configuration parameter name</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.Description">
            <summary>Configuration parameter description</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.DefaultValueString">
            <summary>Optional default value of this parameter, as a string</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.ValueString">
            <summary>Current value of this parameter, as a string</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.ValueStringOrDefault">
            <summary>Gets the <see cref="P:NpSharp.Framework.Configuration.Parameter.ValueString"/> or <see cref="P:NpSharp.Framework.Configuration.Parameter.DefaultValueString"/> (if ValueString is null)</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter.AllowedValues">
            <summary>
            Optional list of values allowed for this parameter.
            If this list is empty or null, then all values are allowed.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.StringToValue(System.String)">
            <summary>
            Convert a string value to the generic parameter type
            </summary>
            <param name="s">string value</param>
            <returns>converted parameter value</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.ValueToString(`0)">
            <summary>
            Convert a generic parameter value to string
            </summary>
            <param name="v">parameter value</param>
            <returns>string value</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.StringValueChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.FireValueChanged(NpSharp.Framework.Configuration.ParameterChangedEventArgs{NpSharp.Framework.Configuration.Parameter{`0},`0})">
            <summary>
            Fires the <see cref="E:NpSharp.Framework.Configuration.Parameter`1.ValueChanged"/> event
            </summary>
            <param name="args">event arguments</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.IsValidString(System.String)">
            <summary>
            Check if the given string value is valid for this parameter
            </summary>
            <param name="value">string value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Parameter`1.IsValid(`0)">
            <summary>
            Check if the given value is valid for this parameter
            </summary>
            <param name="value">parameter value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="E:NpSharp.Framework.Configuration.Parameter`1.ValueChanged">
            <summary>
            Event raised when the parameter value changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter`1.Value">
            <summary>Parameter value</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Parameter`1.DefaultValue">
            <summary>Optional default parameter value</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.BooleanParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ColorParameter">
            <summary>
            Represents a color configuration parameter
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.ColorParameter.HexRegex">
            <summary>Regular expression that matches Hexadecimal Strings</summary>
        </member>
        <member name="F:NpSharp.Framework.Configuration.ColorParameter._colorDb">
            <summary>Instance of <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/>.</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.ValueToString(System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ColorParameter.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ColorParameter.Value">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ConfigurationContext">
            <summary>
            Represents a Configuration Context.
            <para>This context can be used to retrieve a <see cref="T:NpSharp.Framework.Configuration.Parameter`1"/>.<see cref="P:NpSharp.Framework.Configuration.Parameter`1.Value"/> 
            if it is intended to be something else than the configured <see cref="T:NpSharp.Framework.Configuration.Parameter`1"/>.<see cref="P:NpSharp.Framework.Configuration.Parameter.ValueString"/>.</para>
            <para>For example, a <see cref="T:NpSharp.Framework.Configuration.ColorParameter"/> can be configured with <see cref="P:NpSharp.Framework.Configuration.Parameter.ValueString"/> = "PosButtonColor".</para>
            <para>In this case, the intention is that this <see cref="P:NpSharp.Framework.Configuration.ColorParameter.Value"/> 
            should be the respective "PosButtonColor" <see cref="T:System.Drawing.Color"/> in the <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/>.</para>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationContext.PluginLocale">
            <summary>
            Current Plugin Locale.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationContext.ColorDb">
            <summary>
            Instance of the <see cref="T:NpSharp.Framework.InternalServices.IColorDb"/> Internal Service.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationContext.MediaBroker">
            <summary>
            Instance of the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaBroker"/> Internal Service.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.DecimalParameter">
            <summary>
            Represents a decimal configuration parameter
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ComparableParameter`1">
            <summary>
            Represents a configuration parameter of a generic comparable value type.
            </summary>
            <typeparam name="T">parameter type</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ComparableParameter`1.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ComparableParameter`1.IsValid(`0)">
            <summary>
            Check if the given value is valid for this parameter
            </summary>
            <param name="value">parameter value</param>
            <returns>true if the value is valid</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ComparableParameter`1.Clone">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ComparableParameter`1.MinValue">
            <summary>Optional minimum value for this parameter</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ComparableParameter`1.MaxValue">
            <summary>Optional maximum value for this parameter</summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DecimalParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.DoubleParameter">
            <summary>
            Represents a double-precision floating point configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DoubleParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.IConfigurationManager">
            <summary>
            Configuration manager internal service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReadSection(NpSharp.Framework.Configuration.Section)">
            <summary>
            Reads a configuration section from the configuration database
            </summary>
            <param name="section">section to read and populate</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReadSection(System.String)">
            <summary>
            Reads a configuration section from the configuration database
            </summary>
            <param name="sectionName">section name</param>
            <returns>configuration section</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReadNodeSection(System.String,System.String)">
            <summary>
            Reads a configuration section for an specific node from the configuration database
            </summary>
            <param name="sectionName">section name</param>
            <param name="nodeName">node name</param>
            <returns>configuration section</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.UpdateSection(NpSharp.Framework.Configuration.Section,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates a configuration section in the configuration database
            </summary>
            <param name="section">section to update</param>
            <param name="replace">
            flag indicating whether to replace the existing section or not.
            When this is false (the default), the given section parameters will be merged
            into the existing section (if any).
            </param>
            <param name="updateStructure">
            if this is true (and replace is false), the merge operation will update the
            section structure, such as changing descriptions and adding new parameters and subsections
            </param>
            <param name="updateParameterValues">
            if this is true (and replace is false), the merge operation will update the
            value of existing parameters and will also merge elements from existing list subsections (adding or removing them as necessary)
            </param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.UpdateNodeSection(NpSharp.Framework.Configuration.Section,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates a configuration section for an specific node from the configuration database
            </summary>
            <param name="section">section to update</param>
            <param name="nodeName">node name to associate this configuration section</param>
            <param name="replace">
            flag indicating whether to replace the existing section or not.
            When this is false (the default), the given section parameters will be merged
            into the existing section (if any).
            </param>
            <param name="updateStructure">
            if this is true (and replace is false), the merge operation will update the
            section structure, such as changing descriptions and adding new parameters and subsections
            </param>
            <param name="updateParameterValues">
            if this is true (and replace is false), the merge operation will update the
            value of existing parameters and will also merge elements from existing list subsections (adding or removing them as necessary)
            </param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.AddFromArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds configuration parameters from a list of command-line arguments.<br/>
            Configuration parameters can be defined in the command-line by using the following syntax:
            <b>-CSectionName,ParameterName=ParameterValue</b>.<br/>
            <br/>
            Both <b>SectionName</b> and <b>ParameterName</b> allow alphanumeric, '_', '.' and '-' characters.<br/>
            The <b>ParameterValue</b> allows any character.
            </summary>
            <param name="args">command-line arguments</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IConfigurationManager.ReconfigureAllPlugins">
            <summary>
            Reconfigures all plugins instances that have at least one configuration section.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ImageParameter">
            <summary>
            Represents an Image Configuration Parameter.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.MediaParameter">
            <summary>
            Represents a Media Configuration Parameter.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Configuration.MediaParameter"/> with the provided <paramref name="name"/> and <paramref name="description"/>.
            </summary>
            <param name="name">This <see cref="T:NpSharp.Framework.Configuration.MediaParameter"/> name.</param>
            <param name="description">This <see cref="T:NpSharp.Framework.Configuration.MediaParameter"/> description.</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.ValueToString(NpSharp.Framework.InternalServices.MediaDb.MediaInfo)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.MediaParameter.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ImageParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Configuration.ImageParameter"/> with the provided <paramref name="name"/> and <paramref name="description"/>.
            </summary>
            <param name="name">This <see cref="T:NpSharp.Framework.Configuration.ImageParameter"/> name.</param>
            <param name="description">This <see cref="T:NpSharp.Framework.Configuration.ImageParameter"/> description.</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.IntParameter">
            <summary>
            Represents an integer configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.IntParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ListSectionHolder">
            <summary>
            Represents a list of Subsections
            </summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ListSectionHolder.SectionChanged">
            <summary>
            Event raised when the list section configuration changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder.InternalSection">
            <summary>
            Get the internal <see cref="T:NpSharp.Framework.Configuration.ListSection"/> object
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ListSectionHolder`1">
            <summary>
            Represents a list of Subsections of a Generic Configuration.
            </summary>
            <typeparam name="T">Type of the Subsections. This type has to extend <see cref="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder"/>.</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.#ctor(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.InternalSectionChanged(System.Object,NpSharp.Framework.Configuration.SectionChangedInternalEventArgs)">
            <summary>
            Called when the internal section was reconfigured, so we need to merge configuration holders
            </summary>
            <param name="sender">event sender (not used)</param>
            <param name="args">event arguments</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSectionHolder`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.ElementsOrDefault">
            <summary>
            Returns the list of elements to use (either the configured values, or the default ones)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.InternalSection">
            <summary>
            Get the internal <see cref="T:NpSharp.Framework.Configuration.ListSection"/> object
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.Elements">
            <summary>
            List of elements on this subsections list
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.DefaultElements">
            <summary>
            Default list of elements to be used if no configuration is provided
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.Item(System.Int32)">
            <summary>
            Gets the Subsection at a specific index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSectionHolder`1.Count">
            <summary>
            Number of elements in this list section
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.LongParameter">
            <summary>
            Represents a long integer configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.LongParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="T:NpSharp.Framework.Configuration.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Configuration"/> namespace contains
            interfaces and objects that can be used to interact with the functional configuration layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ParameterChangedEventArgs">
            <summary>
            Event arguments for parameter changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs.Parameter">
            <summary>parameter which fired this event</summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2">
            <summary>
            Event arguments for parameter changes
            </summary>
            <typeparam name="TParam">type of the parameter</typeparam>
            <typeparam name="TValue">type of the parameter value</typeparam>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2.Parameter">
            <summary>parameter which fired this event</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2.OldValue">
            <summary>old parameter value</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ParameterChangedEventArgs`2.NewValue">
            <summary>new parameter value</summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ConfigurationSectionHolder">
            <summary>
            Holds a configuration section.
            All <see cref="T:NpSharp.Framework.Configuration.Parameter"/> fields of the inheriting class will be automatically added to the <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/> instance.
            </summary>
            <example>
            This example shows how to define a simple configuration section with a single parameter:
            <code><![CDATA[
            class MySection : ConfigurationSectionHolder {
                public MySection() : base("MySection", "my config. section") { }
                public readonly IntParameter MyParameter = new IntParameter("MyParameter", "my parameter") {DefaultValue = 5};
            }
            ]]></code>
            </example>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ConfigurationSectionHolder.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration section holder
            </summary>
            <param name="name">configuration section name</param>
            <param name="description">configuration section description</param>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ConfigurationSectionHolder.SectionChanged">
            <summary>
            Event raised when the section configuration changes.<br/>
            This is just a proxy for the <see cref="E:NpSharp.Framework.Configuration.Section.SectionChanged"/> event in the <see cref="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection"/> instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ConfigurationSectionHolder.InternalSection">
            <summary>
            Get the internal <see cref="T:NpSharp.Framework.Configuration.Section"/> object
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ProductionOrderStatusParameter">
            <summary>
            Represents a <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrderStatus"/> configuration Parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ProductionOrderStatusParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ProductionOrderStatusParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.Section">
            <summary>
            Represents a configuration section
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration section with the given name and description
            </summary>
            <param name="name">Configuration section name</param>
            <param name="description">Configuration section description in English</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Configure(NpSharp.Framework.Configuration.Section)">
            <summary>
            Configures this section with the given parameters.
            It is important to note that this will never create new parameters on this section.
            It will always only change the value of existing parameters
            </summary>
            <param name="newSection">New Section with new parameters, new parameter values and/or Subsections</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Get(System.String)">
            <summary>
            Retrieve a parameter from this section
            </summary>
            <param name="parameterName">parameter name</param>
            <returns>parameter instance, or null if not found</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Get``1(System.String)">
            <summary>
            Retrieve a parameter from this section
            </summary>
            <param name="parameterName">parameter name</param>
            <typeparam name="TParam">parameter type</typeparam>
            <returns>parameter instance, or null if not found</returns>
            <exception cref="T:System.InvalidCastException">when the given parameter type is wrong</exception>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Equals(System.Object)">
            <summary>
            Check if two sections are equal (parameters are not compared at all)
            </summary>
            <param name="obj">other</param>
            <returns>bool</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Equals(NpSharp.Framework.Configuration.Section)">
            <summary>
            Check if two sections are equal (parameters are not compared at all)
            </summary>
            <param name="other">other</param>
            <returns>bool</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.Clone">
            <summary>
            Perform a deep clone operation
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.Section.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <summary>
            Sets the configuration context for this <see cref="T:NpSharp.Framework.Configuration.Section"/> and all its
            <see cref="P:NpSharp.Framework.Configuration.Section.SubSections"/> and <see cref="P:NpSharp.Framework.Configuration.Section.ListSubSections"/>.
            </summary>
            <param name="configurationContext">The <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/> to set.</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.Name">
            <summary>Configuration section name</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.Description">
            <summary>Configuration section description in English</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.Parameters">
            <summary>List of parameters contained on this configuration section</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.SubSections">
            <summary>List of sub-sections</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.Section.ListSubSections">
            <summary>List of sub-section lists</summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.Section.SectionChanged">
            <summary>
            Event raised when the section configuration changes
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.SectionChangedEventArgs">
            <summary>
            Event arguments for configuration section changes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.SectionChangedEventArgs.Section">
            <summary>section which has been changed</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.SectionChangedEventArgs.Parameters">
            <summary>list of changed parameters</summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.SectionChangedInternalEventArgs">
            <summary>
            Event arguments for the <see cref="E:NpSharp.Framework.Configuration.ListSection.SectionChangedInternal"/> event
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.SectionChangedInternalEventArgs.ConfigurationContext">
            <summary>
            Configuration context being set (null when just reconfiguring values)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.StringParameter">
            <summary>
            Represents an string configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.StringParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.StringParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.StringParameter.ValueToString(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.ListSection">
            <summary>
            Represents a list of Subsections
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.#ctor(System.String,System.String,NpSharp.Framework.Configuration.Section)">
            <summary>
            Constructs a Subsection List with the given Name and Description
            </summary>
            <param name="name">section name</param>
            <param name="description">section description</param>
            <param name="template">configuration section to be used as a template when adding new sections to the list</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.Add">
            <summary>
            Adds a new section to the list, based on the ListSection template (<see cref="P:NpSharp.Framework.Configuration.ListSection.Template"/>)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.Configure(NpSharp.Framework.Configuration.ListSection)">
            <summary>
            Configures this list section with the sections from the given list section.
            </summary>
            <param name="listSection">New list section</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.Clone">
            <summary>
            Perform a deep clone operation
            </summary>
            <returns>cloned instance</returns>
        </member>
        <member name="M:NpSharp.Framework.Configuration.ListSection.SetConfigurationContext(NpSharp.Framework.Configuration.ConfigurationContext)">
            <summary>
            Sets the configuration context for this <see cref="T:NpSharp.Framework.Configuration.ListSection"/> and all its <see cref="P:NpSharp.Framework.Configuration.ListSection.Elements"/> and <see cref="P:NpSharp.Framework.Configuration.ListSection.DefaultElements"/>
            </summary>
            <param name="configurationContext">The <see cref="T:NpSharp.Framework.Configuration.ConfigurationContext"/> to set.</param>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Name">
            <summary>Subsection List name</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Description">
            <summary>Subsection List description</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Elements">
            <summary>List of elements on this subsections list</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.DefaultElements">
            <summary>Default list of elements to be used if no configuration is provided</summary>
        </member>
        <member name="P:NpSharp.Framework.Configuration.ListSection.Template">
            <summary>Configuration section to be used as a template when adding new sections to the list</summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ListSection.SectionChanged">
            <summary>
            Event raised when the list section configuration changes
            </summary>
        </member>
        <member name="E:NpSharp.Framework.Configuration.ListSection.SectionChangedInternal">
            <summary>
            Event raised when the list section configuration changes (used by the framework itself)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Configuration.DaysOfWeekParameter">
            <summary>
            Represents a DaysOfWeek configuration Parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DaysOfWeekParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DaysOfWeekParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.DaysOfWeekParameter.ValueToString(NpSharp.Framework.DaysOfWeek)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.TimeParameter">
            <summary>
            Represents a Time configuration Parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeParameter.ValueToString(NpSharp.Framework.Time)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeParameter.StringToValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Configuration.TimeSpanParameter">
            <summary>
            Represents a TimeSpan configuration parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeSpanParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.TimeSpanParameter.StringToValue(System.String)">
            <summary>
            Convert a string value to TimeSpan
            </summary>
            <param name="s">string value</param>
            <returns>converted parameter value</returns>
        </member>
        <member name="T:NpSharp.Framework.Configuration.UriParameter">
            <summary>
            Represents an Uniform Resource Identifier (URI) parameter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Configuration.UriParameter.#ctor(System.String,System.String)">
            <summary>
            Constructs a new configuration parameter with the given name and description
            </summary>
            <param name="name">Configuration parameter name</param>
            <param name="description">Configuration parameter description in english</param>
        </member>
        <member name="M:NpSharp.Framework.Configuration.UriParameter.StringToValue(System.String)">
            <summary>
            Convert a string value to Uri type
            </summary>
            <param name="s">string value</param>
            <returns>converted parameter value</returns>
        </member>
        <member name="T:NpSharp.Framework.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DateTimeExtensions.GetDaysOfWeekFlag(System.DateTime)">
            <summary>
            Returns the <see cref="T:System.DateTime"/> value as a <see cref="T:NpSharp.Framework.DaysOfWeek"/> representation
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> value.</param>
            <returns></returns>
        </member>
        <member name="T:NpSharp.Framework.DaysOfWeek">
            <summary>
            Specifies the day of week
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Monday">
            <summary>
            Specifies that the day is monday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Tuesday">
            <summary>
            Specifies that the day is tuesday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Wednesday">
            <summary>
            Specifies that the day is wednesday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Thursday">
            <summary>
            Specifies that the day is thursday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Friday">
            <summary>
            Specifies that the day is friday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Saturday">
            <summary>
            Specifies that the day is saturday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.Sunday">
            <summary>
            Specifies that the day is sunday
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DaysOfWeek.All">
            <summary>
            Specifies that all days are valid
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DecimalExtension">
            <summary>
            Extension methods for <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.DecimalExtension.ToN2(System.Decimal)">
            <summary>
            Returns the <see cref="T:System.Decimal"/> value as a currency representation.
            (e.g.: 1.654 =&gt; 1.65)
            </summary>
            <param name="source">The <see cref="T:System.Decimal"/> value.</param>
            <returns>A <see cref="T:System.String"/> instance representing the <see cref="T:System.Decimal"/> value.</returns>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ResponseDeserializationException">
            <summary>
            There was an error deserializing the service operation response
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ServiceCommunicationException">
            <summary>
            Error communicating with a service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="originalMessage">original exception message</param>
            <param name="originalExceptionType">original exception type name</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseDeserializationException.OriginalExceptionType">
            <summary>
            Original exception type name (if this was caused by an exception deserialization error)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseDeserializationException.OriginalMessage">
            <summary>
            Original exception message (if this was caused by an exception deserialization error)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ResponseSerializationException">
            <summary>
            There was an error serializing the service operation response
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="originalException">original exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ResponseSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseSerializationException.OriginalExceptionType">
            <summary>
            Original exception type name (if this was caused by an exception serialization error)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.ResponseSerializationException.OriginalMessage">
            <summary>
            Original exception message (if this was caused by an exception serialization error)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.MultichannelOffersServerException">
            <summary>
            Exception for Multichannel Ecp Server operations
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelOffersServerException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelOffersServerException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelOffersServerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelOffersServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Exceptions"/> namespace contains
            all exceptions that can be thrown to NpSharp plugins.<br/>
            This includes both exceptions thrown by plugins interfaces and exceptions thrown by the NpSharp framework itself.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.NpSharpPerformanceCounterException">
            <summary>
            NpSharp Performance Counter Exception
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.NpSharpPerformanceCounterException.#ctor(System.String)">
            <summary>
            General Exception
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.NpSharpPerformanceCounterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException">
            <summary>
            Error communicating with an external service
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ExternalServiceCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.MultichannelEcpServerException">
            <summary>
            Exception for Multichannel Ecp Server operations
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelEcpServerException.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="ecpServerResultCode">Result code from the Ecp Server</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelEcpServerException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelEcpServerException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelEcpServerException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.MultichannelEcpServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.MultichannelEcpServerException.ResultCode">
            <summary>
            Result Code of the Operation
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.OffersAccessDeniedException">
            <summary>
            Exception for access denied on offers server
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersAccessDeniedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersAccessDeniedException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersAccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.OffersInvalidSessionIdException">
            <summary>
            Exception for invalid session id on offers
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidSessionIdException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sessionId">Session ID that generated the exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidSessionIdException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidSessionIdException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidSessionIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.OffersInvalidTagIdException">
            <summary>
            Exception for invalid tag id on offers
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidTagIdException.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="tagId">Tag ID that generated the exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidTagIdException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidTagIdException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidTagIdException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.OffersInvalidTagIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException">
            <summary>
            This exception is raised when a concurrency conflict is encountered
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.Persistence.PersistenceException">
            <summary>
            Generic expection in the persistence layer
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.Persistence.PersistenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.RequiredParameterException">
            <summary>
            When a required parameter is not set.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.#ctor(NpSharp.Framework.Configuration.Parameter)">
            <summary>
            Occurs when a parameter or a value is required and is not set.
            </summary>
            <param name="parameter">Required Parameter</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.RequiredParameterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Exceptions.RequiredParameterException.ParameterName">
            <summary>
            Gets or sets the name of the missing required parameter
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Fiscal.FiscalDeviceBase">
            <summary>
            Base abstract class for <see cref="T:NpSharp.Framework.Fiscal.IFiscalDevice"/> plugins
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Fiscal.IFiscalDevice">
            <summary>
            Service interface for fiscal device plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Fiscal.IFiscalDevice.CloseSale(System.String,NpSharp.Framework.CustomData)">
            <summary>
            Closes a sale in the fiscal device
            </summary>
            <param name="orderKey">order key</param>
            <param name="customData">custom data to be used by the fiscal device plugin</param>
            <returns>fiscal response</returns>
        </member>
        <member name="M:NpSharp.Framework.Fiscal.IFiscalDevice.VoidSale(System.String,NpSharp.Framework.CustomData)">
            <summary>
            Voids a sale in the fiscal device
            </summary>
            <param name="orderKey">order key</param>
            <param name="customData">custom data to be used by the fiscal device plugin</param>
            <returns>fiscal response</returns>
        </member>
        <member name="M:NpSharp.Framework.Fiscal.IFiscalDevice.Report(System.String,NpSharp.Framework.CustomData)">
            <summary>
            Generate a fiscal report
            </summary>
            <param name="reportType">report type</param>
            <param name="customData">custom data to be used by the fiscal device plugin</param>
            <returns>generated report</returns>
        </member>
        <member name="M:NpSharp.Framework.Fiscal.FiscalDeviceBase.CloseSale(System.String,NpSharp.Framework.CustomData)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Fiscal.FiscalDeviceBase.VoidSale(System.String,NpSharp.Framework.CustomData)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Fiscal.FiscalDeviceBase.Report(System.String,NpSharp.Framework.CustomData)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Fiscal.FiscalErrorCode">
            <summary>
            Represents a fiscal device error code
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Fiscal.FiscalErrorCode.NoError">
            <summary>
            No error (success)
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Fiscal.FiscalErrorCode.UnexpectedError">
            <summary>
            Generic unexpected error ocurred
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Fiscal.FiscalResponse">
            <summary>
            Represents the response for a fiscal device operation
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Fiscal.FiscalResponse.ErrorCode">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Fiscal.FiscalResponse.CustomData">
            <summary>
            Custom response data
            </summary>
        </member>
        <member name="T:NpSharp.Framework.IClock">
            <summary>
            Interface used to abstract system clock access (and facilitate unit tests)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IClock.Today">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IClock.Now">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IClock.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InfrastructurePluginAttribute">
            <summary>
            Indicate that the plugin is an "infrastructure plugin".
            Infrastructure plugins are always loaded by the system - they don't need to be configured in the
            topology and are not associated to any Service, Node or Area
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginMetaDataAttribute">
            <summary>
            Base abstract class for plugin meta-data attributes
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InfrastructurePluginAttribute.#ctor">
            <summary>
            Indicate that the plugin is an "infrastructure plugin".
            Infrastructure plugins are always loaded by the system - they don't need to be configured in the
            topology and are not associated to any Service, Node or Area
            </summary>
        </member>
        <member name="T:NpSharp.Framework.DefaultSystemProperties">
            <summary>
            Contains default system property names and values
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.Debug">
            <summary>
            name of the system property containing the debug mode flag
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.InstanceName">
            <summary>name of the system property containing the current instance name</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.OutputFolder">
            <summary>name of the system property containing the output folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DataFolder">
            <summary>name of the system property containing the data folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DatabaseFolder">
            <summary>name of the system property containing the database folder</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DatabasePort">
            <summary>name of the system property containing the database TCP/IP port number</summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.HttpPort">
            <summary>
            name of the system property containing the system HTTP port number
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.HttpPrefix">
            <summary>
            name of the system property containing the system HTTP endpoint prefix
            </summary>
        </member>
        <member name="F:NpSharp.Framework.DefaultSystemProperties.DefaultProperties">
            <summary>list of default system properties</summary>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.InvalidTopologyException">
            <summary>
            Thrown when the system topology configuration is invalid
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidTopologyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.InvalidPluginException">
            <summary>
            Thrown when a plugin is found to be invalid
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidPluginException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.InvalidParameterValueException">
            <summary>
            Attempted to set an invalid parameter value
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.InvalidParameterValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ProxyCompilationException">
            <summary>
            Exception for Proxy Compilation issues.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:NpSharp.Framework.Exceptions.ProxyCompilationException"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ProxyCompilationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ServiceNotFoundException">
            <summary>
            A requested service has not been found
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ServiceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">info</param>
            <param name="context">context</param>
        </member>
        <member name="T:NpSharp.Framework.Exceptions.ValidationException">
            <summary>
            Exception for Validation issues
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:NpSharp.Framework.Exceptions.ValidationException"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Exceptions.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.ExposedServiceDescriptor">
            <summary>
            Holds information for exposed service.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ExposedServiceDescriptor.ServiceContract">
            <summary>
            Service contract type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ExposedServiceDescriptor.ImplementationTypeFullName">
            <summary>
            Gets or sets the name of the service implementation.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.I18N.II18N">
            <summary>
            Interface of the I18N internal service for plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18N.GetTranslation(System.String)">
            <summary>
            Gets the translation associated to the provided I18N key, in the current plugin locale
            </summary>
            <param name="key">The I18N key.</param>
            <returns>The translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18N.GetTranslation(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the translation associated to the provided I18N keys, in the current plugin locale
            </summary>
            <param name="keys">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of I18N keys</param>
            <returns>The associations between I18N keys and translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18N.GetAllTranslations">
            <summary>
            Gets the full I18N translation table for the current plugin locale
            </summary>
            <returns>I18N translation table for the current plugin locale</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IColorDb">
            <summary>
            Interface of the Color DB Internal Service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.SetColor(System.String,System.Drawing.Color)">
            <summary>
            Sets a pair of <see cref="T:System.Drawing.Color"/> into the Color DB.
            </summary>
            <param name="name">The color name.</param>
            <param name="color">The respective <see cref="T:System.Drawing.Color"/>.</param>
            <remarks>
            <para>Note that this operation is additive only:</para>
            <para>If the Color Name being set did not exist previously,
            it will be added into the Color DB with the specified value.</para>
            <para> On the other hand, if the Color Name being set did exist previously,
            its value will be replaced with the specified value.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.SetColors(System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Sets a <see cref="T:System.Collections.Generic.IDictionary`2"/> into the Color DB.
            </summary>
            <param name="colors">The <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <remarks>
            <para>Note that this operation is additive only:</para>
            <para>If the Color Name being set did not exist previously,
            it will be added into the Color DB with the specified value.</para>
            <para> On the other hand, if the Color Name being set did exist previously,
            its value will be replaced with the specified value.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.ReplaceColorDb(System.Collections.Generic.IDictionary{System.String,System.Drawing.Color})">
            <summary>
            Replaces the Color DB entirely,
            storing a brand-new Color DB into the database and,
            if it is loaded into memory, replacing the in-memory Color DB with the received argument.
            </summary>
            <param name="colors">The <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <remarks>
            <para>Note that this operation is destructive:</para>
            <para>If a color that previously existed in the Color DB
            and does not exist in the new Color DB, it will not be present after calling this method.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.GetColor(System.String)">
            <summary>
            Gets a <see cref="T:System.Drawing.Color"/> from the Color DB.
            </summary>
            <param name="name">The color name.</param>
            <returns>The respective <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.GetColors(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IDictionary`2"/> from the Color DB.
            </summary>
            <param name="names">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of color names.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> of Color Name and Color.</returns>
            <remarks>
            <para>T is <see cref="T:System.String"/>.</para>
            <para>TKey is <see cref="T:System.String"/> and represents a Color Name.</para>
            <para>TValue is the respective <see cref="T:System.Drawing.Color"/>.</para>
            </remarks>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IColorDb.GetAllColors">
            <summary>
            Gets all colors from the Color DB.
            </summary>
            <returns>All colors from the in-memory Color DB.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPersistenceDbCommands">
            <summary>
            Defines database operations which are not part of a unit-of-work session
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.DropCollection``1">
            <summary>
            Deletes all documents from the given collection
            </summary>
            <typeparam name="TDocument">type of document (collection)</typeparam>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistenceDbCommands.DropCollectionAsync``1">
            <summary>
            Deletes all documents from the given collection
            </summary>
            <typeparam name="TDocument">type of document (collection)</typeparam>
            <returns>the task</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.L10N.ILocalization">
            <summary>
            Localization internal service for plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDate(System.DateTime)">
            <summary>
            Converts the <see cref="P:System.DateTime.Date"/> of the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> format.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> to be converted.</param>
            <returns>A string representation of the provided <see cref="P:System.DateTime.Date"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDate(System.DateTime,System.String)">
            <summary>
            Converts the <see cref="P:System.DateTime.Date"/> of the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the provided <paramref name="format"/>.
            </summary>
            <param name="date">The <see cref="T:System.DateTime"/> to be converted.</param>
            <param name="format">A standard or custom date format string.</param>
            <returns>A string representation of the provided <see cref="P:System.DateTime.Date"/> as specified by the provided <paramref name="format"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDate(System.String)">
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.DateTime"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="date">A string that contains a date to convert.</param>
            <returns>An object that is equivalent to the date contained in <paramref name="date"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDate(System.String,System.String)">
            <summary>
            Converts the specified string representation of a date to its <see cref="T:System.DateTime"/> equivalent using the provided <paramref name="format"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="date">A string that contains a date to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="date"/>.</param>
            <returns>An object that is equivalent to the date contained in <paramref name="date"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatTime(NpSharp.Framework.Time)">
            <summary>
            Converts the provided <see cref="T:NpSharp.Framework.Time"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> format.
            </summary>
            <param name="time">The <see cref="T:NpSharp.Framework.Time"/> to be converted.</param>
            <returns>A string representation of the provided <see cref="T:NpSharp.Framework.Time"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatTime(NpSharp.Framework.Time,System.String)">
            <summary>
            Converts the provided <see cref="T:NpSharp.Framework.Time"/> to its equivalent string representation using the provided <paramref name="format"/>.
            </summary>
            <param name="time">The <see cref="T:NpSharp.Framework.Time"/> to be converted.</param>
            <param name="format">A standard or custom time format string.</param>
            <returns>A string representation of the provided <see cref="T:NpSharp.Framework.Time"/> as specified by <paramref name="format"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseTime(System.String)">
            <summary>
            Converts the specified string representation of a time to its <see cref="T:NpSharp.Framework.Time"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="time">A string that contains a time to convert.</param>
            <returns>An object that is equivalent to the time contained in <paramref name="time"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseTime(System.String,System.String)">
            <summary>
            Converts the specified string representation of a time to its <see cref="T:NpSharp.Framework.Time"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="time">A string that contains a time to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="time"/>.</param>
            <returns>An object that is equivalent to the time contained in <paramref name="time"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDateTime(System.DateTime)">
            <summary>
            Converts the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> formats.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to be converted.</param>
            <returns>A string representation of the provided <see cref="T:System.DateTime"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDateTime(System.DateTime,System.String)">
            <summary>
            Converts the provided <see cref="T:System.DateTime"/> to its equivalent string representation using the provided <paramref name="format"/>.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to be converted.</param>
            <param name="format">A standard or custom date and time format string.</param>
            <returns>A string representation of the provided <see cref="T:System.DateTime"/> as specified by the provided <paramref name="format"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDateTime(System.String)">
            <summary>
            Converts the specified string representation of a date and tim to its <see cref="T:System.DateTime"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat"/> formats and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="dateTime">A string that contains a date and time to convert.</param>
            <returns>An object that is equivalent to the date and time contained in <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDateTime(System.String,System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent using the provided <paramref name="format"/> and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="dateTime">A string that contains a date and time to convert.</param>
            <param name="format">A format specifier that defines the required format of <paramref name="dateTime"/>.</param>
            <returns>An object that is equivalent to the date and time contained in <paramref name="dateTime"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDecimal(System.Decimal)">
            <summary>
            Converts the numeric value of the provided <paramref name="decimal"/> to its equivalent string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="decimal">The <see cref="T:System.Decimal"/> to be converted.</param>
            <returns>The string representation of the value of the provided <paramref name="decimal"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatDecimal(System.Decimal,System.String,System.String,System.Int32)">
            <summary>
            Converts the numeric value of the provided <paramref name="decimal"/> to its equivalent string representation using the specified <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.
            </summary>
            <param name="decimal">The <see cref="T:System.Decimal"/> to be converted.</param>
            <param name="decimalSeparator">The decimal separator to use.</param>
            <param name="thousandSeparator">The thousand separator to use.</param>
            <param name="decimalPlaces">number of decimal places</param>
            <returns>The string representation of the value of the provided <paramref name="decimal"/> as specified by <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDecimal(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal"/> equivalent using <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="decimal">The string representation of the number to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="decimal"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseDecimal(System.String,System.String,System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:System.Decimal"/> equivalent using the specified <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.
            </summary>
            <param name="decimal">The string representation of the number to convert.</param>
            <param name="decimalSeparator">The decimal separator used in the string representation.</param>
            <param name="thousandSeparator">The thousand separator used in the string representation.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="decimal"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatCurrency(System.Decimal)">
            <summary>
            Converts the numeric value of the provided <paramref name="currency"/> to its equivalent currency string representation using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="currency">The <see cref="T:System.Decimal"/> to be converted.</param>
            <returns>The string representation of the value of the provided <paramref name="currency"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.FormatCurrency(System.Decimal,System.String)">
            <summary>
            Converts the numeric value of the provided <paramref name="currency"/> to its equivalent currency string representation using the specified <paramref name="currencySymbol"/>.
            </summary>
            <param name="currency">The <see cref="T:System.Decimal"/> to be converted.</param>
            <param name="currencySymbol">The string to use as the currency symbol.</param>
            <returns>The string representation of the value of the provided <paramref name="currency"/> as specified by <paramref name="currencySymbol"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseCurrency(System.String)">
            <summary>
            Converts the currency string representation of the provided <paramref name="currency"/> to its <see cref="T:System.Decimal"/> equivalent using the <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.
            </summary>
            <param name="currency">The currency string representation to convert.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="currency"/> as specified by <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals"/>, <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator"/> and <see cref="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.L10N.ILocalization.ParseCurrency(System.String,System.String,System.String,System.String)">
            <summary>
            Converts the currency string representation of the provided <paramref name="currency"/> to its <see cref="T:System.Decimal"/> equivalent using the specified <paramref name="currencySymbol"/>, <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.
            </summary>
            <param name="currency">The currency string representation to convert.</param>
            <param name="currencySymbol">The string used as the currency symbol.</param>
            <param name="decimalSeparator">The decimal separator to use.</param>
            <param name="thousandSeparator">The thousand separator to use.</param>
            <returns>The <see cref="T:System.Decimal"/> number equivalent to the number contained in <paramref name="currency"/> as specified by <paramref name="currencySymbol"/>, <paramref name="decimalSeparator"/> and <paramref name="thousandSeparator"/>.</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DateFormat">
            <summary>
            Gets the format pattern for a date value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.TimeFormat">
            <summary>
            Gets the format pattern for a time value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.DecimalSeparator">
            <summary>
            Gets the string to use as the decimal separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.ThousandSeparator">
            <summary>
            Gets the string to use as the thousand separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyName">
            <summary>
            Gets the name of the currency used in the country/region, formatted in the native language of the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencySymbol">
            <summary>
            Gets the currency symbol associated with the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyDecimals">
            <summary>
            Gets the number of decimal places to use in currency values.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyPositiveFormat">
            <summary>
            Gets the format to be used when formatting a positive currency.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalization.CurrencyNegativeFormat">
            <summary>
            Gets the format to be used when formatting a negative currency.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.L10N.ILocalizationService">
            <summary>
            Extended localization internal service for plugins (contains setter interfaces)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.DateFormat">
            <summary>
            Gets or sets the format pattern for a date value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.TimeFormat">
            <summary>
            Gets or sets the format pattern for a time value.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.DecimalSeparator">
            <summary>
            Gets or sets the string to use as the decimal separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.ThousandSeparator">
            <summary>
            Gets or sets the string to use as the thousand separator in numeric values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyName">
            <summary>
            Gets or sets the name of the currency used in the country/region, formatted in the native language of the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol associated with the country/region.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyDecimals">
            <summary>
            Gets or sets the number of decimal places to use in currency values.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyPositiveFormat">
            <summary>
            Gets or sets the format to be used when formatting a positive currency.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.L10N.ILocalizationService.CurrencyNegativeFormat">
            <summary>
            Gets or sets the format to be used when formatting a negative currency.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb">
            <summary>
            Interface of the Http Media DB internal service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb.GetMediaUrl(System.String,System.String)">
            <summary>
            Gets the HTTP URL of a media.
            </summary>
            <param name="mediaName">The media name.</param>
            <param name="locale">The media locale.</param>
            <returns>The <see cref="T:System.Security.Policy.Url"/> that identifies the media.</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb.Path">
            <summary>
            The base path of this instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.I18N.II18NService">
            <summary>
            Interface of the I18N internal service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.SetTranslation(NpSharp.Framework.InternalServices.I18N.TranslationKey,System.String)">
            <summary>
            Associates the provided <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> with the provided <paramref name="translation"/>.
            </summary>
            <param name="key">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.</param>
            <param name="translation">The translation.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.SetTranslation(System.Collections.Generic.IDictionary{NpSharp.Framework.InternalServices.I18N.TranslationKey,System.String})">
            <summary>
            Adds the mapped <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translation to the existing table.
            </summary>
            <param name="translations">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> -&gt; translation mapping.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.GetTranslation(NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <summary>
            Gets the translation associated to the provided <paramref name="key"/>.
            </summary>
            <param name="key">The provided <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.</param>
            <returns>The translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.GetTranslation(System.Collections.Generic.IEnumerable{NpSharp.Framework.InternalServices.I18N.TranslationKey})">
            <summary>
            Gets the association between the provided <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and the respective translation.
            </summary>
            <param name="keys">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.</param>
            <returns>The associations between <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translation.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.II18NService.GetAllTranslations(System.String)">
            <summary>
            Gets all the associations between <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translation.
            </summary>
            <returns>All the current associations between <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> and translations.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IMediaBroker">
            <summary>
            Interface of the Media Brokerage Internal Service.
            </summary>
            <seealso cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaBroker.GetMediaInfo(System.String,System.String)">
            <summary>
            Returns a new instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> with the provided media file name and locale.
            </summary>
            <param name="mediaFileName">The media file name.</param>
            <param name="locale">The locale.</param>
            <returns>The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> instance.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb">
            <summary>
            Interface of the Media Db Internal Service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.AddMediaRepository(System.String,System.String)">
            <summary>
            Adds a new Media Repository to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance.
            </summary>
            <param name="path">The File System Path to this Media Repository.</param>
            <param name="locale">A string that represents a locale of this Media Repository (null or empty for no locale).</param>
            <returns>Returns true if the repository has been added; otherwise, false.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadMediaAsStream(System.String,System.String)">
            <summary>
            Reads a media from this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance as a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="mediaFileName">The filename of the media.</param>
            <param name="locale">A string that represents the locale of the media (null or empty for no locale).</param>
            <returns>The media stream, or null if not found.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadMedia(System.String,System.String)">
            <summary>
            Reads a <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/> from this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> instance.
            </summary>
            <param name="mediaFileName">The filename of the media.</param>
            <param name="locale">A string that represents the locale of the media (null or empty for no locale).</param>
            <returns>The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/> if it is present into this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>; otherwise, null.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable">
            <summary>
            Interface of Media Alias Table internal service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.SetMediaAlias(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,System.String)">
            <summary>
            Associates a <see cref="T:System.String"/> that represents a media file name with the provided <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
            <param name="mediaAlias">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.</param>
            <param name="mediaFileName">The media file name.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.SetMediaAlias(System.Collections.Generic.IDictionary{NpSharp.Framework.InternalServices.MediaDb.MediaAlias,System.String})">
            <summary>
            Associates a <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and <see cref="T:System.String"/> thar represents a media file name.
            </summary>
            <param name="aliases">The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and <see cref="T:System.String"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.GetMediaFileName(NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <summary>
            Gets the media file name associated with the provided <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
            <param name="mediaAlias">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.</param>
            <returns>The associated media file name.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.GetMediaFileNames(System.Collections.Generic.IEnumerable{NpSharp.Framework.InternalServices.MediaDb.MediaAlias})">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and media file name using the provided <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.
            </summary>
            <param name="aliases">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and media file name.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.IMediaAliasTable.GetAllMediaFileNames">
            <summary>
            Gets all associations between <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/>es and media file name.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> and media file name.</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.Media">
            <summary>
            Represents a Media.
            </summary>
            <seealso cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.Media.#ctor(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.
            </summary>
            <param name="mimeType">The Mime-Type.</param>
            <param name="size">The Media Size in bytes.</param>
            <param name="mediaStream">The media stream.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.Media.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.Media.MimeType">
            <summary>Media Mime-Type.</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.Media.Size">
            <summary>Media Size in bytes.</summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.Media.MediaStream">
            <summary>Media Stream.</summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias">
            <summary>
            Represents a media alias
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> struct with the given locale and alias
            </summary>
            <param name="locale">the locale</param>
            <param name="alias">the alias</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Equals(NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.op_Equality(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <summary>
            Tests whether two specified <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the right of the equality operator.</param>
            <returns>true if the two <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> structures are equal; otherwise, false.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.op_Inequality(NpSharp.Framework.InternalServices.MediaDb.MediaAlias,NpSharp.Framework.InternalServices.MediaDb.MediaAlias)">
            <summary>
            Tests whether two specified <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> that is to the right of the inequality operator.</param>
            <returns>true if the two <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaAlias"/> structures are different; otherwise, false.</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Locale">
            <summary>
            Optional media alias locale (empty or null for "no locale")
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaAlias.Alias">
            <summary>
            Media alias
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo">
            <summary>
            Provides easy access to <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> and <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/> to plugins.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.#ctor(System.String,System.String,NpSharp.Framework.InternalServices.MediaDb.IMediaDb,NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb)">
            <summary>
            Intializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> with the provided <see cref="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaName"/>, <see cref="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaLocale"/> and an instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/> and <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/>.
            </summary>
            <param name="mediaName">The media name.</param>
            <param name="locale">The media locale.</param>
            <param name="mediaDb">The instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IMediaDb"/>.</param>
            <param name="httpMediaDb">The instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.IHttpMediaDb"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.ReadMedia">
            <summary>
            Reads the <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/> associated to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
            </summary>
            <returns>An instance of <see cref="T:NpSharp.Framework.InternalServices.MediaDb.Media"/>.</returns>
            <seealso cref="M:NpSharp.Framework.InternalServices.MediaDb.IMediaDb.ReadMedia(System.String,System.String)"/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.ReadMediaAsStream">
            <summary>
            Reads the <see cref="T:System.IO.Stream"/> associated to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
            </summary>
            <returns>The Media <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.GetMediaUri">
            <summary>
            Gets the <see cref="T:System.Uri"/> associated to this <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/>.
            </summary>
            <returns>The Media <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaName">
            <summary>
            This <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> media name.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.MediaDb.MediaInfo.MediaLocale">
            <summary>
            This <see cref="T:NpSharp.Framework.InternalServices.MediaDb.MediaInfo"/> media locale.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.I18N.TranslationKey">
            <summary>
            Represents the Composite Key of the <see cref="T:NpSharp.Framework.InternalServices.I18N.II18NService"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> with the provided <paramref name="locale"/> and <paramref name="key"/>.
            </summary>
            <param name="locale">This <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.<see cref="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Locale"/>.</param>
            <param name="key">This <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/>.<see cref="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Key"/>.</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.Equals(NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.op_Equality(NpSharp.Framework.InternalServices.I18N.TranslationKey,NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <summary>
            Tests whether two specified <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> structures are equivalent.
            </summary>
            <param name="left">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> that is to the right of the equality operator.</param>
            <returns>true if the two <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> structures are equal; otherwise, false.</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.I18N.TranslationKey.op_Inequality(NpSharp.Framework.InternalServices.I18N.TranslationKey,NpSharp.Framework.InternalServices.I18N.TranslationKey)">
            <summary>
            Tests whether two specified <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> that is to the right of the inequality operator.</param>
            <returns>true if the two <see cref="T:NpSharp.Framework.InternalServices.I18N.TranslationKey"/> structures are different; otherwise, false.</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Locale">
            <summary>
            This key locale.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.I18N.TranslationKey.Key">
            <summary>
            The translation key.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub">
            <summary>
            Message hub internal service for plugins.
            Responsible for implementing the publish-subscribe messaging pattern.
            </summary>
            <see href="http://msdn.microsoft.com/en-us/library/ff649664.aspx"/>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.PublishAsync(System.String)">
            <summary>
            Asynchronously publishes a JSON-formatted message
            </summary>
            <param name="jsonMessage">JSON-formatter message (which MUST include the mandatory 'Topic' property)</param>
            <returns>number of subscribers that received this message</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.PublishAsync(NpSharp.Framework.InternalServices.PubSub.MessageBase)">
            <summary>
            Asynchronously publishes a message
            </summary>
            <param name="message">the message</param>
            <returns>number of subscribers that received this message</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribes for receiving messages from the given topic
            </summary>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="callback">callback message handler</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Subscribe``1(System.String,System.String,System.Action{``0})">
            <summary>
            Subscribes for receiving messages from the given topic, using the given filters
            </summary>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="jsonFilters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Subscribe``1(System.String,System.Object,System.Action{``0})">
            <summary>
            Subscribes for receiving messages from the given topic, using the given filters
            </summary>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="filters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.SubscribeDurable``1(System.String,System.String,System.Action{``0},NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions)">
            <summary>
            Creates a durable subscription for receiving messages from the given topic, using the given filters.
            Durable subscriptions can guarantee message delivery even in cases of failures because the messages are stored in persistent queues.
            </summary>
            <remarks>Calling this method twice has not effect other than changing the callback and filters to be used from now on (the queue will not be emptied)</remarks>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="jsonFilters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
            <param name="options">durable subscription options (pass null to use the default values)</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.SubscribeDurable``1(System.String,System.Object,System.Action{``0},NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions)">
            <summary>
            Creates a durable subscription for receiving messages from the given topic, using the given filters.
            Durable subscriptions can guarantee message delivery even in cases of failures because the messages are stored in persistent queues.
            </summary>
            <remarks>Calling this method twice has not effect other than changing the callback and filters to be used from now on (the queue will not be emptied)</remarks>
            <typeparam name="TMessage">concrete message type to convert JSON messages to</typeparam>
            <param name="topic">the topic to subscribe to</param>
            <param name="filters">optional filters to apply before receiving messages - only messages matching the filters will be passed to the callback</param>
            <param name="callback">callback message handler</param>
            <param name="options">durable subscription options (pass null to use the default values)</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.Unsubscribe(System.String)">
            <summary>
            Unsubscribes from the given topic.
            </summary>
            <remarks>If this is a durable subscription, the subscription will be removed and as well as all queued messages</remarks>
            <param name="topic">the topic to unsubscribe from</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.IMessageHub.UnsubscribeAll">
            <summary>
            Unsubscribes from all topics.
            </summary>
            <remarks>If you have any durable subscriptions, the subscriptions will be removed and as well as all queued messages</remarks>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IMicrokernel">
            <summary>
            Public members of the microkernel, acessible from plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.GetProgramArguments">
            <summary>
            Retrieve the main executable command-line arguments
            </summary>
            <returns>list of arguments</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.AddPluginOnTopology(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Dinamically register a new plugin in the microkernel topology.<br/>
            The plugin will be registered as an infrastructure plugin (not associated to a node, nor service), and will be immediately started.
            </summary>
            <param name="pluginName">The plugin DLL name (E.g.: NpSharp.Plugin.Something.DLL)</param>
            <param name="nodeName">
            Optional topological node name to associate this plugin with.
            If this topological node does not exist, it will be dinamically created and registered in the topology (not associated to any area)
            </param>
            <param name="waitPluginLoad">If true, waits for the plugin load before return</param>
            <param name="loadSingleInstance">If true, only one instance of the plugin will be loaded</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IMicrokernel.Stop(System.Int32)">
            <summary>
            Stops the microkernel with the given exit code
            </summary>
            <param name="exitCode">exit code</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPluginMonitor">
            <summary>
            Plugin Monitor and Info about running plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPluginMonitor.PluginsLoaded(System.Boolean)">
            <summary>
            Get all loaded plugins.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PluginMonitorInfo">
            <summary>
            Plugin Monitor Info
            </summary>    
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Instance">
            <summary>
            Instance ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Node">
            <summary>
            Node name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Service">
            <summary>
            Service ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.ShortName">
            <summary>
            Plugin ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Version">
            <summary>
            Plugin Version
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.State">
            <summary>
            Plugin State
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Memory">
            <summary>
            Plugin Memory Usage
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PluginMonitorInfo.Processor">
            <summary>
            Processor Usage
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.ISystemProperties">
            <summary>
            Internal service which holds generic system-wide properties
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.AddFromArguments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds system properties from a list of command-line arguments.<br/>
            System properties can be defined in the command-line by using the following syntax:
            <b>-DPropertyName=PropertyValue</b>
            </summary>
            <param name="args">command-line arguments</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.Get(System.String,System.String)">
            <summary>
            Retrieve a system-wide property value
            </summary>
            <param name="name">system-wide property name</param>
            <param name="defaultValue">optional default value to return if the property does not exist</param>
            <returns>system-wide property value</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.Get``1(System.String,``0)">
            <summary>
            Retrieve a system-wide property value, converted into the given type
            </summary>
            <typeparam name="T">type to convert to property into</typeparam>
            <param name="name">system-wide property name</param>
            <param name="defaultValue">optional default value to return if the property does not exist</param>
            <returns>system-wide property value</returns>
            <exception cref="T:System.FormatException">if the given property cannot be converted to the given type</exception>
            <exception cref="T:System.OverflowException">if the given property cannot be converted to the given type</exception>
            <exception cref="T:System.InvalidCastException">if the given property cannot be converted to the given type</exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.GetAll">
            <summary>
            Retrieve all known system-wide properties, as a list of key,value pairs
            </summary>
            <returns>system-wide properties</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.Set(System.String,System.String)">
            <summary>
            Dynamically set the value of a system-wide property
            </summary>
            <param name="name">property name</param>
            <param name="value">property value (null to remove the property)</param>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ISystemProperties.SetMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Dynamically set a list of system-wide properties at once
            </summary>
            <param name="properties">list of properties</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IWebHostInternalService">
            <summary>
            Role Interface defining the contract to the internal service responsible to manage web plugin lifecycle and resolve its dependency for IWebHostService
            </summary>
        </member>
        <member name="E:NpSharp.Framework.InternalServices.IWebHostInternalService.PluginStopping">
            <summary>
            Event to indicate whether a Plugin is being stopped.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IWebHostService">
            <summary>
            Internal service which provides webhost infrastructure for plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IWebHostService.Open(System.String)">
            <summary>
            Hosts a WebAPi Plugin
            </summary>
            <param name="siteName">The Base Address for the Web plugin.</param>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.InternalServices"/> namespace contains
            interfaces for NpSharp internal services.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.MessageBase">
            <summary>
            Base abstract class for messages sent via the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageBase.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.MessageBase.#ctor(System.String)">
            <summary>
            Constructs a message with the given topic
            </summary>
            <param name="topic"></param>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.MessageBase.Topic">
            <summary>
            Message topic - this field is MANDATORY for sending out messages
            </summary>
        </member>
        <member name="T:NpSharp.Framework.IPluginContext">
            <summary>
            Interface for acessing the plugin execution context properties
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPluginContext.InstanceName">
            <summary>
            Name of the microkernel instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.IPluginContext.NodeName">
            <summary>
            Name of the topological node where this plugin is running (can be null)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IScheduler">
            <summary>
            Scheduler internal service - abstracts the creation of timers in order for them to be easy to test and monitor in a centralized way
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IScheduler.CreateTimer(System.String,System.Action,System.TimeSpan)">
            <summary>
            Creates a new timer with the given name, callback and due time
            </summary>
            <param name="timerName">timer name (used for monitoring purposes)</param>
            <param name="callback">callback to be executed when the timer triggers</param>
            <param name="dueTime">how long to wait for the timer to be triggered</param>
            <returns>the timer instance</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IScheduler.CreateTimer(System.String,System.Action,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a new periodical timer with the given name, callback, due time and period
            </summary>
            <param name="timerName">timer name (used for monitoring purposes)</param>
            <param name="callback">callback to be executed when the timer triggers</param>
            <param name="dueTime">how long to wait for the timer to be triggered</param>
            <param name="period">how often to trigger the timer after the initial <paramref name="dueTime"/></param>
            <returns>the timer instance</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.ITimer">
            <summary>
            Abstraction over the <see cref="T:System.Threading.Timer"/> in order for them to be easy to test and monitor in a centralized way.
            Timers must be created using the <see cref="T:NpSharp.Framework.InternalServices.IScheduler"/> internal service.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.Int32,System.Int32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter is negative and is not equal to <see cref="F:System.Threading.Timeout.Infinite"/>. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.TimeSpan,System.TimeSpan)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using <see cref="T:System.TimeSpan"/> values to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> representing the amount of time to delay before invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed. Specify negative one (-1) milliseconds to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed. Specify negative one (-1) milliseconds to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter, in milliseconds, is less than -1. </exception><exception cref="T:System.NotSupportedException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter, in milliseconds, is greater than 4294967294. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.UInt32,System.UInt32)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 32-bit unsigned integers to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Change(System.Int64,System.Int64)">
            <summary>
            Changes the start time and the interval between method invocations for a timer, using 64-bit signed integers to measure time intervals.
            </summary>
            
            <returns>
            true if the timer was successfully updated; otherwise, false.
            </returns>
            <param name="dueTime">The amount of time to delay before the invoking the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to prevent the timer from restarting. Specify zero (0) to restart the timer immediately. </param><param name="period">The time interval between invocations of the callback method specified when the <see cref="T:System.Threading.Timer"/> was constructed, in milliseconds. Specify <see cref="F:System.Threading.Timeout.Infinite"/> to disable periodic signaling. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.Timer"/> has already been disposed. </exception><exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter is less than -1. </exception><exception cref="T:System.NotSupportedException">The <paramref name="dueTime"/> or <paramref name="period"/> parameter is greater than 4294967294. </exception>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.ITimer.Dispose(System.Threading.WaitHandle)">
            <summary>
            Releases all resources used by the current instance and signals when the timer has been disposed of.
            </summary>
            
            <returns>
            true if the function succeeds; otherwise, false.
            </returns>
            <param name="notifyObject">The <see cref="T:System.Threading.WaitHandle"/> to be signaled when the Timer has been disposed of. </param><exception cref="T:System.ArgumentNullException">The <paramref name="notifyObject"/> parameter is null. </exception>
        </member>
        <member name="T:NpSharp.Framework.Logging.EmptyLogger">
            <summary>
            A fake <see cref="T:NpSharp.Framework.Logging.ILogger"/> implementation which does nothing
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.ILogger">
            <summary>
            Logger interface
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Logging.ILogger.Write(System.Int32,System.Object[],System.String,System.Int32)">
            <summary>
            Writes a log message
            </summary>
            <param name="logId">Log ID (for plugins, this must be in the plugin's <see cref="P:NpSharp.Framework.PluginBase.LogTable"/></param>
            <param name="args">optional formatting arguments</param>
            <param name="sourceFilePath">caller source file name</param>
            <param name="sourceLineNumber">caller source line number</param>
        </member>
        <member name="M:NpSharp.Framework.Logging.ILogger.WriteDebug(System.Object,System.Exception,System.String,System.Int32)">
            <summary>
            Writes a debug log message
            </summary>
            <param name="message">message</param>
            <param name="ex">optional exception to log stacktrace</param>
            <param name="sourceFilePath">caller source file name</param>
            <param name="sourceLineNumber">caller source line number</param>
        </member>
        <member name="M:NpSharp.Framework.Logging.EmptyLogger.Write(System.Int32,System.Object[],System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Logging.EmptyLogger.WriteDebug(System.Object,System.Exception,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="F:NpSharp.Framework.Logging.EmptyLogger.Instance">
            <summary>
            Singleton instance
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.EventLogLevel">
            <summary>
            Windows Event severity types
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Disabled">
            <summary>
            Does not write into windows events
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Info">
            <summary>
            when an operation was executed successfully
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Warning">
            <summary>
            whenever a "recoverable" error occurs or when an external application should be notified
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.EventLogLevel.Error">
            <summary>
            whenever is raised an error that allows the application to continue running (recoverable errors)
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.LogType">
            <summary>
            Log severity type
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Info">
            <summary>
            when an operation was executed successfully
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Warning">
            <summary>
            whenever a "recoverable" error occurs or when an external application should be notified
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Error">
            <summary>
            whenever is raised an error that allows the application to continue running (recoverable errors)
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Logging.LogType.Fatal">
            <summary>
            when the application stops running or cannot be started
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Messages.DeliverOrderMessage">
            <summary>
            Wrapper for the content of the message sent via the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>
            when the given order is delivered
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Messages.DeliverOrderMessage.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of DeliverOrderMessage
            </summary>
            <param name="orderKey">The order key to be delivered</param>
            <param name="restaurantArea">The Restaurant area from where the order is being delivered</param>
        </member>
        <member name="P:NpSharp.Framework.Messages.DeliverOrderMessage.OrderKey">
            <summary>
            The order key that should be delivered
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Messages.DeliverOrderMessage.RestaurantArea">
            <summary>
            The restaurant area where the order was delivered from
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.RedeemOffersParameters">
            <summary>
            Parameters for the RedeemOffers API
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.RedeemOffersParameters.CustomerId">
            <summary>
            Customer ID
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.RedeemOffersParameters.OffersId">
            <summary>
            List of offer ids
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.RedeemOffersParameters.Overriden">
            <summary>
            Indicates if the override operation was executed for those offers
            </summary>
        </member>
        <member name="T:NpSharp.Framework.CustomData">
            <summary>
            Represents a collection of custom data.
            </summary>
            <remarks>this class is NOT thread-safe</remarks>
        </member>
        <member name="M:NpSharp.Framework.CustomData.Get``1(System.String,``0)">
            <summary>
            Gets the converted data associated to the provided <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <param name="key">The data key.</param>
            <param name="defaultValue">default value to return if the key is not found</param>
            <returns>If the <paramref name="key"/> exists, returns its associated converted data; otherwise, returns the default of <typeparamref name="T"/>.</returns>
            <exception cref="T:System.InvalidCastException">The stored data could not be converted to <typeparamref name="T"/>.</exception>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder">
            <summary>
            Represents a ProductionArea
            </summary>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/> with an empty <see cref="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.ProductionItems"/> list and an empty <see cref="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.CustomData"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.OrderKey">
            <summary>
            Gets or sets the unique order key of the <see cref="T:NpSharp.Framework.OrdersDb.Objects.Sale"/> object associated to this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.RestaurantArea">
            <summary>
            Gets or sets the Restaurant Area Name for this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.OrderId">
            <summary>
            Gets or sets the order ID (how to display this order number to the crew/customer).
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.Status">
            <summary>
            Gets or sets the status of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/> (the status of this order in this specifc production area)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.ProductionItems">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/> being produced by this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionOrder.CustomData">
            <summary>
            Gets the <see cref="T:NpSharp.Framework.CustomData"/> of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem">
            <summary>
            Represents an item to be produced in a specific <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.Objects.ProductionItem.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/> with an empty <see cref="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.Children"/> list and an empty <see cref="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.CustomData"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.ProductCode">
            <summary>
            Gets or sets the Product Code of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.ProductName">
            <summary>
            Gets or sets the Product Name of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.Level">
            <summary>
            Gets or sets the level of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/> in relation to the <see cref="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.Children"/> hierarchy.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.Quantity">
            <summary>
            Gets or sets the quantity of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.Children">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.IList`1"/> of children <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/> of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.ProductionItem.CustomData">
            <summary>
            Gets the <see cref="T:NpSharp.Framework.CustomData"/> of this <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionItem"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.Offers">
            <summary>
            This class represents the offer information of a whole sale
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.Id">
            <summary>
            Gets or sets the ID for this offer.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.TagId">
            <summary>
            Gets or sets the tag ID.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.Override">
            <summary>
            Gets or sets whether the offer was override.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.Applied">
            <summary>
            Whether the current offer has been applied or not
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.ClearAfterOverride">
            <summary>
            Gets or sets the "clear after override".
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.PromotionId">
            <summary>
            Gets or sets the promotiond ID.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.DiscountAmount">
            <summary>
            Gets or sets the discount amount.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Offers.DiscountType">
            <summary>
            Gets or sets the discount type.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.OffersItem">
            <summary>
            This class describes the Offers Item.
            An Offers Item contains offers information of one item sale
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.OffersItem.DiscountAmount">
            <summary>
            Offer discount amount
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.OffersItem.BeforeOfferPrice">
            <summary>
            Item price before offer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.OffersItem.DiscountType">
            <summary>
            Offer discount type
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrderStatus">
            <summary>
            Production Order Status enumerator
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.ProductionOrderStatus.InProgress">
            <summary>
            Order is in progress in production node
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.ProductionOrderStatus.Prepared">
            <summary>
            Order has been prepared
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.ProductionOrderStatus.Delivered">
            <summary>
            Order has been delivered
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Messages.ProductionOrderModifiedMessage">
            <summary>
            Wrapper for the content of the message sent via the <see cref="T:NpSharp.Framework.InternalServices.PubSub.IMessageHub"/>
            when the <see cref="P:NpSharp.Framework.Messages.ProductionOrderModifiedMessage.ProductionOrder"/> is modified
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Messages.ProductionOrderModifiedMessage.#ctor(NpSharp.Framework.OrdersDb.Objects.ProductionOrder)">
            <summary>
            Constructs a new instance of ProductionDataModifiedMessage
            </summary>
            <param name="productionOrder">The modified <see cref="P:NpSharp.Framework.Messages.ProductionOrderModifiedMessage.ProductionOrder"/></param>
        </member>
        <member name="P:NpSharp.Framework.Messages.ProductionOrderModifiedMessage.ProductionOrder">
            <summary>
            The content of the modified <see cref="P:NpSharp.Framework.Messages.ProductionOrderModifiedMessage.ProductionOrder"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.QuerySalesParameters">
            <summary>
            Parameters for the <see cref="M:NpSharp.Framework.OrdersDb.IOrdersDb.QuerySales(NpSharp.Framework.OrdersDb.QuerySalesParameters)"/> API
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.QuerySalesParameters.PosId">
            <summary>
            Optional PosId filter
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.QuerySalesParameters.BusinessDay">
            <summary>
            Optional BusinessDay filter
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.QuerySalesParameters.Status">
            <summary>
            Optional <see cref="T:NpSharp.Framework.OrdersDb.Objects.SaleStatus"/> filter
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.QuerySalesParameters.Limit">
            <summary>
            Optional maximum number of sales to return
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IAsyncPersistenceSession">
            <summary>
            Represents a short-lived asynchronous persistence session.
            The persistence session implements the "unit-of-work" pattern.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.Query``1">
            <summary>
            Dynamically queries the database using LINQ
            </summary>
            <typeparam name="T">Collection to query</typeparam>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.QueryMapReduce``2(NpSharp.Framework.Persistence.PersistenceIndexDefinition{``0,``1})">
            <summary>
            Dynamically queries a database map-reduce index using LINQ
            </summary>
            <typeparam name="T">Index collection type</typeparam>
            <typeparam name="TReduceResult">type of the reduce result</typeparam>
            <param name="indexDefinition">map-reduce index definition</param>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.StoreAsync(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>async task</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.StoreAsync(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity with the specified id.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The entity unique id.</param>
            <returns>async task</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion.
            The entity will be deleted when <see cref="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.SaveChangesAsync"/> is called.
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.DeleteById(System.String)">
            <summary>
            Marks the specified entity ID for deletion
            </summary>
            <param name="id">the id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.LoadAsync``1(System.String)">
            <summary>
            Loads the entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids. 
            </summary>
            <typeparam name="T">document type</typeparam>
            <param name="ids">document ids</param>
            <returns>entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Loads entities with the given ID prefix
            </summary>
            <typeparam name="T">type of entity</typeparam>
            <param name="keyPrefix">ID prefix</param>
            <param name="start">optional number of entities to skip</param>
            <param name="pageSize">max number of entities to retrieve (defaults to 25)</param>
            <param name="exclude">optional ID wild card filtering pattern to exclude</param>
            <returns>array of entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IAsyncPersistenceSession.SaveChangesAsync">
            <summary>
            Saves all the changes performed on this session.
            </summary>
            <returns>async task</returns>
        </member>
        <member name="T:NpSharp.Framework.ProductsDb.IProductsDb">
            <summary>
            Defines the methods to query products
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.IProductsDb.StoreProducts(System.Collections.Generic.IEnumerable{NpSharp.Framework.ProductsDb.Product},System.Int32)">
            <summary>
            Stores a list of products in the database (replaces existing products from the given list)
            </summary>
            <param name="products">list of products to create or update</param>
            <param name="dbVersion">current products database version</param>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.IProductsDb.SetProducts(System.Collections.Generic.IEnumerable{NpSharp.Framework.ProductsDb.Product},System.Int32)">
            <summary>
            Sets the full list of products in the database (clears any existing product in the given <paramref name="dbVersion"/>)
            </summary>
            <param name="products">list of products to set</param>
            <param name="dbVersion">current products database version</param>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.IProductsDb.LoadProductByCode(System.Int32)">
            <summary>
            Loads a single product from the latest product database
            </summary>
            <param name="productCode">product code</param>
            <returns>the <see cref="T:NpSharp.Framework.ProductsDb.Product"/> instance, or <c>null</c> if not found</returns>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.IProductsDb.LoadProductByCodeAndDbVersion(System.Int32,System.Int32)">
            <summary>
            Loads a single product from the given product database version
            </summary>
            <param name="productCode">product code</param>
            <param name="dbVersion">database version</param>
            <returns>the <see cref="T:NpSharp.Framework.ProductsDb.Product"/> instance, or <c>null</c> if not found</returns>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.IProductsDb.LoadProductsByCode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Loads a list of products from the latest products database
            </summary>
            <param name="productCodes">list of product codes</param>
            <returns>list of <see cref="T:NpSharp.Framework.ProductsDb.Product"/> instances</returns>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.IProductsDb.LoadProductsByCodeAndDbVersion(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Loads a list of products from the given products database version
            </summary>
            <param name="productCodes">list of product codes</param>
            <param name="dbVersion">database version</param>
            <returns>list of <see cref="T:NpSharp.Framework.ProductsDb.Product"/> instances</returns>
        </member>
        <member name="T:NpSharp.Framework.ProductsDb.Product">
            <summary>
            Represents a product
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.Product.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NpSharp.Framework.ProductsDb.Product"/> class
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductsDb.Product.Code">
            <summary>
            Gets or sets the product code
            </summary>
        </member>
        <member name="P:NpSharp.Framework.ProductsDb.Product.CustomData">
            <summary>
            Gets or sets custom product data
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ProductsDb.ProductsDbBase">
            <summary>
            Base abstract class for <see cref="T:NpSharp.Framework.ProductsDb.IProductsDb"/> plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.ProductsDbBase.StoreProducts(System.Collections.Generic.IEnumerable{NpSharp.Framework.ProductsDb.Product},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.ProductsDbBase.SetProducts(System.Collections.Generic.IEnumerable{NpSharp.Framework.ProductsDb.Product},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.ProductsDbBase.LoadProductByCode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.ProductsDbBase.LoadProductByCodeAndDbVersion(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.ProductsDbBase.LoadProductsByCode(System.Collections.Generic.IEnumerable{System.Int32})">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ProductsDb.ProductsDbBase.LoadProductsByCodeAndDbVersion(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.GenerateCheckoutCouponResponse">
            <summary>
            Defines the action for generate a checkout coupon.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionActionResponse">
            <summary>
            Base class for all promotion action responses.
            Every <see cref="T:NpSharp.Framework.Promotion.PromotionResponse"/> may generate zero or more <see cref="T:NpSharp.Framework.Promotion.PromotionActionResponse"/>s
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.GenerateCheckoutCouponResponse.PromotionId">
            <summary>
            Gets or sets the ID of the promotion.
            </summary>
            <remarks>The Id for the promotion which the barcode was generated for.</remarks>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.GenerateCheckoutCouponResponse.StartDays">
            <summary>
            Gets or sets the start days for the coupon.
            </summary>
            <remarks>Default value is 0. Indicates how many days, starting from the creation date, should pass before the coupon becomes valid.</remarks>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.GenerateCheckoutCouponResponse.ExpirationDays">
            <summary>
            Gets or sets the expiration days.
            </summary>
            <remarks>Default value is 0. Indicates how many days, starting from the day the coupon is valid, should pass before the coupon becomes expired.</remarks>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.GenerateCheckoutCouponResponse.RedemptionLimit">
            <summary>
            Gets or sets the redemption limit.
            </summary>
            <remarks>Default value is 1. Indicates how many times this coupon can be redeemed.</remarks>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.GenerateCheckoutCouponResponse.AnyStore">
            <summary>
            Gets or sets the any store flag.
            </summary>
            <remarks>Default value is false. Indicates whether the coupon can be redeemed in any store.</remarks>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionSetItem">
            <summary>
            Represents an item in the set of actions for a <see cref="T:NpSharp.Framework.Promotion.AppliedPromotion"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.ActionSetItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionSetItem.Actions">
            <summary>
            List of actions to be executed to apply this promotion
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionSetItem.Items">
            <summary>
            List the matches occurred to make the promotion valid to be applied
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.Language">
            <summary>
            Defines the language element for the promotion descriptions.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.Code">
            <summary>
            Gets or sets the code attribute.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.LanguageName">
            <summary>
            Gets or sets the name attribute.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.Parent">
            <summary>
            Gets or sets the parent attribute.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.Name">
            <summary>
            Gets or sets the name element.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.ShortDescription">
            <summary>
            Gets or sets the short description element.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.LongDescription">
            <summary>
            Gets or sets the long description element.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Language.Question">
            <summary>
            Gets or sets the question element.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionChangedMessage">
            <summary>
            Pub/Sub message that informs about promotion changes.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Promotion.PromotionChangedMessage.TopicDescription">
            <summary>
            Defines the topic of the message. (PromotionChanged)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionChangedMessage.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Promotion.PromotionChangedMessage"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionChangedMessage.PromotionId">
            <summary>
            Gets or sets the promotion ID.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionChangedMessage.Active">
            <summary>
            Gets or sets if the promotion still active.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionChangedMessage.RedemptionMode">
            <summary>
            Gets or sets the redemption mode of the promotion.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionDbChangedMessage">
            <summary>
            Pub/Sub message that informs about any change to the promotion database.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Promotion.PromotionDbChangedMessage.TopicDescription">
            <summary>
            The topic of this message. (PromotionDbChanged)
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionDbChangedMessage.#ctor">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionItem">
            <summary>
            Describes an item match that made the promotion valid
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionItem.Seq">
            <summary>
            Seq of the item which made the promotion valid
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionItem.Qty">
            <summary>
            Quantity matched for the item to make the promotion valid
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionItem.Eligible">
            <summary>
            Indicates if this item is an "elibible item" or not
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.RemovePromotion">
            <summary>
            Represents an promotion that must be removed.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.RemovePromotion.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.Promotion.RemovePromotion"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RemovePromotion.Id">
            <summary>
            Promotion id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RemovePromotion.ShortDescription">
            <summary>
            Short description of the promotion (one line)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RemovePromotion.LongDescription">
            <summary>
            Long description of the promotion (multiple lines).
            This should include all promotion restrictions and details.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RemovePromotion.Causes">
            <summary>
            Remove causes.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.INp6Integrator">
            <summary>
            Service contract for the Np6Integrator plugin
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.INp6Integrator.ExecuteNpSharpCommand(System.String)">
            <summary>
            Executes a generic NpSharp command - this is used for testing purposes only, do not call it directly from plugins!
            </summary>
            <param name="commandXml">command XML</param>
            <returns>command response</returns>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.INp6ViewAdapter">
            <summary>
            Service contract for NP6 View Adapter plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.INp6ViewAdapter.Store(System.Xml.Linq.XElement)">
            <summary>
            Stores a NP6 View in the system database, converts it to
            a <see cref="T:NpSharp.Framework.OrdersDb.Objects.Sale"/> object and store this sale object using the <see cref="T:NpSharp.Framework.OrdersDb.IOrdersDb"/> plugin.
            </summary>
            <param name="element">NP6 View</param>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.INp6ViewAdapter.StoreXml(System.String)">
            <summary>
            Stores a NP6 View in the system database, converts it to
            a <see cref="T:NpSharp.Framework.OrdersDb.Objects.Sale"/> object and store this sale object using the <see cref="T:NpSharp.Framework.OrdersDb.IOrdersDb"/> plugin.
            </summary>
            <param name="xml">NP6 View</param>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.INp6ViewAdapter.QueryByOrderKey(System.String)">
            <summary>
            Query an NP6 view by order key
            </summary>
            <param name="orderKey">order key</param>
            <returns>NP6 view</returns>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.Np6ViewAdapterBase">
            <summary>
            Base class for all NP6 View Adapter plugins
            </summary>
            <seealso cref="T:NpSharp.Framework.IPlugin"/>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.Np6ViewAdapterBase.Store(System.Xml.Linq.XElement)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.Np6ViewAdapterBase.StoreXml(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.Np6ViewAdapterBase.QueryByOrderKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Logging.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Logging"/> namespace contains
            interfaces and objects that can be used to interact with the NpSharp application logging layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Multichannel"/> namespace contains
            interfaces and objects that can be used to interact with the Multichannel functionality.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework"/> namespace contains most basic NpSharp Framework
            definitions, such as the <see cref="T:NpSharp.Framework.IPlugin"/> interface and the <see cref="T:NpSharp.Framework.PluginBase"/> abstract class.<br/>
            It also holds a few extension classes which can be useful for most plugins.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Np6Messaging"/> namespace contains
            interfaces and objects that can be used to interact with the NP6 Messaging integration layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.NpCommand">
            <summary>
            Enum with NP6 commands numbers
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Np6Messaging.NpCommand.ExecuteEcpCommand">
            <summary>
            Defines the command index to execute a eCP command.
            The underlying number must be equal to NP6 command number.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Np6Messaging.NpCommand.ExecuteNpSharpCommand">
            <summary>
            Defines the command index to execute a NpSharp command
            The underlying number must be equal to NP6 command number.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Offers.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Offers"/> namespace contains
            interfaces and objects that can be used to interact with the Offers functionality.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.ElapsedTimeCounter">
            <summary>
            Defines an elapsed time counter.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1">
            <summary>
            Performance Counter base.
            </summary>
            <typeparam name="T">instance type</typeparam>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter">
            <summary>
            Performance Counter base.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a <see cref="T:NpSharp.Framework.PerfCounters.Internals.PerfCounter"/> class.
            </summary>
            <param name="name">Counter ShortName</param>
            <param name="hasBase"><see cref="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.HasBase"/></param>
            <param name="help">Counter Help Message</param>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.Name">
            <summary>
            Counter ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.HasBase">
            <summary>
            If the counter needs a AverageBase to be calculated.
            See: http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.performancecountertype(v=vs.100).aspx
            or <see cref="T:System.Diagnostics.PerformanceCounterType"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.Help">
            <summary>
            Counter help message.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.PerfCounter.CounterType">
            <summary>
            Gets the performance counter type
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1.#ctor(System.String,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1.Get(System.String)">
            <summary>
            Returns a counter instance by its instance name.
            </summary>
            <param name="instanceName">The instance name of the counter instance.</param>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.PerfCounter`1.CreateCounterInstance(System.String)">
            <summary>
            Retrieves a counter instance by its name.
            </summary>
            <param name="instanceName">ShortName of the counter instance.</param>
            <returns>An instance of counter instance.</returns>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.ElapsedTimeCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.ElapsedTimeCounter"/>.
            </summary>
            <param name="name">The counter name.</param>
            <param name="help">The counter help text.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.ElapsedTimeCounter.CreateCounterInstance(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.ElapsedTimeCounter.CounterType">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IntegerCounter">
            <summary>
            A Integer Counter <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IntegerCounter.#ctor(System.String,System.String)">
            <summary>
            Initializes a <see cref="T:NpSharp.Framework.PerfCounters.IntegerCounter"/>
            </summary>        
            <param name="counterName">Counter ShortName</param>
            <param name="help">Counter's help message</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IntegerCounter.CreateCounterInstance(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.IntegerCounter.CounterType">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper">
            <summary>
            Wraps some aspects of Windows Performance Counter
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper.IncrementBy(System.Int64,System.String,System.String)">
            <summary>
            It will increment by a value if the counter exists.
            </summary>
            <param name="value">Value to increment by</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>        
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper.SetAvg(System.Int64,System.Int64,System.String,System.String)">
            <summary>
            It will set an average value calculated by the totalTime / samples if counter exists.
            </summary>
            <param name="totalTime">Total elapsed time</param>
            <param name="samples">Quantity of samples collected</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IPerfCounterWrapper.SetRaw(System.Int64,System.String,System.String)">
            <summary>
            Sets the raw value of a performance counter
            </summary>
            <param name="value">Raw value to set</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>        
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.Dispose(System.Boolean)">
            <summary>
            Dispose resources.
            </summary>
            <param name="disposing">if <c>true</c> dispose managed resources, otherwise, dispose unmanaged resources.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper"/>.
            </summary>
            <param name="categoryName">The name of the category.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.IncrementBy(System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.SetRaw(System.Int64,System.String,System.String)">
            <summary>
            Sets the raw value of a performance counter
            </summary>
            <param name="value">Raw value to set</param>
            <param name="counterName">Counter ShortName</param>
            <param name="instanceName">Instance ShortName</param>        
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.DefaultPerfCounterWrapper.SetAvg(System.Int64,System.Int64,System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance">
            <summary>
            Defines an elapsed time counter instance.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.CounterInstance">
            <summary>
            Counter Instance for a Performance Counter
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterInstance">
            <summary>
            Represents a performance counter instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.IPerfCounterInstance.Name">
            <summary>
            Gets the name of the counter instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.IPerfCounterInstance.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.CounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.CounterInstance"/>.
            </summary>
            <param name="name">The name of the instance.</param>
            <param name="counterName">The name of the counter.</param>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.CounterInstance.Name">
            <summary>
            Gets the name of the counter instance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.Internals.CounterInstance.CounterName">
            <summary>
            Gets the name of the counter.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterElapsedTimeInstance">
            <summary>
            Defines an elapsed time counter instance.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IPerfCounterElapsedTimeInstance.Register">
            <summary>
            Registers the current elapsed ticks in the performance counter instance
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance"/>.
            </summary>
            <param name="instanceName">The name of the counter instance.</param>
            <param name="counterName">The name of the counter.</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.ElapsedTimeCounterInstance.Register">
            <summary>
            Registers the current elapsed ticks in the performance counter instance
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.NamespaceDoc">
            <summary>
            Contains internal framework objects NpSharp Perfomance Counters layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterAvgInstance">
            <summary>
            An average value counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.IPerfCounterInstance"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IPerfCounterAvgInstance.SetAvg(System.Int64,System.Int32)">
            <summary>
            Set the average value of totalValue / sample.
            </summary>
            <param name="totalValue">Total value</param>
            <param name="samples">Number of samples measured.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.IPerfCounterIntegerInstance">
            <summary>
            A integer counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.IPerfCounterInstance"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.IPerfCounterIntegerInstance.IncrementBy(System.Int64)">
            <summary>
            Increment actual counter value by specified value.
            </summary>
            <param name="value">Value to increment the actual counter value.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance">
            <summary>
            An average timer counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.AvgTimer"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes <see cref="T:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance"/> class.
            </summary>
            <param name="name">Instance ShortName</param>
            <param name="counterName">Counter ShortName</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.AvgCounterInstance.SetAvg(System.Int64,System.Int32)">
            <summary>
            Set a average of totalTime / sample.
            </summary>
            <param name="totalTime">Total elapsed time</param>
            <param name="samples">Number of samples measured.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.AvgTimer">
            <summary>
            An average timer counter. <see cref="F:System.Diagnostics.PerformanceCounterType.AverageTimer32"/>
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.AvgTimer.#ctor(System.String,System.String)">
            <summary>
            Initializes <see cref="T:NpSharp.Framework.PerfCounters.AvgTimer"/> class.
            </summary>
            <param name="counterName">Counter ShortName</param>
            <param name="help">Counters Help Message</param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.AvgTimer.CreateCounterInstance(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.PerfCounters.AvgTimer.CounterType">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance">
            <summary>
            A integer counter Instance of <see cref="T:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance.#ctor(System.String,System.String)">
            <summary>
            Initializes <see cref="T:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance"/> class.
            </summary>
            <param name="name"></param>
            <param name="counterName"></param>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.Internals.IntegerCounterInstance.IncrementBy(System.Int64)">
            <summary>
            Increment actual counter value by specified value.
            </summary>
            <param name="value">Value to increment the actual counter value.</param>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.Internals.PerfCounterWrapperSelector">
            <summary>
            Select PerfCounter Wrapper based on Windows Identity
            </summary>
        </member>
        <member name="F:NpSharp.Framework.PerfCounters.Internals.PerfCounterWrapperSelector.PerformanceCounter">
            <summary>
            Get a performance counter depended on if user is Administrator
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.PerfCounters"/> namespace contains
            interfaces and objects that can be used to interact with the NpSharp Perfomance Counters layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PerfCounters.PerfCounterHolder">
            <summary>
            Class which holds all plugins counters.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PerfCounters.PerfCounterHolder.GetPerfCounters">
            <summary>
            Retrieve the list of performance counters declared on this holder
            </summary>
            <returns>list of performance counters</returns>
        </member>
        <member name="T:NpSharp.Framework.Persistence.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Persistence"/> namespace contains
            interfaces and objects that can be used to interact with the NpSharp Persistence layer.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginServiceTypeAttribute">
            <summary>
            Marks the plugin with a "service type", which indicates that this plugin should, by default, be loaded
            when the given service is configured on a logical node
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginServiceTypeAttribute.#ctor(System.String)">
            <summary>
            Marks the plugin with a "service type", which indicates that this plugin should, by default, be loaded
            when the given service is configured on a logical node
            </summary>
            <param name="serviceType">Service type</param>
        </member>
        <member name="P:NpSharp.Framework.PluginServiceTypeAttribute.ServiceType">
            <summary>
            Service type
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginTagsAttribute">
            <summary>
            Marks the plugin with one or more "tags", which can be used to filter and classify plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginTagsAttribute.#ctor(System.String[])">
            <summary>
            Marks the plugin with one or more "tags", which can be used to filter and classify plugins
            </summary>
            <param name="tags">Array of plugin tags</param>
        </member>
        <member name="P:NpSharp.Framework.PluginTagsAttribute.Tags">
            <summary>
            Array of plugin tags
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.CustomerFavorites">
            <summary>
            Customer Favorites from ECP
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.EcpResult">
            <summary>
            ECP Server result code
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.EcpResult.ToXml">
            <summary>
            Create a Xml
            </summary>
            <returns><see cref="T:System.Xml.Linq.XElement"/></returns>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.EcpResult.GetSchema">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.EcpResult.ReadXml(System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.EcpResult.WriteXml(System.Xml.XmlWriter)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.CustomerFavorites.ToXml">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerFavorites.Id">
            <summary>
            Product Id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerFavorites.Name">
            <summary>
            Product ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerFavorites.Favorites">
            <summary>
            Customer favorites
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.CustomerInfo">
            <summary>
            Customer info from ECP
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.CustomerInfo.ToXml">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.Id">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.FirstName">
            <summary>
            Customer First ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.Gender">
            <summary>
            Customer Gender
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.LastName">
            <summary>
            Customer Last ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.MiddleName">
            <summary>
            Customer Middle ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.NickName">
            <summary>
            Customer Nickname
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.MonthOfBirth">
            <summary>
            Customer Month Of Birth
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.YearOfBirth">
            <summary>
            Customer Year Of Birth
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.PreferredLanguage">
            <summary>
            Customer Preferred Language
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.CustomerInfo.Title">
            <summary>
            Customer Title
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.Favorite">
            <summary>
            Product
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.Favorite.Id">
            <summary>
            Favorite Id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.Favorite.Name">
            <summary>
            Favorite ShortName
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.Favorite.Products">
            <summary>
            Favorites Products
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.MultichannelBase">
            <summary>
            Base abstract class for <see cref="T:NpSharp.Framework.Multichannel.IMultichannel"/> plugin implementations
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.IMultichannel">
            <summary>
            Multichannel to comunicate with ECP
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.GetCustomerData(System.String)">
            <summary>
            Get CustomerData from ECP Web Service
            </summary>
            <param name="userName">User name</param>
            <returns>Customer Info</returns>
            <exception cref="T:NpSharp.Framework.Exceptions.MultichannelEcpServerException">when there is an error communicating with ECP, or ECP returned an error</exception>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.GetFavorites(System.String)">
            <summary>
            Get Customer Favorites
            </summary>
            <param name="userName">User name</param>
            <returns>Customer Favorites</returns>
            <exception cref="T:NpSharp.Framework.Exceptions.MultichannelEcpServerException">when there is an error communicating with ECP, or ECP returned an error</exception>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.GetCustomerOffersData(System.String)">
            <summary>
            Get offers data from a customer
            </summary>
            <param name="tagId"></param>
            <returns></returns>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.RedeemOffers(NpSharp.Framework.Multichannel.RedeemOffersParameters)">
            <summary>
            Redeem an offer in the server
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.GenerateCheckoutCoupon(NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest)">
            <summary>
            Generate a new checkout coupon in the server
            </summary>
            <param name="request">checkout coupon request</param>
            <returns>generated checkout coupon data</returns>
            <exception cref="T:System.ArgumentException">when any of the parameters in the request is invalid</exception>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.GetCheckoutCoupon(System.String)">
            <summary>
            Retrieves the checkout coupon data, given its coupon code
            </summary>
            <param name="couponCode">The checkout coupon code.</param>
            <returns>Checkout coupon data</returns>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException">when the coupon code version is not supported (new coupon scanned on old software version)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException">when the coupon code signature is invalid</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException">when the coupon code is valid but was not found in the database (probably was created by another store)</exception>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.RedeemCheckoutCoupon(System.String)">
            <summary>
            Redeem the checkout coupon by its coupon code.
            </summary>
            <param name="couponCode">The checkout coupon code.</param>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponVersionException">when the coupon code version is not supported (new coupon scanned on old software version)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.InvalidCouponSignatureException">when the coupon code signature is invalid</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotFoundException">when the coupon code is valid but was not found in the database (probably was created by another store)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponNotValidYetException">when the coupon is not valid yet (future start date)</exception>
            <exception cref="T:NpSharp.Framework.CheckoutCoupon.CouponExpiredException">when the coupon has already expired</exception>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.IMultichannel.CancelCheckoutCoupon(System.String)">
            <summary>
            Cancels a coupon on server
            </summary>
            <param name="couponCode">The coupon to be canceled</param>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.GetCustomerData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.GetFavorites(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.GetCustomerOffersData(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.RedeemOffers(NpSharp.Framework.Multichannel.RedeemOffersParameters)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.GenerateCheckoutCoupon(NpSharp.Framework.CheckoutCoupon.GenerateCheckoutCouponRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.GetCheckoutCoupon(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.RedeemCheckoutCoupon(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.MultichannelBase.CancelCheckoutCoupon(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Multichannel.ProductBase">
            <summary>
            Base for product
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Multichannel.ProductBase.#ctor">
            <summary>
            Initializes Choices and Customizations
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.ProductBase.Code">
            <summary>
            Product Code
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.ProductBase.Quantity">
            <summary>
            Product quantity
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.ProductBase.Choices">
            <summary>
            Favorite Choices
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Multichannel.ProductBase.Customizations">
            <summary>
            Favorite Customizations
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IndexedAttribute">
            <summary>
            Marks an entity property as indexed in the database.
            Note that the entity containing this property MUST be annotated with the <see cref="T:NpSharp.Framework.Persistence.EntityAttribute"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Logging.LogDescriptor">
            <summary>
            Log descriptor
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Logging.LogDescriptor.#ctor(System.Int32,System.String,NpSharp.Framework.Logging.LogType,System.Int32,NpSharp.Framework.Logging.EventLogLevel,System.String,System.String)">
            <summary>
            Log Descriptor.
            </summary>
            <param name="id"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Id"/></param>
            <param name="message"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Message"/></param>
            <param name="severity"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Severity"/></param>
            <param name="eventLogId"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.EventLogId"/></param>
            <param name="eventLogType"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.EventLogType"/></param>
            <param name="logPossibleCause"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleCause"/></param>
            <param name="logPossibleSolution"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleSolution"/></param>
            <remarks>When <see cref="T:NpSharp.Framework.Logging.EventLogLevel"/> is diferente of <see cref="F:NpSharp.Framework.Logging.EventLogLevel.Disabled"/> will write into Windows Event.</remarks>
        </member>
        <member name="M:NpSharp.Framework.Logging.LogDescriptor.#ctor(System.Int32,System.String,NpSharp.Framework.Logging.LogType)">
            <summary>
            Write the message into the Log File.
            </summary>
            <param name="id"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Id"/></param>
            <param name="message"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Message"/></param>
            <param name="severity"><see cref="P:NpSharp.Framework.Logging.LogDescriptor.Severity"/></param>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.Id">
            <summary>
            The Log Id to register into Log Table.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.Severity">
            <summary>
            Severity of log type. <see cref="T:NpSharp.Framework.Logging.LogType"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.EventLogId">
            <summary>
            Window Evento Log Id.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.EventLogType">
            <summary>
            Windows Event Log Severity. <see cref="T:NpSharp.Framework.Logging.EventLogLevel"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleCause">
            <summary>
            Possible cause which created the Windows Event Log.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Logging.LogDescriptor.LogPossibleSolution">
            <summary>
            Possible solution to fix the error.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IPersistenceQueryable`1">
            <summary>
            Persistence component query interface
            </summary>
            <typeparam name="T">entity type</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Statistics(NpSharp.Framework.Persistence.IPersistenceQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records.
            Note that only persistence component queries are accepted here, otherwise an exception is thrown.
            </summary>
            <param name="stats">output statistics</param>
            <returns>persistence component query (for fluent calls)</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns>persistence component query (for fluent calls)</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceQueryable`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns>persistence component query (for fluent calls)</returns>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IPersistenceQueryStatistics">
            <summary>
            Statistics about a persistence component query.
            Such as how many records match the query.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.IsStale">
            <summary>Whatever the query returned potentially stale results</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.DurationMilliseconds">
            <summary>The duration of the query _server side_</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.TotalResults">
            <summary>Total count of the results that matched the query</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.SkippedResults">
            <summary>Number of skipped results</summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.IPersistenceQueryStatistics.Timestamp">
            <summary>The time when the query results were unstale.</summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.EntityAttribute">
            <summary>
            Marks a class as a persistent entity, which can be stored and queried using the persistence API.
            Note that using this attribute is only required if your entity has other persistence
            meta-data attributes, such as the the <see cref="T:NpSharp.Framework.Persistence.IndexedAttribute"/>
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceIndexDefinition">
            <summary>
            Abstract base class for PersistenceIndexDefinition
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceIndexDefinition.#ctor(System.Type,System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="indexDocumentType">Entity document type</param>
            <param name="indexReduceResultType">Reduce result type</param>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition.IndexName">
            <summary>
            Optional index name (the default will be the class name).
            Note that this will be automatically prefixed by the plugin namespace.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition.IndexDocumentType">
            <summary>
            Entity document type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition.IndexReduceResultType">
            <summary>
            Reduce result type
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2">
            <summary>
            Represents a persistence map-reduce index definition
            </summary>
            <typeparam name="TDocument">Entity document type</typeparam>
            <typeparam name="TReduceResult">Reduce result type</typeparam>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.Map">
            <summary>
            Index "Map" function
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceIndexDefinition`2.Reduce">
            <summary>
            Optional index "Reduce" function
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceIndexDefinition`1">
            <summary>
            Represents a simple persistence index definition
            </summary>
            <typeparam name="TDocument">entity document type</typeparam>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.INp6MessagingController">
            <summary>
            Np6 Messaging interface
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.Initialize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes the messaging controller.
            </summary>
            <param name="multiHomebase">Indicates what is the Ip Homebase for Multicast interactions</param>
            <param name="multicastIp">Indicates which Ip is being used for Multicast interactions</param>
            <param name="multicastPort">Indicates which Port is used for Multicast interactions</param>
            <param name="multicastTtl">Indicates what is the Time To Live for Multicast interactions</param>
            <param name="nIsServer">Indicates wether it is a Server</param>
            <param name="nServerPort">Indicates what is the server port</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.Close">
            <summary>
            Close connection.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.SendReceive(System.Int16,System.String,System.String,System.Byte[],System.Byte[])">
            <summary>
            Sends a message and receives a message back
            </summary>
            <param name="command">The Message's command</param>
            <param name="sender">The Message's sender</param>
            <param name="receiver">The message's receiver</param>
            <param name="param">The command's parameters</param>
            <param name="message">The message being passed</param>
            <returns>The message in response to the message sengl</returns>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.AddResource(System.String)">
            <summary>
            Adds a Resource to the context
            </summary>
            <param name="resourceName">Resource ShortName</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.AddMsgHandler(System.Int16,System.String,NpSharp.Framework.Np6Messaging.MsgCallbackEx)">
            <summary>
            Adds a Messaging Handler to the context
            </summary>
            <param name="command">The command Id</param>
            <param name="resourceName">The name of the resource that will handle messages of the provided command.</param>
            <param name="handler">The delegate to handle messages</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.RemoveResource(System.String,System.Boolean)">
            <summary>
            Removes a Resource added to the context
            </summary>
            <param name="resourceName">Resource name</param>
            <param name="annouce">true to announce via multicast</param>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.INp6MessagingController.RemoveMsgHandler(System.Int16,System.String)">
            <summary>
            Remove a Messaging Handler added to the context
            </summary>
            <param name="command">Command Id</param>
            <param name="resourceName">The name of the resouce that will stop handling messages of the provided command.</param>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.MsgCallbackEx">
            <summary>
            Caller back for the SendReceive method.
            </summary>
            <param name="msgDesc">Message being sent.</param>
            <param name="source">Source of the message.</param>
        </member>
        <member name="T:NpSharp.Framework.Np6Messaging.NpMessage">
            <summary>
            Represents a Message on Messaging Protocol for use to communicate between resources.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Np6Messaging.NpMessage.#ctor(System.Int16,System.Byte[],System.Byte[],System.String)">
            <summary>
            Instantiate a new NpMessage describing the nature of the message to be sent.
            </summary>
            <param name="command" cref="P:NpSharp.Framework.Np6Messaging.NpMessage.Command">The Command Id for the receiver</param>
            <param name="param" cref="P:NpSharp.Framework.Np6Messaging.NpMessage.Param">The command parameters</param>
            <param name="payload" cref="P:NpSharp.Framework.Np6Messaging.NpMessage.Payload">The message payload</param>
            <param name="destination" cref="P:NpSharp.Framework.Np6Messaging.NpMessage.Destination">The message's destination</param>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Payload">
            <summary>
            The message's payload.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Command">
            <summary>
            The Command Id for the resource which will receive the message
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Param">
            <summary>
            The command parameters to the resource to run it.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Np6Messaging.NpMessage.Destination">
            <summary>
            The resource which the message will be destinated for.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Offers.OffersClientBase">
            <summary>
            Base abstract class for Offers Client Plugins
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Offers.IOffersClient">
            <summary>
            Service Contract for the Offers Client
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Offers.IOffersClient.RetrieveCustomerInfo(System.String,System.Boolean)">
            <summary>
            Retrieve the customer info for a TagId
            </summary>
            <param name="tagId">TagId for the Customer</param>
            <param name="ignoreCachedData">Ignores previously retrieved data for the customer.</param>
            <returns>Customer Data</returns>
        </member>
        <member name="M:NpSharp.Framework.Offers.IOffersClient.RunOffer(NpSharp.Framework.Offers.RunOfferRequest)">
            <summary>
            Apply offers actions to a promotion request according to the promotion conditions.
            </summary>
            <param name="runOfferRequest">The Promotion Request and Customer Id</param>
            <returns>Promotion Response with applied offer actions</returns>
        </member>
        <member name="M:NpSharp.Framework.Offers.IOffersClient.RedeemCustomerSelectedOffer(System.Int32,System.Boolean)">
            <summary>
            Redeem Customer selected Offer
            </summary>
            <param name="customerId">Customer Id</param>
            <param name="overriden">Indicates if the Offer was redeemed overriden</param>
        </member>
        <member name="M:NpSharp.Framework.Offers.IOffersClient.CreateOffersReport(System.Int32,System.Int32)">
            <summary>
            Creates the Offers XML report for the given business day and posId
            </summary>
            <param name="businessDay">Business day</param>
            <param name="posId">optional posId (or zero for all - storewide)</param>
            <returns>Offers XML report</returns>
        </member>
        <member name="M:NpSharp.Framework.Offers.OffersClientBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Offers.OffersClientBase.RetrieveCustomerInfo(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Offers.OffersClientBase.RunOffer(NpSharp.Framework.Offers.RunOfferRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Offers.OffersClientBase.RedeemCustomerSelectedOffer(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Offers.OffersClientBase.CreateOffersReport(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Offers.CustomerData">
            <summary>
            DTO for Customer Data Transport
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.Id">
            <summary>
            Local Id of the user
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.TagId">
            <summary>
            TagId of the user
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.Email">
            <summary>
            Email of the user
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.DisplayName">
            <summary>
            Display ShortName of the User
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.DisplayNameAnsi">
            <summary>
            Display ShortName of the User in plain ASCII
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.SelectedOffer">
            <summary>
            Selected Offer of the user
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.CustomerData.ServerId">
            <summary>
            Id of the user on the server
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Offers.OfferData">
            <summary>
            DTO for Offers transport
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Offers.OfferData.ToXml(System.IO.Stream,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Serializes this promotion as an XML
            </summary>
            <param name="stream">output stream</param>
            <param name="omitXmlDeclaration">whether to omit the XML declaration or not</param>
            <param name="indent">whether to indent the output XML or not</param>
            <param name="encoding">output encoding - the default is UTF8 without BOM</param>
        </member>
        <member name="M:NpSharp.Framework.Offers.OfferData.ToString">
            <summary>
            Get a string representation of the Offer
            </summary>
            <returns>The Offer's string representation</returns>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.Id">
            <summary>
            Id for persistence concerns
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.LocalValidFrom">
            <summary>
            Validation begining
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.LocalValidThru">
            <summary>
            Validation end
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.ShortDescription">
            <summary>
            Short Description of the Offer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.LongDescription">
            <summary>
            Long description of the offer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.OfferType">
            <summary>
            Type of the Offer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.Parameters">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.PromotionId">
            <summary>
            Id of the Promotion on the server
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.PromotionXml">
            <summary>
            Id of the Promotion on the server
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.PromotionTemplate">
            <summary>
            Promotion template in XML for the Promotion Engine
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.Selected">
            <summary>
            Flag indicating if the offer is selected.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.ThresholdMinutes">
            <summary>
            Threshold minutes for acceptance tolerance.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.ParticipantRestaurants">
            <summary>
            List of Participant Restaurants Ids
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.Redeemed">
            <summary>
            Redeemed
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.OfferData.ServerId">
            <summary>
            ServerId
            </summary>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.IPersistence">
            <summary>
            Interface for the persistence component provided by the microkernel.
            Plugins should [Import] this interface for persisting any desired data.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistence.OpenSession">
            <summary>
            Opens a new persistence session, which must be disposed after usage.
            </summary>
            <returns>session</returns>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.IPersistence.OpenAsyncSession">
            <summary>
            Opens a new asynchronous persistence session, which must be disposed after usage.
            </summary>
            <returns>session</returns>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.IPersistence.DbCommands">
            <summary>
            Retrieves the <see cref="T:NpSharp.Framework.InternalServices.IPersistenceDbCommands"/> to interact with this persistence database
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.IPersistenceSession">
            <summary>
            Represents a short-lived persistence session.
            The persistence session implements the "unit-of-work" pattern.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Query``1">
            <summary>
            Dynamically queries the database using LINQ
            </summary>
            <typeparam name="T">Collection to query</typeparam>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.QueryMapReduce``2(NpSharp.Framework.Persistence.PersistenceIndexDefinition{``0,``1})">
            <summary>
            Dynamically queries a database map-reduce index using LINQ
            </summary>
            <typeparam name="T">Index collection type</typeparam>
            <typeparam name="TReduceResult">type of the reduce result</typeparam>
            <param name="indexDefinition">map-reduce index definition</param>
            <returns>The result of the query</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Store(System.Object)">
            <summary>
            Stores the specified dynamic entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Store(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity with the specified id.
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The entity unique id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion.
            The entity will be deleted when <see cref="M:NpSharp.Framework.Persistence.IPersistenceSession.SaveChanges"/> is called.
            </summary>
            <typeparam name="T">type</typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.DeleteById(System.String)">
            <summary>
            Marks the specified entity ID for deletion
            </summary>
            <param name="id">the id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Load``1(System.String)">
            <summary>
            Loads the entity with the specified id.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified entities with the specified ids. 
            </summary>
            <typeparam name="T">document type</typeparam>
            <param name="ids">document ids</param>
            <returns>entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.LoadStartingWith``1(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Loads entities with the given ID prefix
            </summary>
            <typeparam name="T">type of entity</typeparam>
            <param name="keyPrefix">ID prefix</param>
            <param name="matches">optional ID wildcard filtering pattern match (both ? and * are allowed wildcards)</param>
            <param name="start">optional number of entities to skip</param>
            <param name="pageSize">max number of entities to retrieve (defaults to 25)</param>
            <param name="exclude">optional ID wild card filtering pattern to exclude</param>
            <returns>array of entities</returns>
        </member>
        <member name="M:NpSharp.Framework.Persistence.IPersistenceSession.SaveChanges">
            <summary>
            Saves all the changes performed on this session.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Persistence.PersistenceNamespaceAttribute">
            <summary>
            Customizes the persistence namespace for a plugin.<br/>
            By default, the persistence component uses the plugin's short-name as its namespace, which should be
            enough for most scenarios.<br/>
            If necessary, a plugin can be annotated with this attribute to indicate a different persistence namespace.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Persistence.PersistenceNamespaceAttribute.#ctor(System.String)">
            <summary>
            Customizes the persistence namespace for a plugin.<br/>
            By default, the persistence component uses the plugin's short-name as its namespace, which should be
            enough for most scenarios.<br/>
            If necessary, a plugin can be annotated with this attribute to indicate a different persistence namespace.
            </summary>
            <param name="persistenceNamespace">Persistence namespace to use on this plugin</param>
        </member>
        <member name="P:NpSharp.Framework.Persistence.PersistenceNamespaceAttribute.PersistenceNamespace">
            <summary>
            Persistence namespace to use on this plugin
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Offers.ParameterData">
            <summary>
            DTO for Offers Parameters transport
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.ParameterData.Id">
            <summary>
            Id for persistence concerns
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.ParameterData.Name">
            <summary>
            ShortName of the Parameter
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.ParameterData.Value">
            <summary>
            Value of the Parameter
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Offers.RunOfferRequest">
            <summary>
            Represents a request to Run Offer over a Promotion Request
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.RunOfferRequest.PromotionRequest">
            <summary>
            Promotion Request wich the offer will be run upon
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Offers.RunOfferRequest.CustomerId">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="T:NpSharp.Framework.PluginDescriptor">
            <summary>
            Describe all properties of a plugin
            </summary>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.Equals(NpSharp.Framework.PluginDescriptor)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.HasMetaDataAttribute``1">
            <summary>
            Checks of this plugin has the given meta-data attribute
            </summary>
            <typeparam name="T">attribute type</typeparam>
            <returns>true if this metadata attribute is defined for this plugin</returns>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.GetMetaDataAttribute``1">
            <summary>
            Retrieve the first meta-data attribute for the given attribute type, or null if none is found
            </summary>
            <typeparam name="T">attribute type</typeparam>
            <returns>attribute or null</returns>
        </member>
        <member name="M:NpSharp.Framework.PluginDescriptor.GetMetaDataAttributes``1">
            <summary>
            Retrieve all meta-data attributes for the given attribute type
            </summary>
            <typeparam name="T">attribute type</typeparam>
            <returns>attributes</returns>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.PluginTypeFullName">
            <summary>
            Type name of the class inheriting from <see cref="T:NpSharp.Framework.PluginBase"/>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AssemblyFullName">
            <summary>
            ShortName of the assembly containing the plugin implementation
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AssemblyFile">
            <summary>
            File name of the DLL containing the plugin implementation
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.Version">
            <summary>
            Plugin version
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.PrivateFolder">
            <summary>
            ShortName of the plugin "private folder" (the folder containing the plugin DLLs and resources)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.AssemblyLocation">
            <summary>
            Gets or sets the full path to the assembly file.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.ShortName">
            <summary>
            Gets or sets the plugin's short name.
            The short name is determined by the last part of the assembly file name, without extension.
            </summary>
            <example>
            For a plugin assembly file named "Company.Product.MyPlugin.dll", the short name would be "MyPlugin"
            </example>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.ServiceContract">
            <summary>
            Gets or sets the Plugin's service contract.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.MetaDataAttributes">
            <summary>
            Gets or sets the meta-data attributes on this plugin instance
            </summary>
        </member>
        <member name="P:NpSharp.Framework.PluginDescriptor.PerfCounters">
            <summary>
            Gets or sets the plugin's performance counters
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.AddItemResponse">
            <summary>
            Response for an AddItem Action
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.ActionResponses.AddItemResponse.#ctor">
            <summary>
            Instantiates a new Add Item Response
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.AddItemResponse.Code">
            <summary>
            The Code of the Item (or codes, if multiple they will be pipe-separated)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.AddItemResponse.NewSeq">
            <summary>
            The Seq which will be assigned to the new Item
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.AddItemResponse.Qty">
            <summary>
            The quantity to be assigned to the new item
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.AddItemResponse.Price">
            <summary>
            The price to be assigned to the new item
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Promotion.ActionResponses"/> namespace contains
            data contract objects for promotion action responses.<br/>
            Action responses represent actions to be executed in order to apply a given promotion.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.ReplaceItemResponse">
            <summary>
            Response for a ReplaceItem Action
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.ReplaceItemResponse.Seq">
            <summary>
            Seq of the sale item which will be replaced
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.ReplaceItemResponse.NewCode">
            <summary>
            The new code of the sale item.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.SetItemPriceResponse">
            <summary>
            Response for a SetItemPrice Action
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SetItemPriceResponse.Seq">
            <summary>
            The seq number which is used to identify the item in the sale.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SetItemPriceResponse.Price">
            <summary>
            The new price to be assigned to the Item
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SetItemPriceResponse.PriceFromCode">
            <summary>
            Indicates that the new price should be retrieved from another item.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.SetItemQuantityResponse">
            <summary>
            Response to a SetItemQuantity Action
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SetItemQuantityResponse.Seq">
            <summary>
            The seq number which is used to identify the item in the sale.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SetItemQuantityResponse.NewQty">
            <summary>
            The new quantity to be assigned to the Item
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.SetSaleDiscountResponse">
            <summary>
            Response to a SetSaleDiscount Action
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SetSaleDiscountResponse.Discount">
            <summary>
            The discount that must be applied to the sale
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.ActionResponses.SplitItemResponse">
            <summary>
            Indicates that an item on the Sale should be splited 
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SplitItemResponse.Seq">
            <summary>
            The Seq of the Item that should be splited
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SplitItemResponse.KeepQty">
            <summary>
            The Quantity that should be keeped to the Item
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.ActionResponses.SplitItemResponse.NewSeq">
            <summary>
            The Seq of the new Item that would have the 
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.AppliedPromotion">
            <summary>
            Represents an applied promotion
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.AppliedPromotion.#ctor">
            <summary>
            Constructs a new AppliedPromotion
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.AppliedPromotion.Languages">
            <summary>
            List of language-dependent data for this promotion (names, descriptions, etc)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.AppliedPromotion.Id">
            <summary>
            Promotion id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.AppliedPromotion.TotalCount">
            <summary>
            Promotion id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.AppliedPromotion.ExclusivePromotion">
            <summary>
            Indicates whether the promotion is Exclusive
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.AppliedPromotion.ActionSet">
            <summary>
            Set of actions for applying this promotion
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.AppliedPromotion.Actions">
            <summary>
            Simple accessor for the first "ActionSet" in order to keep the code simpler on most scenarios
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionEngineBase">
            <summary>
            Base Promotion Engine Plugin
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.IPromotionEngine">
            <summary>
            Abstracts the PromotionEngine
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionEngine.ApplyPromotionByRedemptionMode(NpSharp.Framework.Promotion.RedemptionMode,NpSharp.Framework.Promotion.PromotionRequest)">
            <summary>
            Apply promotions from the given <see cref="T:NpSharp.Framework.Promotion.RedemptionMode"/>.
            </summary>
            <param name="mode">The redemption mode.</param>
            <param name="request">An instance of <see cref="T:NpSharp.Framework.Promotion.PromotionRequest"/> class.</param>
            <returns>promotion engine response</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionEngine.ApplyPromotionByPromotionId(System.Int32[],NpSharp.Framework.Promotion.PromotionRequest)">
            <summary>
            Apply promotions from the given promotion IDs.
            </summary>
            <param name="promotionIDs">An array of promotions ID.</param>
            <param name="request">An instance of <see cref="T:NpSharp.Framework.Promotion.PromotionRequest"/> class.</param>
            <returns>promotion engine response</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionEngine.ApplyPromotionByPromotionXml(System.String,NpSharp.Framework.Promotion.PromotionRequest)">
            <summary>
            Apply promotion from the given promotion XML.
            </summary>
            <param name="promotionXml">An XML string representation of the promotion.</param>
            <param name="request">An instance of <see cref="T:NpSharp.Framework.Promotion.PromotionRequest"/> class.</param>
            <returns>promotion engine response</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionEngine.GetProductCodesForOnItemSoldPromotions">
            <summary>
            Get all product codes for promotions with Redemption Mode equals to OnItemSold.
            </summary>
            <returns>An list of Product Id's that may have promotions to applied to.</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionEngine.ApplyItemSoldPromotions(NpSharp.Framework.Promotion.PromotionRequest)">
            <summary>
            Applies all item based promotions appliable for a specific item.
            </summary>
            <param name="request">A complete promotion request, including the value for the SoldItem</param>
            <returns>An list of Promotion Id's that may be appliable for the product</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionEngineBase.ApplyPromotionByRedemptionMode(NpSharp.Framework.Promotion.RedemptionMode,NpSharp.Framework.Promotion.PromotionRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionEngineBase.ApplyPromotionByPromotionId(System.Int32[],NpSharp.Framework.Promotion.PromotionRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionEngineBase.ApplyPromotionByPromotionXml(System.String,NpSharp.Framework.Promotion.PromotionRequest)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionEngineBase.GetProductCodesForOnItemSoldPromotions">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionEngineBase.ApplyItemSoldPromotions(NpSharp.Framework.Promotion.PromotionRequest)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionToolBase">
            <summary>
            Base Promotion Tool Plugin Implementation
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.IPromotionTool">
            <summary>
            Interface for the Promotion Tool Plugin
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionTool.Store(System.Xml.Linq.XElement)">
            <summary>
            Store a PromotionXml into the PromotionTool DB
            </summary>
            <param name="promotionXml">An Xml representing the promotion</param>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionTool.LoadPromotionById(System.String)">
            <summary>
            Retrieve Promotion by Id
            </summary>
            <param name="id">The Promotion Id</param>
            <returns>An Xml representing the promotion</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionTool.GetPromotionsByRedemptionMode(NpSharp.Framework.Promotion.RedemptionMode)">
            <summary>
            Retrieve a list of Promotions by Redemption Mode
            </summary>
            <param name="mode">Redemption mode</param>
            <returns>A Xml representing the promotions</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionTool.ImportPromotionsFromFile(System.String,System.Boolean)">
            <summary>
            Import a file containing Promotions.
            </summary>
            <param name="filePath">Path to the promotion DB XML file. The default value is [DataFolder]\promotion-db.xml.</param>
            <param name="forceOverride">If true, force loading the XML, regardless if it has been imported already or not</param>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionTool.GetPromotionByBarcode(System.String)">
            <summary>
            Retrieves promotion by its barcode.
            </summary>
            <param name="barcode">The barcode number.</param>
            <returns>If promotion exists, returns a string instance representing the promotion.</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.IPromotionTool.GetExclusivePromotionsIds">
            <summary>
            Retrieves the Exclusive Promotions Ids
            </summary>
            <returns>An IEnumerable of long containing the exclusive promotion Ids</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionToolBase.Store(System.Xml.Linq.XElement)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionToolBase.LoadPromotionById(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionToolBase.GetPromotionsByRedemptionMode(NpSharp.Framework.Promotion.RedemptionMode)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionToolBase.ImportPromotionsFromFile(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionToolBase.GetPromotionByBarcode(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionToolBase.GetExclusivePromotionsIds">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Promotion.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.Promotion"/> namespace contains data contract objects regarding promotions.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionRequest">
            <summary>
            Represents a promotion request.
            A promotion request contains all the current register state necessary for the promotion engine, as well as a list of promotions to be applied
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionRequest.FromXml(System.IO.Stream)">
            <summary>
            Parses a promotion request from an XML stream
            </summary>
            <param name="xmlStream">XML input stream</param>
            <returns>parsed PromotionRequest object</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionRequest.FromXml(System.IO.TextReader)">
            <summary>
            Parses a promotion request from an XML stream
            </summary>
            <param name="xmlStream">XML input stream</param>
            <returns>parsed PromotionRequest object</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionRequest.ToXml(System.IO.Stream,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Serializes this promotion request as an XML
            </summary>
            <param name="stream">output stream</param>
            <param name="omitXmlDeclaration">whether to omit the XML declaration or not</param>
            <param name="indent">whether to indent the output XML or not</param>
            <param name="encoding">output encoding - the default is UTF8 without BOM</param>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionRequest.Promotion">
            <summary>
            Holds the list of promotions to be applied
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionRequest.State">
            <summary>
            Current register state
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionRequest.SoldItem">
            <summary>
            If this is set to a number greater than zero, indicates that this promotion request was generated because the given product code was sold.
            This is used for internal optimizations, so that we don't need to evaluate all existing promotions.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionResponse">
            <summary>
            Represents a promotion engine response.
            A response contains the list of promotions applied and the necessary actions to be taken to apply each promotion.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionResponse.#ctor">
            <summary>
            Constructs a new PromotionResponse
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionResponse.FromXml(System.IO.Stream)">
            <summary>
            Parses a promotion response from an XML stream
            </summary>
            <param name="xmlStream">XML input stream</param>
            <returns>parsed PromotionResponse object</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionResponse.FromXml(System.IO.TextReader)">
            <summary>
            Parses a promotion response from an XML stream
            </summary>
            <param name="xmlStream">XML input stream</param>
            <returns>parsed PromotionResponse object</returns>
        </member>
        <member name="M:NpSharp.Framework.Promotion.PromotionResponse.ToXml(System.IO.Stream,System.Boolean,System.Boolean,System.Text.Encoding)">
            <summary>
            Serializes this promotion response as an XML
            </summary>
            <param name="stream">output stream</param>
            <param name="omitXmlDeclaration">whether to omit the XML declaration or not</param>
            <param name="indent">whether to indent the output XML or not</param>
            <param name="encoding">output encoding - the default is UTF8 without BOM</param>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionResponse.AppliedPromotions">
            <summary>
            List of promotions applied
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionResponse.RejectedPromotions">
            <summary>
            List of promotions rejected
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionResponse.RemovePromotions">
            <summary>
            List of promotions to be removed by POS.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.PromotionTagOnRequest">
            <summary>
            Represents the list of promotions to be applied (in a promotion request)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionTagOnRequest.Ids">
            <summary>
            Promotion ids to be applied (pipe-separated)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.PromotionTagOnRequest.IdsInt">
            <summary>
            A collection of the Id's
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.RedemptionMode">
            <summary>
            Indicates the Redemption Mode for the promotion
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Promotion.RedemptionMode.Manual">
            <summary>
            For manual redemption
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Promotion.RedemptionMode.OnTotal">
            <summary>
            To be redeemed when the order is totalized
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Promotion.RedemptionMode.OnItemSold">
            <summary>
            To be redeemed when an item is included on the order
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.RejectedPromotion">
            <summary>
            Represents a rejected promotion
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.RejectedPromotion.#ctor">
            <summary>
            Constructs a new RejectedPromotion
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RejectedPromotion.Id">
            <summary>
            Promotion id
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RejectedPromotion.ShortDescription">
            <summary>
            Short description of the promotion (one line)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RejectedPromotion.LongDescription">
            <summary>
            Long description of the promotion (multiple lines).
            This should include all promotion restrictions and details.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.RejectedPromotion.Causes">
            <summary>
            Cause of this rejection
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.Sale">
            <summary>
            Represents a register sale, to be passed on a promotion request
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Promotion.Sale.#ctor">
            <summary>
            Instantiates a new Sale
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.AppliedPromotions">
            <summary>
            Gets or sets the applied promotions (pipe-separated).
            <remarks>Public for serialization purposes. Use AppliedPromotionsInt and HasExclusivePromotion instead.</remarks>
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.AppliedPromotionsInt">
            <summary>
            <see cref="P:NpSharp.Framework.Promotion.Sale.AppliedPromotions"/>, parsed as an int[]
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.HasExclusivePromotion">
            <summary>
            Indicates whether the Sale has a Exclusive Promotion Applied
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.Amount">
            <summary>
            Sale amount
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.NetTotalAmount">
            <summary>
            Total Amount without taxes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.BeforeDiscountNetTotalAmount">
            <summary>
            Total Amount without taxes
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.TaxTotalAmount">
            <summary>
            Total tax amount
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.BeforeDiscountTaxTotalAmount">
            <summary>
            Total tax amount
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.Type">
            <summary>
            Sale type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.CreatedAt">
            <summary>
            Sale creation timestamp
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.OrderTakerPlatform">
            <summary>
            Order Taker Platform (Web, Mobile, Kiosk, HOT, POS)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.DayPart">
            <summary>
            Day Part (Breakfast, lunch)
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.TransactionKind">
            <summary>
            Gets or sets the transaction kind.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.Sale.SaleItems">
            <summary>
            Sale items
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.SaleItem">
            <summary>
            Sale item
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Seq">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Qty">
            <summary>
            Item quantity
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Code">
            <summary>
            Product code
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.UnitPrice">
            <summary>
            Unit price
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Level">
            <summary>
            Item level
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Parent">
            <summary>
            Item parent sequence number
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.ParentInt">
            <summary>
            <see cref="P:NpSharp.Framework.Promotion.SaleItem.Parent"/> attribute as a nullable integer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Name">
            <summary>
            Item name
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.QuantityPromo">
            <summary>
            Quantity of Promotion Items
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.NetUnitPrice">
            <summary>
            Net unit price
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.TaxUnitAmount">
            <summary>
            Tax unit price
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.PromotionId">
            <summary>
            Gets or sets the promotion applied.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.PromotionCounter">
            <summary>
            Gets or sets the promotion counter.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.Eligible">
            <summary>
            Gets or sets which the Item is eligible for revalidation.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.SaleItem.NonProduct">
            <summary>
            Gets or sets if the item is a product.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Promotion.State">
            <summary>
            Represents a register state, to be passed on a promotion request
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.State.PodType">
            <summary>
            Register Point of Distribution type
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.State.BusinessDay">
            <summary>
            Register Business Day
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.State.StoreId">
            <summary>
            Store ID
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Promotion.State.Sale">
            <summary>
            Current register sale
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ReadOnly">
            <summary>
            Framework constants
            </summary>
        </member>
        <member name="F:NpSharp.Framework.ReadOnly.DefaultPerformanceCounterCategory">
            <summary>
            Category used for performance counters
            </summary>
        </member>
        <member name="F:NpSharp.Framework.ReadOnly.DefaultPerformanceCounterCategoryHelp">
            <summary>
            Category help text used for performance counters
            </summary>
        </member>
        <member name="F:NpSharp.Framework.ReadOnly.DefaultPluginsFolder">
            <summary>
            Default plugins folder
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.OrdersDbBase">
            <summary>
            Base abstract class for OrdersDb plugins
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.IOrdersDb">
            <summary>
            Defines the methods to persist and query the sale object.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.StoreSale(NpSharp.Framework.OrdersDb.Objects.Sale)">
            <summary>
            Stores a sale object
            </summary>
            <param name="sale">The sale object</param>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.QuerySaleByOrderKey(System.String)">
            <summary>
            Query the sale objects by a specific order key.
            </summary>
            <param name="orderKey">The order key.</param>
            <returns>If found, a instance of <see cref="T:NpSharp.Framework.OrdersDb.Objects.Sale"/>; otherwise, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="orderKey"/> is null.</exception>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.QuerySales(NpSharp.Framework.OrdersDb.QuerySalesParameters)">
            <summary>
            Query sale objects using the specified query filters
            </summary>
            <param name="query">query parameters</param>
            <returns>List of <see cref="T:NpSharp.Framework.OrdersDb.Objects.Sale"/> objects</returns>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.StoreProductionOrder(NpSharp.Framework.OrdersDb.Objects.ProductionOrder)">
            <summary>
            Stores a <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/> object
            </summary>
            <param name="productionOrder">The <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/> object</param>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.GetProductionOrder(System.String,System.String)">
            <summary>
            Gets a <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/> object for the given order key and production area name
            </summary>
            <param name="orderKey">The order key.</param>
            <param name="restaurantArea">restaurant area name</param>
            <returns>If found, a instance of <see cref="T:NpSharp.Framework.OrdersDb.Objects.ProductionOrder"/>; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.TransactionCountPerPeriod(System.DateTime,System.DateTime)">
            <summary>
            Returns the numbers of sales (Paid) for the specified period.
            </summary>
            <param name="begin">The begin date for the specific period.</param>
            <param name="end">The end date for the specific period.</param>
            <returns>Numbers of sales (Paid).</returns>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.TransactionCountPerWeek(System.DateTime)">
            <summary>
            Returns the numbers of sales (Paid) per week.
            </summary>
            <param name="date">The date of the week.</param>
            <returns>Numbers of sales (Paid).</returns>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.IOrdersDb.TransactionCountPerMonth(System.DateTime)">
            <summary>
            Returns the numbers of sales (Paid) per month.
            </summary>
            <param name="date">The date of the month.</param>
            <returns>Numbers of sales (Paid).</returns>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.StoreSale(NpSharp.Framework.OrdersDb.Objects.Sale)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.QuerySaleByOrderKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.QuerySales(NpSharp.Framework.OrdersDb.QuerySalesParameters)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.StoreProductionOrder(NpSharp.Framework.OrdersDb.Objects.ProductionOrder)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.GetProductionOrder(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.TransactionCountPerPeriod(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.TransactionCountPerWeek(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.OrdersDbBase.TransactionCountPerMonth(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.EnumerableExtension">
            <summary>
            Helper class to extend Enumerable funtionalities
            </summary>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates all members of a given IEnumerable type and performs an action for each one
            </summary>
            <typeparam name="T">IEnumerable Type</typeparam>
            <param name="source">Instance of the type</param>
            <param name="action">Method to be executed</param>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts or converts an enumerable to a IList
            </summary>
            <typeparam name="T">type param</typeparam>
            <param name="source">source enumerable</param>
            <returns>resultin list</returns>
        </member>
        <member name="M:NpSharp.Framework.EnumerableExtension.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns distinct elements from a sequence by using the given value selector and default equality comparer to compare values
            </summary>
            <typeparam name="TSource">type of source</typeparam>
            <typeparam name="TKey">type of key</typeparam>
            <param name="source">the source</param>
            <param name="selector">selector used to retrieve distinct values</param>
            <returns>distinct elements</returns>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.Sale">
            <summary>
            Represents a sale
            </summary>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.Objects.Sale.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:NpSharp.Framework.OrdersDb.Objects.Sale"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.Objects.Sale.ToString">
            <inheritdoc/>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.OrderKey">
            <summary>
            Gets or sets the unique order key.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.BusinessDay">
            <summary>
            Gets or sets the business day as a YYYYMMDD integer
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.TenderPos">
            <summary>
            Gets or sets the POS id.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.TotalAmount">
            <summary>
            Gets or sets the total amount.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.SaleStatus">
            <summary>
            Gets or sets the sale status.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.SaleItems">
            <summary>
            Gets or sets the sales items.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.Offers">
            <summary>
            Gets or sets Offers element of a sale
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.Sale.SaleDate">
            <summary>
            Gets or sets the sale date.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.SaleItem">
            <summary>
            Represents a sale item
            </summary>
        </member>
        <member name="M:NpSharp.Framework.OrdersDb.Objects.SaleItem.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:NpSharp.Framework.OrdersDb.Objects.SaleItem"/>.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.ProductCode">
            <summary>
            Gets or sets the product code.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.Level">
            <summary>
            Gets or sets the level.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.LongName">
            <summary>
            Gets or sets the long name.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.UnitPrice">
            <summary>
            Gets or sets the unit price.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.TotalPrice">
            <summary>
            Gets or sets the total price.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.OffersItem">
            <summary>
            Gets or sets an offer item, specific for a sale item
            </summary>
        </member>
        <member name="P:NpSharp.Framework.OrdersDb.Objects.SaleItem.Children">
            <summary>
            Gets or sets the sale items children.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.OrdersDb.Objects.SaleStatus">
            <summary>
            Sale status enumerator.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.SaleStatus.Start">
            <summary>
            Default status (ready to sell, but no item sold so far).
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.SaleStatus.InProgress">
            <summary>
            Sale in progress, at least one item sold.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.SaleStatus.Totalized">
            <summary>
            Sale in tendering process.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.SaleStatus.Stored">
            <summary>
            Sale stored.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.SaleStatus.Paid">
            <summary>
            Sale paid.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.OrdersDb.Objects.SaleStatus.Voided">
            <summary>
            Sale voided.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.NamespaceDoc">
            <summary>
            The <see cref="N:NpSharp.Framework.ServiceContracts"/> namespace contains all the
            service contract interfaces defined by the NpSharp framework.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.ServiceContracts.Np6IntegratorBase">
            <summary>
            Base abstract class for <see cref="T:NpSharp.Framework.ServiceContracts.INp6Integrator"/> plugins
            </summary>
        </member>
        <member name="M:NpSharp.Framework.ServiceContracts.Np6IntegratorBase.ExecuteNpSharpCommand(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.StringExtensions">
            <summary>
            Extension methods for the <see cref="T:System.String"/> class.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.StringExtensions.Fmt(System.String,System.Object[])">
            <summary>
            Format this string using the <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>
            </summary>
            <param name="formatString">format string</param>
            <param name="args">formatting arguments</param>
            <returns>formatted string</returns>
        </member>
        <member name="T:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions">
            <summary>
            Defines options for durable subscriptions
            </summary>
        </member>
        <member name="M:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.#ctor">
            <summary>
            Initialize the default values
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxQueuedMessages">
            <summary>
            Maximum number of persisted queued messages - if this number if exceeded, old messages are discarded.
            The default value is 500.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxFailedMessages">
            <summary>
            Maximum number of persisted failed queued messages - if this number if exceeded, old messages are discarded.
            The default value is 50.
            </summary>
        </member>
        <member name="P:NpSharp.Framework.InternalServices.PubSub.SubscriptionOptions.MaxMessageAge">
            <summary>
            Maximum age of queued messages - messages older than this are discarded.
            The default is one week.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.SystemClock">
            <summary>
            Concrete implementation of IClock, which uses the system DateTime
            </summary>
        </member>
        <member name="P:NpSharp.Framework.SystemClock.Now">
            <inheritdoc />
        </member>
        <member name="P:NpSharp.Framework.SystemClock.Today">
            <inheritdoc />
        </member>
        <member name="P:NpSharp.Framework.SystemClock.UtcNow">
            <inheritdoc />
        </member>
        <member name="T:NpSharp.Framework.Time">
            <summary>
            Represents an specific time
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Time.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a Time structure with the given hour, minute and second
            </summary>
            <param name="hour">hour component</param>
            <param name="minute">minute component</param>
            <param name="second">second component</param>
        </member>
        <member name="M:NpSharp.Framework.Time.Parse(System.String)">
            <summary>
            Returns the Time representation of the <see cref="T:System.String"/> value
            </summary>
            <param name="time">The <see cref="T:System.String"/> value</param>
            <returns>Time structure</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.ToString">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.Equals(NpSharp.Framework.Time)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.CompareTo(NpSharp.Framework.Time)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Implicit(NpSharp.Framework.Time)~System.TimeSpan">
            <summary>
            TimeSpan implicit cast operator
            </summary>
            <param name="time">the time</param>
            <returns>converted value</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Implicit(System.TimeSpan)~NpSharp.Framework.Time">
            <summary>
            TimeSpan implicit cast operator
            </summary>
            <param name="timespan">the timespan</param>
            <returns>converted value</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Equality(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Equality(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Equality(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Equality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if equals</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Inequality(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if different</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Inequality(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if different</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_Inequality(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Inequality operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>true if different</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThan(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThan(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThan(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThanOrEqual(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThanOrEqual(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_GreaterThanOrEqual(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThan(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThan(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThan(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThanOrEqual(NpSharp.Framework.Time,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThanOrEqual(System.TimeSpan,NpSharp.Framework.Time)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="M:NpSharp.Framework.Time.op_LessThanOrEqual(NpSharp.Framework.Time,System.TimeSpan)">
            <summary>
            Comparison operator
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <returns>operator result</returns>
        </member>
        <member name="P:NpSharp.Framework.Time.Hour">
            <summary>
            The Hour of the time
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Time.Minute">
            <summary>
            The Minute of the time
            </summary>
        </member>
        <member name="P:NpSharp.Framework.Time.Second">
            <summary>
            The Second of the time
            </summary>
        </member>
        <member name="T:NpSharp.Framework.Utils.LocaleComparer">
            <summary>
            Represents a locale comparison operation that uses <see cref="P:System.StringComparer.InvariantCultureIgnoreCase"/>.
            </summary>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.Equals(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.GetHashCode(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.Equals(System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleComparer.GetHashCode(System.String[])">
            <inheritdoc/>
        </member>
        <member name="T:NpSharp.Framework.Utils.LocaleUtils">
            <summary>
            Class for utility methods related to Locale strings.
            </summary>
        </member>
        <member name="F:NpSharp.Framework.Utils.LocaleUtils.LocaleSeparators">
            <summary>Locale Segment Separators.</summary>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.GetLocaleSegments(System.String)">
            <summary>
            Gets the locale segments from the given locale string.
            </summary>
            <param name="locale">Locale string</param>
            <returns>Locale segments</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])">
            <summary>
            Normalizes the provided <paramref name="localeSegments"/>.
            </summary>
            <param name="localeSegments">Locale Segments</param>
            <returns>The provided <paramref name="localeSegments"/> joined by _. Null or whitespace entries are ignored. Entries are also trimmed.</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String)">
            <summary>
            Normalizes the provided <paramref name="locale"/>.
            This is a shorthand for <see cref="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])"/> with <see cref="M:NpSharp.Framework.Utils.LocaleUtils.GetLocaleSegments(System.String)"/>.
            </summary>
            <param name="locale">The locale.</param>
            <returns>The return of <see cref="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])"/>.</returns>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.ReduceHierarchy(System.String[],System.Int32)">
            <summary>
            Reduces the provided <paramref name="localeSegments"/> by the provided quantity of <paramref name="level"/>.
            </summary>
            <param name="localeSegments">The locale segments.</param>
            <param name="level">Quantity of levels to reduce.</param>
            <returns>The reduced normalized locale.</returns>
            <seealso cref="M:NpSharp.Framework.Utils.LocaleUtils.Normalize(System.String[])"/>
        </member>
        <member name="M:NpSharp.Framework.Utils.LocaleUtils.ReduceHierarchy(System.String,System.Int32)">
            <summary>
            Reduces the provided <paramref name="locale"/> by the provided quantity of <paramref name="level"/>.
            </summary>
            <param name="locale">The locale.</param>
            <param name="level">Quantity of levels to reduce.</param>
            <returns>The reduced normalized locale.</returns>
        </member>
        <member name="P:NpSharp.Framework.Utils.LocaleUtils.LocaleComparer">
            <summary>
            Gets an instance of <see cref="P:NpSharp.Framework.Utils.LocaleUtils.LocaleComparer"/>.
            </summary>
        </member>
        <member name="T:NpSharp.Framework.XElementExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Xml.Linq.XElement"/> class
            </summary>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required XML attribute
            </summary>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>attribute value</returns>
            <exception cref="T:System.Xml.XmlException">when the attribute does not exist, or is empty</exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredAttribute``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required XML attribute, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>attribute value</returns>
            <exception cref="T:System.Xml.XmlException">when the attribute does not exist, or is empty</exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Get the value of an optional XML attribute
            </summary>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="defaultValue">default value to return if the attribute is not found, or empty</param>
            <returns>attribute value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetAttribute``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Get the value of an optional XML attribute, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">element</param>
            <param name="name">attribute name</param>
            <param name="defaultValue">default value to return if the attribute is not found, or empty</param>
            <returns>attribute value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required child XML element
            </summary>
            <param name="el">father element</param>
            <param name="name">element name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>element value</returns>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetRequiredElement``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            Get the value of a required child XML element, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">father element</param>
            <param name="name">element name</param>
            <param name="allowEmpty">whether to allow empty or whitespace values or not</param>
            <returns>element value</returns>
            <exception cref="T:System.Xml.XmlException"></exception>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Get the value of an optional XML element
            </summary>
            <param name="el">father element</param>
            <param name="name">child element name</param>
            <param name="defaultValue">default value to return if the element is not found, or empty</param>
            <returns>child element value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.GetElement``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Get the value of an optional XML element, converted to the given type
            </summary>
            <typeparam name="T">type to convert the value to</typeparam>
            <param name="el">father element</param>
            <param name="name">child element name</param>
            <param name="defaultValue">default value to return if the element is not found, or empty</param>
            <returns>child element value, or the given default value</returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.HasAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Checks if a XElement has the specified attribute.
            </summary>
            <param name="source"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NpSharp.Framework.XElementExtensions.HasElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Checks if a XElement has the specified inner element.
            </summary>
            <param name="source"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NpSharp.Framework.XNameExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Xml.Linq.XName"/> class
            </summary>
        </member>
        <member name="M:NpSharp.Framework.XNameExtensions.ToAttribute(System.Xml.Linq.XName,System.Object)">
            <summary>
            Return a new <see cref="T:System.Xml.Linq.XAttribute"/> with this name and the given value, but
            returns null if "value" is null
            </summary>
            <param name="name">attribute name</param>
            <param name="value">attribute value</param>
            <returns>XML attribute, or null if the given value was null</returns>
        </member>
    </members>
</doc>
